name: "CI Tests"

on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "spec/api/**"
  push:
    branches:
      - "main"
    tags:
      - "v*"
  schedule:
    - cron: "0 8 * * 1" # At 08:00 on Monday

jobs:
  backend-analyze:
    name: "Backend code analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Setup pnpm"
        uses: "pnpm/action-setup@v2"
        with:
          version: "9.13.0"

      - name: "Get pnpm store directory"
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: "Cache pnpm dependencies"
        uses: "actions/cache@v3"
        with:
          path: "${{ env.PNPM_STORE_PATH }}"
          key: "${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}"
          restore-keys: "${{ runner.os }}-pnpm-store-"

      - name: "Install dependencies"
        shell: "bash"
        run: "pnpm install"

      - name: "Build generated code"
        shell: "bash"
        run: "pnpm generate:openapi"

      - name: "Run Code Linting"
        run: "pnpm --filter @fastybird/smart-panel-backend lint:js"

      - name: "Run Code Linting"
        run: "pnpm --filter @fastybird/smart-panel-backend lint:openapi"

  backend-tests:
    name: "Backend code tests"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Setup pnpm"
        uses: "pnpm/action-setup@v2"
        with:
          version: "9.13.0"

      - name: "Get pnpm store directory"
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: "Cache pnpm dependencies"
        uses: "actions/cache@v3"
        with:
          path: "${{ env.PNPM_STORE_PATH }}"
          key: "${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}"
          restore-keys: "${{ runner.os }}-pnpm-store-"

      - name: "Start InfluxDB"
        run: |
          docker run -d --name influxdb \
            -p 8086:8086 \
            -e INFLUXDB_DB=fastybird \
            -e INFLUXDB_ADMIN_USER= \
            -e INFLUXDB_ADMIN_PASSWORD= \
            influxdb:1.8

      - name: "Install dependencies"
        shell: "bash"
        run: "pnpm install"

      - name: "Build generated code"
        shell: "bash"
        run: "pnpm generate:openapi"

      - name: "Run Unit Tests"
        run: "pnpm --filter @fastybird/smart-panel-backend test:unit"

      - name: "Run E2E Tests"
        run: "pnpm --filter @fastybird/smart-panel-backend test:e2e"
        env:
          FB_DB_SYNC: "true"
          FB_DB_LOGGING: "false"
          FB_ADMIN_PORT: "3003"

      - name: "Generate Coverage Report"
        run: "pnpm --filter @fastybird/smart-panel-backend test:cov"

  admin-analyze:
    name: "Admin code analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Setup pnpm"
        uses: "pnpm/action-setup@v2"
        with:
          version: "9.13.0"

      - name: "Get pnpm store directory"
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: "Cache pnpm dependencies"
        uses: "actions/cache@v3"
        with:
          path: "${{ env.PNPM_STORE_PATH }}"
          key: "${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}"
          restore-keys: "${{ runner.os }}-pnpm-store-"

      - name: "Install dependencies"
        shell: "bash"
        run: "pnpm install"

      - name: "Build generated code"
        shell: "bash"
        run: "pnpm generate:openapi"

      - name: "Run Code Linting"
        run: "pnpm --filter @fastybird/smart-panel-admin lint:js"

      - name: "TS Code Check"
        run: "pnpm --filter @fastybird/smart-panel-admin type-check"

  admin-tests:
    name: "Admin code tests"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Setup pnpm"
        uses: "pnpm/action-setup@v2"
        with:
          version: "9.13.0"

      - name: "Get pnpm store directory"
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: "Cache pnpm dependencies"
        uses: "actions/cache@v3"
        with:
          path: "${{ env.PNPM_STORE_PATH }}"
          key: "${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}"
          restore-keys: "${{ runner.os }}-pnpm-store-"

      - name: "Install dependencies"
        shell: "bash"
        run: "pnpm install"

      - name: "Build generated code"
        shell: "bash"
        run: "pnpm generate:openapi"

      - name: "Run Unit Tests"
        run: "pnpm --filter @fastybird/smart-panel-admin test:unit"

      - name: "Generate Coverage Report"
        run: "pnpm --filter @fastybird/smart-panel-admin test:cov"

  panel-analyze:
    name: "Panel code analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Install Flutter SDK"
        uses: "subosito/flutter-action@v2"
        with:
          channel: stable
          flutter-version: 3.27.0

      - name: "Install Melos"
        run: "dart pub global activate melos"

      - name: "Bootstrap Dependencies"
        run: "melos bootstrap"

      - name: "Build generated code"
        run: "melos rebuild-api"

      - name: "Run Dart Analyzer"
        run: "melos run analyze"

  website-build:
    name: "Test build web"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: [ "ubuntu-latest" ]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Setup pnpm"
        uses: "pnpm/action-setup@v2"
        with:
          version: "9.13.0"

      - name: "Get pnpm store directory"
        run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: "Cache pnpm dependencies"
        uses: "actions/cache@v3"
        with:
          path: "${{ env.PNPM_STORE_PATH }}"
          key: "${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}"
          restore-keys: "${{ runner.os }}-pnpm-store-"

      - name: "Install dependencies"
        shell: "bash"
        run: "pnpm install"

      - name: "Test build"
        run: 'pnpm --filter @fastybird/smart-panel-docs build'

  devices-schemas:
    name: "Devices mapping analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "20"

      - name: "Install ajv-cli"
        run: "npm install -g ajv-cli"

      - name: "Validate devices.json"
        run: "ajv validate -s spec/devices/devices.schema.json -d spec/devices/devices.json"

      - name: "Validate channels.json"
        run: "ajv validate -s spec/devices/channels.schema.json -d spec/devices/channels.json"
