name: "CI Tests"

on:
  pull_request:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  schedule:
    - cron: "0 8 * * 1" # At 08:00 on Monday

jobs:
  check-skip:
    runs-on: ubuntu-latest

    outputs:
      skip: ${{ steps.check.outputs.skip }}

    steps:
      - name: "Check commit message for [ci skip]"
        id: "check"
        run: |
          if [[ "${{ github.event.head_commit.message || '' }}" == *"[ci skip]"* ]]; then
            echo "Skipping CI due to [ci skip] in commit message"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Running full CI"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  backend-analyze:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "Backend code analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.12.0" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Run Code Linting"
        run: "pnpm --filter @fastybird/smart-panel-backend lint:js"

      - name: "Run Code Linting"
        run: "pnpm --filter @fastybird/smart-panel-backend lint:openapi"

  backend-tests:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "Backend code tests"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.12.0" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Start InfluxDB"
        run: |
          docker run -d --name influxdb \
            -p 8086:8086 \
            -e INFLUXDB_DB=fastybird \
            -e INFLUXDB_ADMIN_USER= \
            -e INFLUXDB_ADMIN_PASSWORD= \
            influxdb:1.8

      - name: "Run Unit Tests"
        run: "pnpm --filter @fastybird/smart-panel-backend test:unit"

      - name: "Run E2E Tests"
        run: "pnpm --filter @fastybird/smart-panel-backend test:e2e"
        env:
          FB_DB_SYNC: "true"
          FB_DB_LOGGING: "false"
          FB_ADMIN_PORT: "3003"
          FB_ADMIN_UI_PATH: ""

      - name: "Generate Coverage Report"
        run: "pnpm --filter @fastybird/smart-panel-backend test:cov"

  admin-analyze:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "Admin code analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.12.0" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Run Code Linting"
        run: "pnpm --filter @fastybird/smart-panel-admin lint:js"

      - name: "TS Code Check"
        run: "pnpm --filter @fastybird/smart-panel-admin type-check"

  admin-tests:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "Admin code tests"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.12.0" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Run Unit Tests"
        run: "pnpm --filter @fastybird/smart-panel-admin test:unit"

      - name: "Generate Coverage Report"
        run: "pnpm --filter @fastybird/smart-panel-admin test:cov"

  panel-analyze:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "Panel code analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        flutter-version: [ "3.27.0" ]
        flutter-channel: [ "stable" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Flutter"
        uses: "./.github/actions/setup-flutter-project"
        with:
          flutter-version: "${{ matrix.flutter-version }}"
          flutter-channel: "${{ matrix.flutter-channel }}"

      - name: "Run Dart Analyzer"
        run: "melos run analyze"

  website-build:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "Test build web"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.12.0" ]
        operating-system: [ "ubuntu-latest" ]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Test build"
        run: 'pnpm --filter @fastybird/smart-panel-docs build'

  devices-schemas:
    needs: "check-skip"
    if: needs.check-skip.outputs.skip == 'false'
    name: "System schemas analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      fail-fast: false
      matrix:
        node-version: [ "22" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node.js"
        uses: "actions/setup-node@v4"
        with:
          node-version: "${{ matrix.node-version }}"

      - name: "Install ajv-cli"
        run: "npm install -g ajv-cli"

      - name: "Validate devices.json"
        run: "ajv validate -s spec/devices/devices.schema.json -d spec/devices/devices.json"

      - name: "Validate channels.json"
        run: "ajv validate -s spec/devices/channels.schema.json -d spec/devices/channels.json"

      - name: "Validate OpenWeather city.list.json"
        run: "ajv validate -s spec/weather/city.list.schema.json -d spec/weather/city.list.json"
