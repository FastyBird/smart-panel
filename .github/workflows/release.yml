name: "Production Release"

on:
  release:
    types:
      - "released"

concurrency:
  group: production-release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  tag:
    name: "Verify Release Tag"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: [ "ubuntu-latest" ]

    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: "Get Release Tag"
        id: "get-version"
        uses: "jannemattila/get-version-from-tag@v3"

      - name: "Tag Info"
        run: |
          echo "Release Tag: ${{github.ref}}"
          echo "Latest Tag: ${{ steps.get-version.outputs.version }}"

      - name: "Tag Info Matches"
        if: endsWith(github.ref, steps.get-version.outputs.version )
        run: |
          echo Latest Tag matches Release tag

      - name: "Tag Info Doesn't Match"
        if: ${{ !endsWith(github.ref, steps.get-version.outputs.version ) }}
        run: |
          echo Latest Tag does not matches Release tag
          exit 1

  sync-versions:
    needs: "tag"
    name: "Sync packages versions"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        node-version: [ "22" ]
        operating-system: [ "ubuntu-latest" ]

    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Setup Node"
        uses: "actions/setup-node@v4"
        with:
          node-version: "${{ matrix.node-version }}"

      - name: "Sync Versions"
        id: "set-version"
        run: "node .github/scripts/monorepo-version-sync.js ${{ github.ref }} latest"

      - name: "Commit Version Changes"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "chore: sync versions [ci skip]"
            git push
          else
            echo "No version changes to commit."
          fi

  changelog:
    needs: "sync-versions"
    name: "Generate CHANGELOG"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Pull Updated Branch"
        run: git pull origin ${{ github.ref_name }}

      - name: "Generate CHANGELOG.md from Releases"
        uses: "mikepenz/release-changelog-builder-action@v4"
        with:
          outputFile: "CHANGELOG.md"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Commit CHANGELOG"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [ -n "$(git status --porcelain)" ]; then
            git add CHANGELOG.md
            git commit -m "docs: update CHANGELOG.md [ci skip]"
            git push
          else
            echo "No changelog updates to commit."
          fi

  publish-backend:
    needs: [ "tag", "sync-versions", "changelog" ]
    name: "Publish Release Backend App"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.13.0" ]
        operating-system: [ "ubuntu-latest" ]

    outputs:
      version: ${{ steps.extract-version.outputs.version }}

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Pull Updated Branch"
        run: git pull origin ${{ github.ref_name }}

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Build App"
        run: "pnpm --filter @fastybird/smart-panel-backend build"

      - name: "Publish To NPM"
        uses: "./.github/actions/publish-npm-package"
        with:
          package-path: "apps/backend"
          tag: "latest"
          npm-auth-token: ${{ secrets.NPM_REGISTRY_TOKEN }}

      - name: "Extract Published Version"
        id: "extract-version"
        working-directory: "apps/backend"
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
        shell: bash

      - name: "Publish To GitHub NPM"
        uses: "./.github/actions/publish-npm-package"
        with:
          package-path: "apps/backend"
          tag: "latest"
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}
          npm-registry-url: "https://npm.pkg.github.com"
          npm-registry: "npm.pkg.github.com"

  publish-admin:
    needs: [ "tag", "sync-versions", "changelog" ]
    name: "Publish Release Admin App"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        node-version: [ "22" ]
        pnpm-version: [ "10.13.0" ]
        operating-system: [ "ubuntu-latest" ]

    outputs:
      version: ${{ steps.extract-version.outputs.version }}

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Pull Updated Branch"
        run: git pull origin ${{ github.ref_name }}

      - name: "Setup Node Project"
        uses: "./.github/actions/setup-node-project"
        with:
          node-version: "${{ matrix.node-version }}"
          pnpm-version: "${{ matrix.pnpm-version }}"

      - name: "Build App"
        run: "pnpm --filter @fastybird/smart-panel-admin build"

      - name: "Publish To NPM"
        id: "publish-npm"
        uses: "./.github/actions/publish-npm-package"
        with:
          package-path: "apps/admin"
          tag: "latest"
          npm-auth-token: ${{ secrets.NPM_REGISTRY_TOKEN }}

      - name: "Extract Published Version"
        id: "extract-version"
        working-directory: "apps/admin"
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
        shell: bash

      - name: "Publish To GitHub NPM"
        uses: "./.github/actions/publish-npm-package"
        with:
          package-path: "apps/admin"
          tag: "latest"
          npm-auth-token: ${{ secrets.GITHUB_TOKEN }}
          npm-registry-url: "https://npm.pkg.github.com"
          npm-registry: "npm.pkg.github.com"

  build-flutter:
    needs: [ "tag", "sync-versions", "changelog" ]
    name: "Build Flutter Display App"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        flutter-version: [ "3.27.0" ]
        flutter-channel: [ "stable" ]
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Pull Updated Branch"
        run: git pull origin ${{ github.ref_name }}

      - name: "Setup Flutter"
        uses: "./.github/actions/setup-flutter-project"
        with:
          flutter-version: "${{ matrix.flutter-version }}"
          flutter-channel: "${{ matrix.flutter-channel }}"

      - name: "Build Flutter Bundle"
        working-directory: "./apps/panel"
        run: "flutter build bundle"

      - name: "Archive Flutter Assets"
        run: |
          tar -czvf smart-panel-display-${{ needs.sync-versions.outputs.version }}.tar.gz -C ./apps/panel/build/flutter_assets .
          shasum -a 256 smart-panel-display-${{ needs.sync-versions.outputs.version }}.tar.gz > SHASUMS256.txt

      - name: "Upload Artifact"
        uses: "actions/upload-artifact@v4"
        with:
          name: "flutter-assets"
          path: |
            smart-panel-display-${{ needs.sync-versions.outputs.version }}.tar.gz
            SHASUMS256.txt

  attach-artifacts:
    needs: ["tag", "publish-backend", "publish-admin", "build-flutter"]
    name: "Attach Artifacts ${{ needs.tag.outputs.version }}"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Pull Updated Branch"
        run: git pull origin ${{ github.ref_name }}

      - name: "Download Flutter Assets"
        uses: "actions/download-artifact@v4"
        with:
          name: "flutter-assets"

      - name: "Attach Flutter Assets"
        uses: "AButler/upload-release-assets@v3.0"
        with:
          files: "smart-panel-display-${{ needs.tag.outputs.version }}.tar.gz;SHASUMS256.txt"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: v${{ needs.tag.outputs.version }}

  release-to-discord:
    needs: "attach-artifacts"
    name: "Discord Webhooks"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        operating-system: [ "ubuntu-latest" ]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Pull Updated Branch"
        run: git pull origin ${{ github.ref_name }}

      - name: "Send Discord Notification"
        uses: "./.github/actions/send-discord-notification"
        with:
          title: "FastyBird Smart Panel Release"
          description: "Version v${{ needs.sync-versions.outputs.version }}"
          url: "https://github.com/fastybird/smart-panel/releases/tag/v${{ needs.sync-versions.outputs.version }}"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
