/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/auth-module/auth/register': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Register a new user
		 * @description Endpoint to register a new user by providing username, password, and optional profile information.
		 */
		post: operations['create-auth-module-register'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth-module/auth/register-display': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Register a display-only user
		 * @description Endpoint to register a user with limited permissions, designed for display-only functionalities.
		 */
		post: operations['create-auth-module-register-display'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth-module/auth/login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * User login
		 * @description Endpoint for user login, requiring username and password to generate an authentication token.
		 */
		post: operations['create-auth-module-login'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth-module/auth/check/username': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Check username availability
		 * @description Endpoint to check whether a given username is already in use in the system.
		 */
		post: operations['validate-auth-module-check-username'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth-module/auth/check/email': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Check email availability
		 * @description Endpoint to check whether a given email address is already in use in the system.
		 */
		post: operations['validate-auth-module-check-email'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth-module/auth/profile': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve authenticated user's profile
		 * @description Endpoint to retrieve the profile information of the authenticated user, including username, email, and role.
		 */
		get: operations['get-auth-module-profile'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/auth-module/auth/refresh': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Refresh user access token
		 * @description Endpoint for user access token refresh, requiring refresh token to generate an authentication token.
		 */
		post: operations['update-auth-module-refresh'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/users-module/users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve a list of users
		 * @description Fetch a paginated list of users, including details such as usernames, emails, and roles.
		 */
		get: operations['get-users-module-users'];
		put?: never;
		/**
		 * Create a new user
		 * @description Register a new user by providing necessary details such as username, password, and optional profile information.
		 */
		post: operations['create-users-module-user'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/users-module/users/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific user
		 * @description Fetch detailed information about a specific user, including their profile, role, and associated data.
		 */
		get: operations['get-users-module-user'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing user
		 * @description Remove a user from the system. This action is irreversible.
		 */
		delete: operations['delete-users-module-user'];
		options?: never;
		head?: never;
		/**
		 * Update an existing user
		 * @description Modify user details such as email, role, or profile information. Partial updates are supported.
		 */
		patch: operations['update-users-module-user'];
		trace?: never;
	};
	'/devices-module/devices': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve a list of available devices
		 * @description Fetches a list of all devices currently registered in the system. Each device includes its metadata (e.g., ID, name, and category), along with associated channels, controls, and properties.
		 */
		get: operations['get-devices-module-devices'];
		put?: never;
		/**
		 * Create a new device
		 * @description Creates a new device resource in the system. The request requires device-specific attributes such as category and name. The response includes the full representation of the created device, including its associated channels, controls, and properties. Additionally, a Location header is provided with the URI of the newly created resource.
		 */
		post: operations['create-devices-module-device'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific device
		 * @description Fetches the details of a specific device using its unique ID. The response includes the device’s metadata (e.g., ID, name, and category), associated channels, controls, and properties.
		 */
		get: operations['get-devices-module-device'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing device
		 * @description Deletes a specific device identified by its unique ID from the system. This action is irreversible and will remove the device and its associated data from the system.
		 */
		delete: operations['delete-devices-module-device'];
		options?: never;
		head?: never;
		/**
		 * Update an existing device
		 * @description Partially updates the attributes of an existing device identified by its unique ID. The update can modify metadata, such as the device’s name, category, or description, without requiring the full object.
		 */
		patch: operations['update-devices-module-device'];
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/controls': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available device controls
		 * @description Fetches a list of controls associated with a specific device. Controls represent actions that can be performed on the device, such as reboot or calibration.
		 */
		get: operations['get-devices-module-device-controls'];
		put?: never;
		/**
		 * Create a new control for a device
		 * @description Creates a new control associated with a specific device. Controls represent actions or commands that can be executed on the device, such as reboot or factory reset.
		 */
		post: operations['create-devices-module-device-control'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/controls/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific control for a device
		 * @description Fetches detailed information about a specific control associated with a device using its unique ID. The response includes metadata such as the control’s name, ID, associated device, and timestamps.
		 */
		get: operations['get-devices-module-device-control'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing control for a device
		 * @description Deletes a specific control associated with a device using its unique ID. This action is irreversible and removes the control from the system.
		 */
		delete: operations['delete-devices-module-device-control'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/channels': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available channels for a device
		 * @description Fetches a list of channels associated with a specific device. Each channel includes metadata (e.g., ID, name, category), associated controls, and properties.
		 */
		get: operations['get-devices-module-device-channels'];
		put?: never;
		/**
		 * Create a new channel for a device
		 * @description Creates a new channel associated with a specific device. The channel can have attributes such as name, category, description, and optionally controls and properties.
		 */
		post: operations['create-devices-module-device-channel'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/channels/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific channel for a device
		 * @description Fetches detailed information about a specific channel associated with a device using its unique ID. The response includes metadata, category, associated controls, and properties for the channel.
		 */
		get: operations['get-devices-module-device-channel'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific channel for a device
		 * @description Deletes a specific channel associated with a device using its unique ID. This action is irreversible and will remove the channel and its associated data from the system.
		 */
		delete: operations['delete-devices-module-device-channel'];
		options?: never;
		head?: never;
		/**
		 * Update an existing channel for a device
		 * @description Partially updates the attributes of a specific channel associated with a device using its unique ID. The update can modify metadata, such as the channel’s name, category, or description, without requiring the full object.
		 */
		patch: operations['update-devices-module-device-channel'];
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/channels/{channelId}/controls': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available controls for a device’s channel
		 * @description Fetches a list of controls associated with a specific channel of a device. Controls represent actions or commands that can be executed on the channel, such as reset or calibration.
		 */
		get: operations['get-devices-module-device-channel-controls'];
		put?: never;
		/**
		 * Create a new control for a specific device’s channel
		 * @description Creates a new control associated with a specific device channel. Controls represent actions or commands that can be executed on the channel, such as reset or calibration.
		 */
		post: operations['create-devices-module-device-channel-control'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/channels/{channelId}/controls/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific control for a device’s channel
		 * @description Fetches detailed information about a specific control associated with a device channel using its unique ID. The response includes metadata such as the control’s name, ID, associated channel, and timestamps.
		 */
		get: operations['get-devices-module-device-channel-control'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific control from a device’s channel
		 * @description Deletes a specific control associated with a device channel using its unique ID. This action is irreversible and removes the control from the system.
		 */
		delete: operations['delete-devices-module-device-channel-control'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/channels/{channelId}/properties': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available properties for a device’s channel
		 * @description Fetches a list of properties associated with a specific channel of a device. Properties represent attributes or measurements related to the channel, such as thermostat mode, temperature, or humidity.
		 */
		get: operations['get-devices-module-device-channel-properties'];
		put?: never;
		/**
		 * Create a new property for a specific device’s channel
		 * @description Creates a new property for a specific device channel. The property can include metadata such as category, permissions, data type, unit, and initial value. The response contains the full representation of the created property, including its unique identifier, associated channel, and metadata.
		 */
		post: operations['create-devices-module-device-channel-property'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/devices/{deviceId}/channels/{channelId}/properties/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific property for a device’s channel
		 * @description Fetches detailed information about a specific property associated with a device channel using its unique ID. The response includes metadata such as the property’s name, category, value, and associated channel.
		 */
		get: operations['get-devices-module-device-channel-property'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific property from a device’s channel.
		 * @description Deletes a specific property associated with a device channel using its unique ID. This operation is irreversible and removes the property from the system.
		 */
		delete: operations['delete-devices-module-device-channel-property'];
		options?: never;
		head?: never;
		/**
		 * Update and existing property for a specific device’s channel
		 * @description Partially updates the details of a specific property associated with a device channel. This operation allows modifications to attributes such as the property’s name, value, or metadata, while preserving its unique identifier and association with the channel.
		 */
		patch: operations['update-devices-module-device-channel-property'];
		trace?: never;
	};
	'/devices-module/channels': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve a list of available channels
		 * @description Fetches a list of channels in the system. The response includes metadata for each channel, such as its ID, name, category, associated device, controls, and properties.
		 */
		get: operations['get-devices-module-channels'];
		put?: never;
		/**
		 * Create a new channel
		 * @description Creates a new channel in the system. The channel can have attributes such as name, category, description, and an associated device. Optionally, controls and properties can also be defined during creation.
		 */
		post: operations['create-devices-module-channel'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/channels/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific channel
		 * @description Fetches detailed information about a specific channel using its unique ID. The response includes metadata, associated device information, controls, and properties for the channel.
		 */
		get: operations['get-devices-module-channel'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing channel
		 * @description Deletes a specific channel using its unique ID. This action is irreversible and removes the channel and all associated data from the system.
		 */
		delete: operations['delete-devices-module-channel'];
		options?: never;
		head?: never;
		/**
		 * Update an existing channel
		 * @description Partially updates the attributes of a specific channel using its unique ID. This allows modifications to properties such as the channel’s name, category, description, or associated controls and properties.
		 */
		patch: operations['update-devices-module-channel'];
		trace?: never;
	};
	'/devices-module/channels/{channelId}/controls': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available channel controls
		 * @description Fetches a list of all controls available for channels in the system. Each control represents an actionable operation associated with a channel. The response includes details such as the control’s ID, name, associated channel, and timestamps.
		 */
		get: operations['get-devices-module-channel-controls'];
		put?: never;
		/**
		 * Create a new control for a channel
		 * @description Allows the creation of a new control for a specific channel. A control represents an actionable operation or command associated with the channel. The response includes the complete details of the newly created control, including its ID, name, associated channel, and metadata.
		 */
		post: operations['create-devices-module-channel-control'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/channels/{channelId}/controls/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific control for a channel
		 * @description Fetches the details of a specific control associated with a channel. The response includes the control’s unique identifier, name, associated channel, and metadata such as creation and update timestamps.
		 */
		get: operations['get-devices-module-channel-control'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing control for a channel
		 * @description Deletes an existing control associated with a specific channel. This operation is irreversible and will remove the control permanently from the system.
		 */
		delete: operations['delete-devices-module-channel-control'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/channels/{channelId}/properties': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available channel properties
		 * @description Fetches all properties associated with a specific channel. The response includes metadata for each property, such as category, name, permissions, data type, unit, and current value, along with the associated channel’s unique identifier.
		 */
		get: operations['get-devices-module-channel-properties'];
		put?: never;
		/**
		 * Create a new property for a channel
		 * @description Creates a new property for a channel, such as thermostat mode or brightness level. The property includes metadata like category, permissions, data type, unit, and initial value. The response provides the full representation of the created property along with a Location header containing the URI for the new property resource.
		 */
		post: operations['create-devices-module-channel-property'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/devices-module/channels/{channelId}/properties/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific property for a channel
		 * @description Fetches detailed information about a specific property associated with a channel. The response includes metadata such as the property’s unique ID, category, permissions, data type, unit, and current value, along with timestamps and the associated channel’s identifier.
		 */
		get: operations['get-devices-module-channel-property'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing property for a channel
		 * @description Deletes an existing property associated with a channel. This operation is irreversible and permanently removes the property from the system.
		 */
		delete: operations['delete-devices-module-channel-property'];
		options?: never;
		head?: never;
		/**
		 * Update an existing property for a channel
		 * @description Allows partial updates to an existing property associated with a channel. You can update specific attributes such as the name, category, permissions, data type, unit, or current value. The response includes the updated representation of the property.
		 */
		patch: operations['update-devices-module-channel-property'];
		trace?: never;
	};
	'/dashboard-module/pages': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve a list of available pages
		 * @description Fetches a list of all pages currently registered in the system. Each pages includes its metadata (e.g., ID, title), along with associated tiles and data sources.
		 */
		get: operations['get-dashboard-module-pages'];
		put?: never;
		/**
		 * Create a new page
		 * @description Creates a new page resource in the system. The request requires page-specific attributes such as title. The response includes the full representation of the created page, including its associated tiles and data sources. Additionally, a Location header is provided with the URI of the newly created resource.
		 */
		post: operations['create-dashboard-module-page'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific page
		 * @description Fetches the details of a specific page using its unique ID. The response includes the page’s metadata (e.g., ID and title), associated tiles and data sources.
		 */
		get: operations['get-dashboard-module-page'];
		put?: never;
		post?: never;
		/**
		 * Delete an existing page
		 * @description Deletes a specific page identified by its unique ID from the system. This action is irreversible and will remove the page and its associated data from the system.
		 */
		delete: operations['delete-dashboard-module-page'];
		options?: never;
		head?: never;
		/**
		 * Update an existing page
		 * @description Partially updates the attributes of an existing page identified by its unique ID. The update can modify metadata, such as the page’s title, without requiring the full object.
		 */
		patch: operations['patch-dashboard-module-page'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available data sources for a page
		 * @description Fetches a list of data sources associated with a specific page. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.
		 */
		get: operations['get-dashboard-module-page-data-sources'];
		put?: never;
		/**
		 * Create a new data source for a specific page
		 * @description Creates a new data source for a specific page. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.
		 */
		post: operations['create-dashboard-module-page-data-source'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/data-source/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific data source for a page
		 * @description Fetches detailed information about a specific data source associated with a page using its unique ID. The response includes metadata such as the data source’s associated device, channel, value, and associated tile.
		 */
		get: operations['get-dashboard-module-page-data-source'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific data source from a page
		 * @description Deletes a specific data source associated with a page using its unique ID. This operation is irreversible and removes the property from the system.
		 */
		delete: operations['delete-dashboard-module-page-data-source'];
		options?: never;
		head?: never;
		/**
		 * Update and existing data source for a specific page
		 * @description Partially updates the details of a specific data source associated with a page. This operation allows modifications to attributes such as the data source’s associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.
		 */
		patch: operations['update-dashboard-module-page-data-source'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/tiles': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available page tiles
		 * @description Fetches a list of tiles associated with a specific page. Tiles represent widgets that can be used for displaying data, such as device state, actual clock.
		 */
		get: operations['get-dashboard-module-page-tiles'];
		put?: never;
		/**
		 * Create a new tile for a page
		 * @description Creates a new tile associated with a specific page. Tiles represent widgets that can display device state or actual clock.
		 */
		post: operations['create-dashboard-module-page-tile'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/tiles/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific tile for a page
		 * @description Fetches detailed information about a specific tile associated with a page using its unique ID. The response includes metadata such as the tiles’s position, ID, associated page, and timestamps.
		 */
		get: operations['get-dashboard-module-page-tile'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific tile for a page
		 * @description Deletes a specific tile associated with a page using its unique ID. This action is irreversible and will remove the tile and its associated data from the system.
		 */
		delete: operations['delete-dashboard-module-page-tile'];
		options?: never;
		head?: never;
		/**
		 * Update an existing tile for a page
		 * @description Partially updates the attributes of a specific tile associated with a page using its unique ID. The update can modify metadata, such as the tile’s position or size, without requiring the full object.
		 */
		patch: operations['update-dashboard-module-page-tile'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/tiles/{tileId}/data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available data sources for a page’s tile
		 * @description Fetches a list of data sources associated with a specific tile of a page. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.
		 */
		get: operations['get-dashboard-module-page-tile-data-sources'];
		put?: never;
		/**
		 * Create a new data source for a specific page’s tile
		 * @description Creates a new data source for a specific page tile. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.
		 */
		post: operations['create-dashboard-module-page-tile-data-source'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/tiles/{tileId}/data-source/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific data source for a page’s tile
		 * @description Fetches detailed information about a specific data source associated with a page tile using its unique ID. The response includes metadata such as the data source’s associated device, channel, value, and associated tile.
		 */
		get: operations['get-dashboard-module-page-tile-data-source'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific data source from a page’s tile.
		 * @description Deletes a specific data source associated with a page tile using its unique ID. This operation is irreversible and removes the property from the system.
		 */
		delete: operations['delete-dashboard-module-page-tile-data-source'];
		options?: never;
		head?: never;
		/**
		 * Update and existing data source for a specific page’s tile
		 * @description Partially updates the details of a specific data source associated with a page tile. This operation allows modifications to attributes such as the data source’s associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.
		 */
		patch: operations['update-dashboard-module-page-tile-data-source'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available page cards
		 * @description Fetches a list of cards associated with a specific page. Cards represent widgets that can be used for displaying data, such as device state, actual clock.
		 */
		get: operations['get-dashboard-module-page-cards'];
		put?: never;
		/**
		 * Create a new card for a page
		 * @description Creates a new card associated with a specific page. Cards represent widgets that can display device state or actual clock.
		 */
		post: operations['create-dashboard-module-page-card'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific card for a page
		 * @description Fetches detailed information about a specific card associated with a page using its unique ID. The response includes metadata such as the card’s position, ID, associated page, and tiles.
		 */
		get: operations['get-dashboard-module-page-card'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific card for a page
		 * @description Deletes a specific card associated with a page using its unique ID. This action is irreversible and will remove the card and its associated data from the system.
		 */
		delete: operations['delete-dashboard-module-page-card'];
		options?: never;
		head?: never;
		/**
		 * Update an existing card for a page
		 * @description Partially updates the attributes of a specific card associated with a page using its unique ID. The update can modify metadata, such as the card’s position or title, without requiring the full object.
		 */
		patch: operations['update-dashboard-module-page-card'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{cardId}/tiles': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available card tiles
		 * @description Fetches a list of tiles associated with a specific card. Tiles represent widgets that can be used for displaying data, such as device state, actual clock.
		 */
		get: operations['get-dashboard-module-page-card-tiles'];
		put?: never;
		/**
		 * Create a new tile for a card
		 * @description Creates a new tile associated with a specific card. Tiles represent widgets that can display device state or actual clock.
		 */
		post: operations['create-dashboard-module-page-card-tile'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{cardId}/tiles/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific tile for a card
		 * @description Fetches detailed information about a specific tile associated with a card using its unique ID. The response includes metadata such as the tiles’s position, ID, associated page, and timestamps.
		 */
		get: operations['get-dashboard-module-page-card-tile'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific tile for a card
		 * @description Deletes a specific tile associated with a card using its unique ID. This action is irreversible and will remove the tile and its associated data from the system.
		 */
		delete: operations['delete-dashboard-module-page-card-tile'];
		options?: never;
		head?: never;
		/**
		 * Update an existing tile for a card
		 * @description Partially updates the attributes of a specific tile associated with a card using its unique ID. The update can modify metadata, such as the tile’s position or size, without requiring the full object.
		 */
		patch: operations['update-dashboard-module-page-card-tile'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{cardId}/tiles/{tileId}/data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available data sources for a card’s tile
		 * @description Fetches a list of data sources associated with a specific tile of a card. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.
		 */
		get: operations['get-dashboard-module-page-car-tile-data-sources'];
		put?: never;
		/**
		 * Create a new data source for a specific card’s tile
		 * @description Creates a new data source for a specific card tile. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.
		 */
		post: operations['create-dashboard-module-page-card-tile-data-source'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{cardId}/tiles/{tileId}/data-source/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific data source for a card’s tile
		 * @description Fetches detailed information about a specific data source associated with a card tile using its unique ID. The response includes metadata such as the data source’s associated device, channel, value, and associated tile.
		 */
		get: operations['get-dashboard-module-page-card-tile-data-source'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific data source from a card’s tile
		 * @description Deletes a specific data source associated with a card tile using its unique ID. This operation is irreversible and removes the property from the system.
		 */
		delete: operations['delete-dashboard-module-page-card-tile-data-source'];
		options?: never;
		head?: never;
		/**
		 * Update and existing data source for a specific card’s tile
		 * @description Partially updates the details of a specific data source associated with a card tile. This operation allows modifications to attributes such as the data source’s associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.
		 */
		patch: operations['update-dashboard-module-page-card-tile-data-source'];
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{cardId}/data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve a list of all available data sources for a card
		 * @description Fetches a list of data sources associated with a specific card. Data sources represent attributes or measurements related to the card, such as device state, weather location, or timezone.
		 */
		get: operations['get-dashboard-module-page-car-data-sources'];
		put?: never;
		/**
		 * Create a new data source for a specific card
		 * @description Creates a new data source for a specific card. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.
		 */
		post: operations['create-dashboard-module-page-card-data-source'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dashboard-module/pages/{pageId}/cards/{cardId}/data-source/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		/**
		 * Retrieve details of a specific data source for a card
		 * @description Fetches detailed information about a specific data source associated with a card using its unique ID. The response includes metadata such as the data source’s associated device, channel, value, and associated tile.
		 */
		get: operations['get-dashboard-module-page-card-data-source'];
		put?: never;
		post?: never;
		/**
		 * Delete a specific data source from a card
		 * @description Deletes a specific data source associated with a card using its unique ID. This operation is irreversible and removes the property from the system.
		 */
		delete: operations['delete-dashboard-module-page-card-data-source'];
		options?: never;
		head?: never;
		/**
		 * Update and existing data source for a specific card
		 * @description Partially updates the details of a specific data source associated with a card. This operation allows modifications to attributes such as the data source’s associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.
		 */
		patch: operations['update-dashboard-module-page-card-data-source'];
		trace?: never;
	};
	'/config-module/config': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve full configuration
		 * @description Retrieves the complete smart panel configuration, including audio, display, language, and weather settings.
		 */
		get: operations['get-config-module-config'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/config-module/config/{section}': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The configuration section name. */
				section: 'audio' | 'display' | 'language' | 'weather';
			};
			cookie?: never;
		};
		/**
		 * Retrieve specific configuration section
		 * @description Retrieves a specific configuration section, such as audio, display, language, or weather.
		 */
		get: operations['get-config-module-config-section'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Update specific configuration section
		 * @description Updates a specific configuration section, such as audio, display, language, or weather. Only the provided fields will be modified.
		 */
		patch: operations['update-config-module-config-section'];
		trace?: never;
	};
	'/system-module/system/info': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve system information
		 * @description Fetches detailed system information, including CPU load, memory usage, storage details, temperature readings, OS version, network statistics, and display settings.
		 */
		get: operations['get-system-module-system-info'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/system-module/system/throttle': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve system throttling status
		 * @description Checks the system’s throttling status to determine if any CPU, power, or thermal restrictions have been applied.
		 */
		get: operations['get-system-module-system-throttle'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/weather-module/weather': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Retrieve current weather conditions
		 * @description Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details for a specified location.
		 */
		get: operations['get-weather-module-weather'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/weather-module/geolocation/city-to-coordinates': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Convert city name to geographical coordinates
		 * @description Retrieves latitude and longitude based on a given city name. Useful for mapping and location-based services.
		 */
		get: operations['get-weather-module-geolocation'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/weather-module/geolocation/coordinates-to-city': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Convert coordinates to city name
		 * @description Returns the city name based on provided latitude and longitude values. Useful for reverse geocoding applications.
		 */
		get: operations['get-weather-module-geolocation-coordinates-to-city'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/third-party/webhook': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Send command to third-party device
		 * @description This endpoint is used to send property update commands to a third-party device. The backend calls this webhook with one or more property updates. The third-party device should process the updates and return a status response.
		 *
		 *     **The actual webhook path must be defined on the third-party device level**, and the backend must be configured accordingly to call the correct endpoint.
		 */
		put: operations['put-third-party-webhook'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/**
		 * Device
		 * @description Represents the core attributes of a device, including its unique identifier, name, and category. This model forms the foundation for more detailed device representations, such as those including related entities (e.g., channels, properties, or controls).
		 */
		DevicesDeviceBase: {
			/**
			 * Format: uuid
			 * @description System-generated unique identifier for the device.
			 * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
			 */
			readonly id: string;
			/** @description Type of the device, defining its purpose or category (e.g., thermostat, lighting). */
			readonly category: components['schemas']['DevicesDeviceCategory'];
			/**
			 * @description Human-readable name of the device.
			 * @example Thermostat
			 */
			name: string;
			/**
			 * @description Optional detailed description of the device.
			 * @default null
			 * @example Living room thermostat
			 */
			description: string | null;
			/**
			 * Format: date-time
			 * @description Timestamp indicating when the device was created.
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description Timestamp indicating when the device was last updated, if applicable.
			 * @default null
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Third-Party Device
		 * @description The ThirdPartyDevice model represents a software-based or non-physical device that is capable of being controlled or monitored. Unlike physical devices, a ThirdPartyDevice interacts with external systems through a service_address. This address allows for integration with third-party APIs or services, enabling remote control and monitoring capabilities.
		 */
		DevicesThirdPartyDevice: components['schemas']['DevicesDeviceBase'] & {
			/**
			 * @default third-party
			 * @example third-party
			 * @constant
			 */
			readonly type: 'third-party';
			/**
			 * @description The address of the third-party service used by the third-party device. It can be a URL or IP address with an optional port.
			 * @example http://192.168.1.100/webhook
			 */
			service_address: string;
		};
		/**
		 * Create Device
		 * @description Schema for creating a new device. This includes essential attributes like type, category, and name, along with optional details such as a description.
		 */
		DevicesCreateDeviceBase: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the device. Optional during creation and system-generated if not provided.
			 * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
			 */
			id?: string;
			/**
			 * @description The type of the device. Indicates its nature, such as a third-party device or a specific module type.
			 * @example third-party
			 */
			type: string;
			/** @description Type of the device, defining its purpose or category (e.g., thermostat, lighting). */
			category: components['schemas']['DevicesDeviceCategory'];
			/**
			 * @description Human-readable name of the device.
			 * @example Thermostat
			 */
			name: string;
			/**
			 * @description Optional detailed description of the device.
			 * @example Living room thermostat
			 */
			description?: string | null;
		};
		/**
		 * Create Third-Party Device
		 * @description Schema for creating a third-party device, including its type, category, and a third-party service address.
		 */
		DevicesCreateThirdPartyDevice: components['schemas']['DevicesCreateDeviceBase'] & {
			/**
			 * @default third-party
			 * @example third-party
			 * @constant
			 */
			type: 'third-party';
			/**
			 * @description The address of the third-party service used by the third-party device. It can be a URL or IP address with an optional port.
			 * @example http://192.168.1.100/webhook
			 */
			service_address: string;
		};
		/**
		 * Create Device Control
		 * @description Schema for creating a new device control, which represents an action the device can perform.
		 */
		DevicesCreateDeviceControl: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the control. Optional during creation and system-generated if not provided.
			 * @example 227349b1-a2a7-439a-b296-59f002faa8ce
			 */
			id?: string;
			/**
			 * @description The name of the control, representing the action it performs.
			 * @example reboot
			 */
			name: string;
		};
		/**
		 * Create Channel
		 * @description Schema for creating a new channel, representing a functional category of a device such as temperature, light, or motion.
		 */
		DevicesCreateChannel: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the channel. Optional during creation and system-generated if not provided.
			 * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
			 */
			id?: string;
			/** @description Type of the channel, indicating its functional category (e.g., temperature, light). */
			category: components['schemas']['DevicesChannelCategory'];
			/**
			 * @description Human-readable name of the channel.
			 * @example Temperature Sensor
			 */
			name: string;
			/**
			 * @description Optional description of the channel’s purpose or functionality.
			 * @example Living room temperature sensor
			 */
			description?: string | null;
		};
		/**
		 * Create Channel Control
		 * @description Schema for creating a new control within a channel, representing a specific action or command that can be performed.
		 */
		DevicesCreateChannelControl: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the control. Optional during creation and system-generated if not provided.
			 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
			 */
			id?: string;
			/**
			 * @description The name of the control, representing the action it performs.
			 * @example reset
			 */
			name: string;
		};
		/**
		 * Create Channel Property
		 * @description Schema for creating a new property within a channel, representing a specific characteristic or functional value.
		 */
		DevicesCreateChannelProperty: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the property. Optional during creation and system-generated if not provided.
			 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
			 */
			id?: string;
			/** @description Defines the category of the property, representing its functionality or characteristic. */
			category: components['schemas']['DevicesChannelPropertyCategory'];
			/**
			 * @description Optional name of the property for easier identification.
			 * @example Thermostat mode
			 */
			name?: string | null;
			/** @description Access level for the property: read-only (ro), read-write (rw), write-only (wo), or event-only (ev). */
			permission: ('ro' | 'rw' | 'wo' | 'ev')[];
			/**
			 * @description Data type of the property’s value, e.g., string, integer, or boolean.
			 * @enum {unknown}
			 */
			data_type:
				| 'char'
				| 'uchar'
				| 'short'
				| 'ushort'
				| 'int'
				| 'uint'
				| 'float'
				| 'bool'
				| 'string'
				| 'enum'
				| 'unknown';
			/**
			 * @description Measurement unit associated with the property’s value, if applicable.
			 * @example °C
			 */
			unit?: string | null;
			/**
			 * @description List of valid values or states for the property, where applicable.
			 * @example [
			 *       "heat",
			 *       "auto"
			 *     ]
			 */
			format?: (string | number)[] | null;
			/**
			 * @description Value to represent an invalid state for the property.
			 * @example -999
			 */
			invalid?: ((number | null) | (string | null) | (boolean | null) | null) | null;
			/**
			 * @description Step value indicating the smallest increment for the property.
			 * @example 0.5
			 */
			step?: number | null;
			/**
			 * @description Current value of the property.
			 * @example 22.1
			 */
			value?: ((number | null) | (string | null) | (boolean | null) | null) | null;
		};
		/**
		 * Update Device
		 * @description Schema for updating basic details of a device, including its name and description.
		 */
		DevicesUpdateDeviceBase: {
			/**
			 * @description Human-readable name of the device.
			 * @example Thermostat
			 */
			name?: string;
			/**
			 * @description Optional detailed description of the device.
			 * @example Living room thermostat
			 */
			description?: string | null;
		};
		/**
		 * Update Third-Party Device
		 * @description Schema for updating a third-party device, including its basic details and the service address it connects to.
		 */
		DevicesUpdateThirdPartyDevice: components['schemas']['DevicesUpdateDeviceBase'] & {
			/**
			 * @description The address of the third-party service used by the third-party device. It can be a URL or IP address with an optional port.
			 * @example http://192.168.1.100/webhook
			 */
			service_address?: string;
		};
		/**
		 * Update Channel
		 * @description Schema for updating a channel, including optional updates to its name and description.
		 */
		DevicesUpdateChannel: {
			/**
			 * @description Human-readable name of the channel.
			 * @example Temperature Sensor
			 */
			name?: string;
			/**
			 * @description Optional description of the channel’s purpose or functionality.
			 * @example Living room temperature sensor
			 */
			description?: string | null;
		};
		/**
		 * Update Channel Property
		 * @description Schema for updating a channel property, allowing updates to its name, unit, format, invalid state, step, and value.
		 */
		DevicesUpdateChannelProperty: {
			/**
			 * @description Optional name of the property for easier identification.
			 * @example Thermostat mode
			 */
			name?: string | null;
			/**
			 * @description Measurement unit associated with the property’s value, if applicable.
			 * @example °C
			 */
			unit?: string | null;
			/**
			 * @description List of valid values or states for the property, where applicable.
			 * @example [
			 *       "heat",
			 *       "auto"
			 *     ]
			 */
			format?: (string | number)[] | null;
			/**
			 * @description Value to represent an invalid state for the property.
			 * @example -999
			 */
			invalid?: ((number | null) | (string | null) | (boolean | null) | null) | null;
			/**
			 * @description Step value indicating the smallest increment for the property.
			 * @example 0.5
			 */
			step?: number | null;
			/**
			 * @description Current value of the property.
			 * @example 22.1
			 */
			value?: ((number | null) | (string | null) | (boolean | null) | null) | null;
		};
		/**
		 * Device
		 * @description Represents a physical or third-party device that can be controlled or monitored. Devices have associated channels and controls, defining their capabilities and properties.
		 */
		DevicesDevice: components['schemas']['DevicesThirdPartyDevice'] & {
			/**
			 * @description Type of the device, such as 'third-party', ’shelly', or 'matter'.
			 * @default third-party
			 * @example third-party
			 * @constant
			 */
			readonly type: 'third-party';
			controls: components['schemas']['DevicesDeviceControl'][];
			channels: components['schemas']['DevicesChannel'][];
		};
		/**
		 * Device Control
		 * @description A Device control is an action that can be executed at the device level. It provides operational commands like restarting a device or updating its firmware.
		 */
		DevicesDeviceControl: {
			/**
			 * Format: uuid
			 * @description System-generated unique identifier for the control.
			 * @example 227349b1-a2a7-439a-b296-59f002faa8ce
			 */
			readonly id: string;
			/**
			 * @description The name of the control, representing the action it performs.
			 * @example reboot
			 */
			name: string;
			/**
			 * Format: uuid
			 * @description The device to which this control belongs.
			 * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
			 */
			readonly device: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the control was created.
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the control was last updated, if applicable.
			 * @default null
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Channel
		 * @description Defines a functional unit of a device, such as a sensor, actuator, or informational component. Channels group related properties and controls for modular device functionality.
		 */
		DevicesChannel: {
			/**
			 * Format: uuid
			 * @description System-generated unique identifier for the channel.
			 * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
			 */
			readonly id: string;
			/** @description Type of the channel, indicating its functional category (e.g., temperature, light). */
			category: components['schemas']['DevicesChannelCategory'];
			/**
			 * @description Human-readable name of the channel.
			 * @example Temperature Sensor
			 */
			name: string;
			/**
			 * @description Optional description of the channel’s purpose or functionality.
			 * @default null
			 * @example Living room temperature sensor
			 */
			description: string | null;
			/**
			 * Format: uuid
			 * @description The parent device to which this channel belongs.
			 * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
			 */
			readonly device: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the channel was created.
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the channel was last updated, if applicable.
			 * @default null
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly updated_at: string | null;
			controls: components['schemas']['DevicesChannelControl'][];
			properties: components['schemas']['DevicesChannelProperty'][];
		};
		/**
		 * Channel Control
		 * @description A Channel control defines a specific action or command that can be executed for a channel. Examples include resetting a sensor or changing its operational mode.
		 */
		DevicesChannelControl: {
			/**
			 * Format: uuid
			 * @description System-generated unique identifier for the channel control.
			 * @example 4b76637f-a8a6-45ba-965b-4819f4b57df2
			 */
			readonly id: string;
			/**
			 * @description The name of the control, representing the action it performs.
			 * @example reset
			 */
			name: string;
			/**
			 * Format: uuid
			 * @description The channel to which this control belongs.
			 * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
			 */
			readonly channel: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the control was created.
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the control was last updated, if applicable.
			 * @default null
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Channel Property
		 * @description A Channel property describes an individual attribute or measurable value associated with a channel. This includes parameters like brightness, temperature, or energy consumption, reflecting the channel’s current state or configuration.
		 */
		DevicesChannelProperty: {
			/**
			 * Format: uuid
			 * @description System-generated unique identifier for the channel property.
			 * @example 208f4790-21b0-4927-8835-7302d883a141
			 */
			readonly id: string;
			/** @description Defines the category of the property, representing its functionality or characteristic. */
			readonly category: components['schemas']['DevicesChannelPropertyCategory'];
			/**
			 * @description Optional name of the property for easier identification.
			 * @default null
			 * @example Thermostat mode
			 */
			name: string | null;
			/**
			 * @description Access level for the property: read-only (ro), read-write (rw), write-only (wo), or event-only (ev).
			 * @example [
			 *       "ro"
			 *     ]
			 */
			readonly permission: ('ro' | 'rw' | 'wo' | 'ev')[];
			/**
			 * @description Data type of the property’s value, e.g., string, integer, or boolean.
			 * @enum {unknown}
			 */
			data_type:
				| 'char'
				| 'uchar'
				| 'short'
				| 'ushort'
				| 'int'
				| 'uint'
				| 'float'
				| 'bool'
				| 'string'
				| 'enum'
				| 'unknown';
			/**
			 * @description Measurement unit associated with the property’s value, if applicable.
			 * @default null
			 * @example °C
			 */
			unit: string | null;
			/**
			 * @description List of valid values or states for the property, where applicable.
			 * @default null
			 * @example [
			 *       "heat",
			 *       "auto"
			 *     ]
			 */
			format: (string | number)[] | null;
			/**
			 * @description Value to represent an invalid state for the property.
			 * @default null
			 * @example -999
			 */
			invalid: ((number | null) | (string | null) | (boolean | null) | null) | null;
			/**
			 * @description Step value indicating the smallest increment for the property.
			 * @default null
			 * @example 0.5
			 */
			step: number | null;
			/**
			 * @description Current value of the property.
			 * @default null
			 * @example 22.1
			 */
			value: ((number | null) | (string | null) | (boolean | null) | null) | null;
			/**
			 * Format: uuid
			 * @description Reference to the channel that this property belongs to.
			 * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
			 */
			readonly channel: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the control was created.
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description Timestamp when the control was last updated, if applicable.
			 * @default null
			 * @example 2024-12-11T12:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Device Category
		 * @description Defines the type of device, categorizing it by its primary function.
		 * @enum {unknown}
		 */
		DevicesDeviceCategory:
			| 'generic'
			| 'air_conditioner'
			| 'air_dehumidifier'
			| 'air_humidifier'
			| 'air_purifier'
			| 'alarm'
			| 'camera'
			| 'door'
			| 'doorbell'
			| 'fan'
			| 'heater'
			| 'lighting'
			| 'lock'
			| 'media'
			| 'outlet'
			| 'pump'
			| 'robot_vacuum'
			| 'sensor'
			| 'speaker'
			| 'sprinkler'
			| 'switcher'
			| 'television'
			| 'thermostat'
			| 'valve'
			| 'window_covering';
		/**
		 * Channel Category
		 * @description Represents a functional channel inside a device, responsible for a specific type of data or control.
		 * @enum {unknown}
		 */
		DevicesChannelCategory:
			| 'generic'
			| 'air_particulate'
			| 'alarm'
			| 'battery'
			| 'camera'
			| 'carbon_dioxide'
			| 'carbon_monoxide'
			| 'contact'
			| 'cooler'
			| 'device_information'
			| 'door'
			| 'doorbell'
			| 'electrical_energy'
			| 'electrical_power'
			| 'fan'
			| 'flow'
			| 'heater'
			| 'humidity'
			| 'illuminance'
			| 'leak'
			| 'light'
			| 'lock'
			| 'media_input'
			| 'media_playback'
			| 'microphone'
			| 'motion'
			| 'nitrogen_dioxide'
			| 'occupancy'
			| 'outlet'
			| 'ozone'
			| 'pressure'
			| 'robot_vacuum'
			| 'smoke'
			| 'speaker'
			| 'sulphur_dioxide'
			| 'switcher'
			| 'television'
			| 'temperature'
			| 'thermostat'
			| 'valve'
			| 'volatile_organic_compounds'
			| 'window_covering';
		/**
		 * Channel Property Category
		 * @description Defines specific properties of a device channel that can be measured, controlled, or reported.
		 * @enum {unknown}
		 */
		DevicesChannelPropertyCategory:
			| 'generic'
			| 'active'
			| 'angle'
			| 'brightness'
			| 'color_blue'
			| 'color_green'
			| 'color_red'
			| 'color_temperature'
			| 'color_white'
			| 'connection_type'
			| 'consumption'
			| 'current'
			| 'density'
			| 'detected'
			| 'direction'
			| 'distance'
			| 'duration'
			| 'event'
			| 'fault'
			| 'firmware_revision'
			| 'frequency'
			| 'hardware_revision'
			| 'hue'
			| 'humidity'
			| 'in_use'
			| 'infrared'
			| 'input_source'
			| 'level'
			| 'link_quality'
			| 'locked'
			| 'manufacturer'
			| 'measured'
			| 'model'
			| 'mode'
			| 'obstruction'
			| 'on'
			| 'over_current'
			| 'over_voltage'
			| 'pan'
			| 'peak_level'
			| 'percentage'
			| 'position'
			| 'power'
			| 'rate'
			| 'remaining'
			| 'remote_key'
			| 'saturation'
			| 'serial_number'
			| 'source'
			| 'speed'
			| 'status'
			| 'swing'
			| 'tampered'
			| 'temperature'
			| 'tilt'
			| 'track'
			| 'type'
			| 'units'
			| 'voltage'
			| 'volume'
			| 'zoom';
		/**
		 * Third-Party Device Property Update Request
		 * @description Represents a request to update properties on a third-party device.
		 */
		DevicesThirdPartyDevicePropertyUpdateRequest: {
			/** @description Represents a single property update operation for a third-party device. */
			properties: {
				/**
				 * Format: uuid
				 * @description Unique identifier of the target device.
				 * @example 234e5678-a89b-22d3-c456-426614174133
				 */
				device: string;
				/**
				 * Format: uuid
				 * @description Unique identifier of the target device channel.
				 * @example 456e7890-c89d-42d5-e678-626816194355
				 */
				channel: string;
				/**
				 * Format: uuid
				 * @description Unique identifier of the property being updated.
				 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
				 */
				property: string;
				/** @description New value to be applied to the property. */
				value: string | number | boolean;
			}[];
		};
		/**
		 * Third-Party Device Property Update Result
		 * @description Response from the third-party device after processing the update request.
		 */
		DevicesThirdPartyDevicePropertyUpdateResult: {
			/** @description List of processed properties and their update results. */
			readonly properties: {
				/**
				 * Format: uuid
				 * @description Unique identifier of the device for which the update was requested.
				 * @example 234e5678-a89b-22d3-c456-426614174133
				 */
				readonly device: string;
				/**
				 * Format: uuid
				 * @description Unique identifier of the channel that was updated.
				 * @example 456e7890-c89d-42d5-e678-626816194355
				 */
				readonly channel: string;
				/**
				 * Format: uuid
				 * @description Unique identifier of the property that was updated.
				 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
				 */
				property: string;
				/** @description Status code indicating the outcome of the update request. A value of 0 indicates success, while negative values indicate errors. */
				status: components['schemas']['DevicesThirdPartyErrorCode'];
			}[];
		};
		/**
		 * Third-Party Error Code
		 * @description Error codes returned by third-party devices when processing requests.
		 * @enum {unknown}
		 */
		DevicesThirdPartyErrorCode:
			| 0
			| -80001
			| -80002
			| -80003
			| -80004
			| -80005
			| -80006
			| -80007
			| -80008
			| -80009
			| -80010
			| -80011;
		/**
		 * Page Base
		 * @description The base schema for all dashboard pages, including common properties such as id, type, title, and timestamps.
		 */
		DashboardPageBase: {
			/**
			 * Format: uuid
			 * @description A unique identifier for the dashboard page.
			 * @example 123e4567-e89b-12d3-a456-426614174000
			 */
			readonly id: string;
			/**
			 * @description The type of the dashboard page, which determines its behavior and specific properties.
			 * @example cards
			 */
			type: string;
			/**
			 * @description The title of the dashboard page, displayed in the UI.
			 * @example Cards Dashboard
			 */
			title: string;
			/**
			 * @description The icon representing the dashboard page.
			 * @example icon-name
			 */
			icon: string | null;
			/**
			 * Format: int32
			 * @description The display order of the dashboard page in the navigation or list.
			 * @example 1
			 */
			order: number;
			/**
			 * Format: date-time
			 * @description The timestamp when the dashboard page was created.
			 * @example 2025-01-25T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description The timestamp when the dashboard page was last updated.
			 * @example 2025-01-25T13:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Cards Page
		 * @description A cards page dashboard type, displaying an overview with associated cards.
		 */
		DashboardCardsPage: components['schemas']['DashboardPageBase'] & {
			/**
			 * @description Indicates that this is a cards dashboard page.
			 * @default cards
			 * @example cards
			 * @constant
			 */
			type: 'cards';
			/** @description A list of card UUIDs associated with the cards page. */
			cards: string[];
			data_source: string[];
		} & {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: 'cards';
		};
		/**
		 * Tiles Page
		 * @description A tiles page dashboard type, displaying a grid of customizable tiles.
		 */
		DashboardTilesPage: components['schemas']['DashboardPageBase'] & {
			/**
			 * @description Indicates that this is a tiles dashboard page.
			 * @default tiles
			 * @example tiles
			 * @constant
			 */
			type: 'tiles';
			/** @description A list of tile UUIDs associated with the tiles page. */
			tiles: string[];
			data_source: string[];
		} & {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: 'tiles';
		};
		/**
		 * Device Page
		 * @description A dashboard page type associated with a specific device.
		 */
		DashboardDevicePage: components['schemas']['DashboardPageBase'] & {
			/**
			 * @description Indicates that this is a device-specific dashboard page.
			 * @default device
			 * @example device
			 * @constant
			 */
			type: 'device';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example 987e6543-a89b-22d3-c456-426614174111
			 */
			device: string;
		} & {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: 'device';
		};
		/**
		 * Tile
		 * @description The base schema for all dashboard tiles, containing common properties such as position, dimensions, and associated page and data sources.
		 */
		DashboardTileBase: {
			/**
			 * Format: uuid
			 * @description A unique identifier for the dashboard tile.
			 * @example 123e4567-e89b-12d3-a456-426614174000
			 */
			readonly id: string;
			/**
			 * @description The type of the dashboard tile.
			 * @example device
			 */
			type: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the page to which this tile belongs.
			 * @example 987e6543-a89b-22d3-c456-426614174111
			 */
			page?: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the card to which this tile belongs.
			 */
			card?: string;
			/** @description A list of data sources associated with this tile. */
			data_source: string[];
			/**
			 * Format: int32
			 * @description The row position of the tile in the grid.
			 * @example 1
			 */
			row: number;
			/**
			 * Format: int32
			 * @description The column position of the tile in the grid.
			 * @example 1
			 */
			col: number;
			/**
			 * Format: int32
			 * @description The number of rows the tile spans.
			 * @default 0
			 * @example 2
			 */
			row_span: number;
			/**
			 * Format: int32
			 * @description The number of columns the tile spans.
			 * @default 0
			 * @example 2
			 */
			col_span: number;
			/**
			 * Format: date-time
			 * @description The timestamp when the dashboard tile was created.
			 * @example 2025-01-25T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description The timestamp when the dashboard tile was last updated.
			 * @example 2025-01-25T13:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Device Tile
		 * @description A dashboard tile associated with a specific device.
		 */
		DashboardDeviceTile: components['schemas']['DashboardTileBase'] & {
			/**
			 * @description Indicates that this is a device-specific tile.
			 * @example device
			 * @constant
			 */
			type: 'device';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example 234e5678-a89b-22d3-c456-426614174133
			 */
			device: string;
			/**
			 * @description The icon representing the device tile.
			 * @example icon-name
			 */
			icon: string | null;
		} & {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: 'device';
		};
		/**
		 * Time Tile
		 * @description A dashboard tile displaying a clock.
		 */
		DashboardTimeTile: components['schemas']['DashboardTileBase'] & {
			/**
			 * @description Indicates that this is a clock tile.
			 * @example clock
			 * @constant
			 */
			type: 'clock';
		};
		/**
		 * Day Weather Tile
		 * @description A dashboard tile displaying the weather for a specific day.
		 */
		DashboardDayWeatherTile: components['schemas']['DashboardTileBase'] & {
			/**
			 * @description Indicates that this is a day weather tile.
			 * @example weather_day
			 * @constant
			 */
			type: 'weather_day';
		};
		/**
		 * Forecast Weather Tile
		 * @description A dashboard tile displaying a weather forecast.
		 */
		DashboardForecastWeatherTile: components['schemas']['DashboardTileBase'] & {
			/**
			 * @description Indicates that this is a weather forecast tile.
			 * @example weather_forecast
			 * @constant
			 */
			type: 'weather_forecast';
		};
		/**
		 * Data Source
		 * @description The base schema for all dashboard data sources, containing common attributes such as the associated tile and timestamps.
		 */
		DashboardDataSourceBase: {
			/**
			 * Format: uuid
			 * @description A unique identifier for the data source.
			 * @example 123e4567-e89b-12d3-a456-426614174000
			 */
			readonly id: string;
			/**
			 * @description The type of data source.
			 * @enum {unknown}
			 */
			readonly type: 'device_channel';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated page.
			 */
			page?: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated card.
			 */
			card?: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated tile.
			 * @example 456e7890-a89b-22d3-c456-426614174111
			 */
			tile?: string;
			/**
			 * Format: date-time
			 * @description The timestamp when the data source was created.
			 * @example 2025-01-25T12:00:00Z
			 */
			readonly created_at: string;
			/**
			 * Format: date-time
			 * @description The timestamp when the data source was last updated.
			 * @example 2025-01-25T13:00:00Z
			 */
			readonly updated_at: string | null;
		};
		/**
		 * Device Channel Data Source
		 * @description A data source linked to a specific device channel and property.
		 */
		DashboardDeviceChannelDataSource: components['schemas']['DashboardDataSourceBase'] & {
			/**
			 * @description Indicates that this data source is linked to a device channel.
			 * @constant
			 */
			readonly type: 'device_channel';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example 234e5678-a89b-22d3-c456-426614174133
			 */
			device: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated channel.
			 * @example 345e6789-b89c-32d4-d567-526715184244
			 */
			channel: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated channel property.
			 * @example 456e7890-c89d-42d5-e678-626816194355
			 */
			property: string;
			/**
			 * @description The icon representing the data source.
			 * @default null
			 * @example icon-name
			 */
			icon: string | null;
		} & {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: 'device_channel';
		};
		/**
		 * Create Page
		 * @description The base schema for creating a new dashboard page, containing shared attributes like title and order.
		 */
		DashboardCreatePageBase: {
			/**
			 * Format: uuid
			 * @description The unique identifier for the dashboard page (optional during creation).
			 * @example 123e4567-e89b-12d3-a456-426614174000
			 */
			id?: string;
			/**
			 * @description The type of dashboard page to be created.
			 * @example cards
			 */
			type: string;
			/**
			 * @description The title of the dashboard page.
			 * @example My Dashboard
			 */
			title: string;
			/**
			 * @description The icon associated with the dashboard page.
			 * @example icon-name
			 */
			icon?: string | null;
			/**
			 * Format: int32
			 * @description The position of the page in the dashboard’s list.
			 * @example 1
			 */
			order: number;
		};
		/**
		 * Create Cards Page
		 * @description The schema for creating a cards dashboard page.
		 */
		DashboardCreateCardsPage: components['schemas']['DashboardCreatePageBase'] & {
			/**
			 * @description Specifies the type of page as a cards page.
			 * @default cards
			 * @example cards
			 * @constant
			 */
			type: 'cards';
		};
		/**
		 * Create Tiles Page
		 * @description The schema for creating a tiles dashboard page.
		 */
		DashboardCreateTilesPage: components['schemas']['DashboardCreatePageBase'] & {
			/**
			 * @description Specifies the type of page as a tiles page.
			 * @default tiles
			 * @example tiles
			 * @constant
			 */
			type: 'tiles';
		};
		/**
		 * Create Device Page
		 * @description The schema for creating a device dashboard page.
		 */
		DashboardCreateDevicePage: components['schemas']['DashboardCreatePageBase'] & {
			/**
			 * @description Specifies the type of page as a device page.
			 * @default device
			 * @example device
			 * @constant
			 */
			type: 'device';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example 234e5678-a89b-22d3-c456-426614174133
			 */
			device: string;
		};
		/**
		 * Create Card
		 * @description Schema for creating a dashboard card, containing attributes such as title and icon.
		 */
		DashboardCreateCard: {
			/**
			 * Format: uuid
			 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
			 */
			id?: string;
			/** @example Mood lights */
			title: string;
			/**
			 * @description The icon representing the dashboard card.
			 * @example icon-name
			 */
			icon?: string | null;
			/**
			 * Format: int32
			 * @example 0
			 */
			order?: number;
		};
		/**
		 * Create Tile
		 * @description Base schema for creating a dashboard tile, containing shared attributes such as position and size.
		 */
		DashboardCreateTileBase: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the dashboard tile (optional during creation).
			 * @example 123e4567-e89b-12d3-a456-426614174000
			 */
			id?: string;
			/**
			 * @description The type of tile to be created.
			 * @example device
			 */
			type: string;
			/**
			 * Format: int32
			 * @description The row position of the tile in the grid.
			 * @example 1
			 */
			row: number;
			/**
			 * Format: int32
			 * @description The column position of the tile in the grid.
			 * @example 2
			 */
			col: number;
			/**
			 * Format: int32
			 * @description The number of rows the tile spans in the grid.
			 * @example 1
			 */
			row_span?: number;
			/**
			 * Format: int32
			 * @description The number of columns the tile spans in the grid.
			 * @example 2
			 */
			col_span?: number;
		};
		/**
		 * Create Device Tile
		 * @description Schema for creating a dashboard tile representing a device.
		 */
		DashboardCreateDeviceTile: components['schemas']['DashboardCreateTileBase'] & {
			/**
			 * @description Specifies the type of tile as a device tile.
			 * @default device
			 * @example device
			 * @constant
			 */
			type: 'device';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example 123e4567-e89b-12d3-a456-426614174001
			 */
			device: string;
			/** @description The icon representing the data source. */
			icon?: string | null;
		};
		/**
		 * Create Time Tile
		 * @description Schema for creating a dashboard tile representing a clock.
		 */
		DashboardCreateTimeTile: components['schemas']['DashboardCreateTileBase'] & {
			/**
			 * @description Specifies the type of tile as a clock.
			 * @default clock
			 * @example clock
			 * @constant
			 */
			type: 'clock';
		};
		/**
		 * Create Day Weather Tile
		 * @description Schema for creating a dashboard tile representing day weather.
		 */
		DashboardCreateDayWeatherTile: components['schemas']['DashboardCreateTileBase'] & {
			/**
			 * @description Specifies the type of tile as a day weather tile.
			 * @default weather_day
			 * @example weather_day
			 * @constant
			 */
			type: 'weather_day';
		};
		/**
		 * Create Forecast Weather Tile
		 * @description Schema for creating a dashboard tile representing weather forecast.
		 */
		DashboardCreateForecastWeatherTile: components['schemas']['DashboardCreateTileBase'] & {
			/**
			 * @description Specifies the type of tile as a weather forecast tile.
			 * @default weather_forecast
			 * @example weather_forecast
			 * @constant
			 */
			type: 'weather_forecast';
		};
		/**
		 * Create Data Source
		 * @description Base schema for creating a data source used in a dashboard tile.
		 */
		DashboardCreateDataSourceBase: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the data source (optional during creation).
			 * @example 123e4567-e89b-12d3-a456-426614174000
			 */
			id?: string;
			/**
			 * @description Specifies the type of data source.
			 * @example device_channel
			 */
			type: string;
		};
		/**
		 * Create Device Channel Data Source
		 * @description Schema for creating a data source linked to a device channel and property.
		 */
		DashboardCreateDeviceChannelDataSource: components['schemas']['DashboardCreateDataSourceBase'] & {
			/**
			 * @description Specifies the type of data source as linked to a device channel.
			 * @default device_channel
			 * @example device_channel
			 * @constant
			 */
			type: 'device_channel';
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example 123e4567-e89b-12d3-a456-426614174001
			 */
			device: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated channel within the device.
			 * @example 123e4567-e89b-12d3-a456-426614174002
			 */
			channel: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated property within the channel.
			 * @example 123e4567-e89b-12d3-a456-426614174003
			 */
			property: string;
			/**
			 * @description The icon representing the data source.
			 * @example icon-name
			 */
			icon?: string | null;
		};
		/**
		 * Update Page
		 * @description Base schema for updating a dashboard page.
		 */
		DashboardUpdatePageBase: {
			/**
			 * @description The title of the page.
			 * @example My Updated Dashboard
			 */
			title?: string;
			/**
			 * @description The icon associated with the page.
			 * @example icon-name
			 */
			icon?: string | null;
			/**
			 * Format: int32
			 * @description The display order of the page.
			 * @example 1
			 */
			order?: number;
		};
		/**
		 * Update Cards Page
		 * @description Schema for updating a cards page in the dashboard.
		 */
		DashboardUpdateCardsPage: components['schemas']['DashboardUpdatePageBase'];
		/**
		 * Update Tiles Page
		 * @description Schema for updating a tiles page in the dashboard.
		 */
		DashboardUpdateTilesPage: components['schemas']['DashboardUpdatePageBase'];
		/**
		 * Update Device Page
		 * @description Schema for updating a device page in the dashboard.
		 */
		DashboardUpdateDevicePage: components['schemas']['DashboardUpdatePageBase'] & {
			/**
			 * Format: uuid
			 * @example b12345c6-7890-4d12-345e-6f7890abcd12
			 */
			device?: string;
		};
		/**
		 * Update Card
		 * @description Schema for updating a card in the dashboard.
		 */
		DashboardUpdateCard: {
			/** @example Room lights */
			title?: string;
			/**
			 * @description The icon representing the dashboard card.
			 * @example icon-name
			 */
			icon?: string | null;
			/**
			 * Format: int32
			 * @example 1
			 */
			order?: number;
		};
		/**
		 * Update Tile
		 * @description Base schema for updating a tile in the dashboard.
		 */
		DashboardUpdateTileBase: {
			/**
			 * Format: int32
			 * @description The row position of the tile on the dashboard grid.
			 * @example 1
			 */
			row?: number;
			/**
			 * Format: int32
			 * @description The column position of the tile on the dashboard grid.
			 * @example 1
			 */
			col?: number;
			/**
			 * Format: int32
			 * @description The number of rows the tile spans on the dashboard grid.
			 * @example 2
			 */
			row_span?: number;
			/**
			 * Format: int32
			 * @description The number of columns the tile spans on the dashboard grid.
			 * @example 2
			 */
			col_span?: number;
			/**
			 * Format: uuid
			 * @description The unique identifier of the page to which this tile belongs.
			 * @example 987e6543-a89b-22d3-c456-426614174111
			 */
			page?: string;
		};
		/**
		 * Update Device Tile
		 * @description Schema for updating a device tile in the dashboard.
		 */
		DashboardUpdateDeviceTile: components['schemas']['DashboardUpdateTileBase'] & {
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example b12345c6-7890-4d12-345e-6f7890abcd12
			 */
			device?: string;
			/** @description The icon representing the data source. */
			icon?: string | null;
		};
		/**
		 * Update Time Tile
		 * @description Schema for updating a time tile (clock) in the dashboard.
		 */
		DashboardUpdateTimeTile: components['schemas']['DashboardUpdateTileBase'];
		/**
		 * Update Day Weather Tile
		 * @description Schema for updating a day weather tile in the dashboard.
		 */
		DashboardUpdateDayWeatherTile: components['schemas']['DashboardUpdateTileBase'];
		/**
		 * Update Forecast Weather Tile
		 * @description Schema for updating a forecast weather tile in the dashboard.
		 */
		DashboardUpdateForecastWeatherTile: components['schemas']['DashboardUpdateTileBase'];
		/**
		 * Update Data Source Base
		 * @description Base schema for updating a data source in the dashboard.
		 */
		DashboardUpdateDataSourceBase: {
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated tile.
			 * @example 456e7890-a89b-22d3-c456-426614174111
			 */
			tile?: string;
		};
		/**
		 * Update Device Channel Data Source
		 * @description Schema for updating a device channel data source in the dashboard.
		 */
		DashboardUpdateDeviceChannelDataSource: components['schemas']['DashboardUpdateDataSourceBase'] & {
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated device.
			 * @example b12345c6-7890-4d12-345e-6f7890abcd12
			 */
			device?: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated channel.
			 * @example cd09772a-6981-4dd7-be1c-f2edd6978ee1
			 */
			channel?: string;
			/**
			 * Format: uuid
			 * @description The unique identifier of the associated channel property.
			 * @example cd09772a-6981-4dd7-be1c-f2edd6978ee1
			 */
			property?: string;
			/**
			 * @description The icon representing the data source.
			 * @example icon-name
			 */
			icon?: string | null;
		};
		/**
		 * Page
		 * @description Represents a page in the dashboard, such as Cards, Tiles, or Device pages, with its associated tiles and data sources.
		 */
		DashboardPage:
			| ({
					type: 'DashboardPage';
			  } & (components['schemas']['DashboardCardsPage'] & {
					/** @description A list of tiles displayed on the page. */
					cards?: components['schemas']['DashboardCard'][];
					data_source?: components['schemas']['DashboardDeviceChannelDataSource'][];
			  }))
			| ({
					type: 'DashboardPage';
			  } & (components['schemas']['DashboardTilesPage'] & {
					/** @description A list of tiles displayed on the page. */
					tiles?: (
						| (components['schemas']['DashboardDeviceTile'] & {
								/** @description The data sources associated with this tile. */
								data_source?: components['schemas']['DashboardDeviceChannelDataSource'][];
						  })
						| (components['schemas']['DashboardTimeTile'] & {
								/** @description The data sources associated with this tile. */
								data_source?: components['schemas']['DashboardDeviceChannelDataSource'][];
						  })
						| (components['schemas']['DashboardDayWeatherTile'] & {
								/** @description The data sources associated with this tile. */
								data_source?: components['schemas']['DashboardDeviceChannelDataSource'][];
						  })
						| (components['schemas']['DashboardForecastWeatherTile'] & {
								/** @description The data sources associated with this tile. */
								data_source?: components['schemas']['DashboardDeviceChannelDataSource'][];
						  })
					)[];
					data_source?: components['schemas']['DashboardDeviceChannelDataSource'][];
			  }))
			| components['schemas']['DashboardDevicePage'];
		/**
		 * Card
		 * @description Represents a card in the dashboard page, with its associated tiles and data sources.
		 */
		DashboardCard: {
			/**
			 * Format: uuid
			 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
			 */
			id: string;
			/** @example Mood lights */
			title: string;
			/**
			 * @description The icon representing the dashboard card.
			 * @default null
			 * @example icon-name
			 */
			icon: string | null;
			/**
			 * Format: int32
			 * @example 1
			 */
			order: number;
			page: components['schemas']['DashboardCardsPage'];
			tiles: components['schemas']['DashboardTile'][];
			data_source: components['schemas']['DashboardDataSource'][];
			/**
			 * Format: date-time
			 * @example 2025-01-25T12:00:00Z
			 */
			created_at: string;
			/**
			 * Format: date-time
			 * @example 2025-01-25T12:00:00Z
			 */
			updated_at: string | null;
		};
		/**
		 * Tile
		 * @description Represents a tile in a dashboard, such as a device tile, time tile, weather tile, or forecast tile.
		 */
		DashboardTile:
			| ({
					type: 'DashboardTile';
			  } & (components['schemas']['DashboardDeviceTile'] & {
					data_source: components['schemas']['DashboardDeviceChannelDataSource'][];
			  }))
			| ({
					type: 'DashboardTile';
			  } & (components['schemas']['DashboardTimeTile'] & {
					data_source: components['schemas']['DashboardDeviceChannelDataSource'][];
			  }))
			| ({
					type: 'DashboardTile';
			  } & (components['schemas']['DashboardDayWeatherTile'] & {
					data_source: components['schemas']['DashboardDeviceChannelDataSource'][];
			  }))
			| ({
					type: 'DashboardTile';
			  } & (components['schemas']['DashboardForecastWeatherTile'] & {
					data_source: components['schemas']['DashboardDeviceChannelDataSource'][];
			  }));
		/**
		 * Data Source
		 * @description Represents a data source that feeds data to a dashboard tile.
		 */
		DashboardDataSource: components['schemas']['DashboardDeviceChannelDataSource'];
		/**
		 * Audio
		 * @description Configuration settings for audio, including speaker and microphone controls.
		 */
		ConfigAudio: {
			/**
			 * @description Indicates whether the speaker is enabled.
			 * @default false
			 */
			speaker: boolean;
			/**
			 * Format: int32
			 * @description The volume level of the speaker, ranging from 0 to 100.
			 * @default 0
			 * @example 50
			 */
			speaker_volume: number;
			/**
			 * @description Indicates whether the microphone is enabled.
			 * @default false
			 */
			microphone: boolean;
			/**
			 * Format: int32
			 * @description The volume level of the microphone, ranging from 0 to 100.
			 * @default 0
			 * @example 50
			 */
			microphone_volume: number;
		};
		/**
		 * Display
		 * @description Configuration settings for the display, including brightness, dark mode, and screen lock behavior.
		 */
		ConfigDisplay: {
			/**
			 * @description Enables dark mode for the display.
			 * @default false
			 */
			dark_mode: boolean;
			/**
			 * Format: int32
			 * @description Sets the brightness level of the display (0-100).
			 * @default 0
			 * @example 50
			 */
			brightness: number;
			/**
			 * Format: int32
			 * @description Time in seconds before the screen automatically locks.
			 * @default 30
			 * @example 30
			 */
			screen_lock_duration: number;
			/**
			 * @description Enables the screen saver when the device is idle. Value is in seconds.
			 * @default true
			 */
			screen_saver: boolean;
		};
		/**
		 * Language
		 * @description Configuration settings for language, time zone, and time format on the smart panel.
		 */
		ConfigLanguage: {
			/**
			 * @description Defines the language and region format. Uses standard locale codes (ISO 639-1).
			 * @default en_US
			 * @enum {unknown}
			 */
			language: 'en_US' | 'cs_CZ';
			/**
			 * @description Sets the time format for displaying time on the panel.
			 * @default Europe/Prague
			 * @example Europe/Prague
			 */
			timezone: string;
			/**
			 * @description Defines the time zone of the smart panel. Uses the IANA time zone format.
			 * @default 24h
			 * @enum {unknown}
			 */
			time_format: '12h' | '24h';
		};
		/**
		 * Weather
		 * @description Configuration settings for weather data, including location, temperature unit, and API integration.
		 */
		ConfigWeather: {
			/** @description The location for weather updates, specified as a city name or coordinates (latitude, longitude). */
			location: string | null;
			/**
			 * @default city_name
			 * @example city_name
			 * @enum {unknown}
			 */
			location_type: 'lat_lon' | 'city_name' | 'city_id' | 'zip_code';
			/**
			 * @description Defines the temperature unit for weather data.
			 * @default celsius
			 * @enum {unknown}
			 */
			unit: 'celsius' | 'fahrenheit';
			/** @description API key for OpenWeatherMap. Required only if using OpenWeatherMap as a data source. */
			open_weather_api_key: string | null;
		};
		/**
		 * App
		 * @description Configuration settings for the smart panel, including audio, display, language, and weather settings.
		 */
		ConfigApp: {
			/** @description Audio configuration settings, including speaker and microphone options. */
			audio: components['schemas']['ConfigAudio'];
			/** @description Display settings, including brightness, dark mode, and screen lock duration. */
			display: components['schemas']['ConfigDisplay'];
			/** @description Language and localization settings, including time zone and time format. */
			language: components['schemas']['ConfigLanguage'];
			/** @description Weather settings, including location, unit preferences, and API integration. */
			weather: components['schemas']['ConfigWeather'];
		};
		/**
		 * Update Audio
		 * @description Partial update settings for audio configuration, allowing changes to speaker and microphone settings.
		 */
		ConfigUpdateAudio: {
			/** @description Enables or disables the speaker. */
			speaker?: boolean;
			/**
			 * Format: int32
			 * @description Sets the speaker volume (0-100).
			 */
			speaker_volume?: number;
			/** @description Enables or disables the microphone. */
			microphone?: boolean;
			/**
			 * Format: int32
			 * @description Sets the microphone volume (0-100).
			 */
			microphone_volume?: number;
		};
		/**
		 * Update Display
		 * @description Partial update settings for display configuration, allowing changes to brightness, dark mode, and screen lock duration.
		 */
		ConfigUpdateDisplay: {
			/** @description Enables or disables dark mode. */
			dark_mode?: boolean;
			/**
			 * Format: int32
			 * @description Sets the brightness level (0-100).
			 */
			brightness?: number;
			/**
			 * Format: int32
			 * @description Time in seconds before the screen automatically locks.
			 */
			screen_lock_duration?: number;
			/** @description Enables or disables the screen saver. */
			screen_saver?: boolean;
		};
		/**
		 * Update Language
		 * @description Partial update settings for language and localization configuration.
		 */
		ConfigUpdateLanguage: {
			/**
			 * @description Defines the language and region format.
			 * @enum {string}
			 */
			language?: 'en_US' | 'cs_CZ';
			/**
			 * @description Defines the time zone using the IANA time zone format.
			 * @example Europe/Prague
			 */
			timezone?: string;
			/**
			 * @description Sets the time format (12-hour or 24-hour).
			 * @enum {string}
			 */
			time_format?: '12h' | '24h';
		};
		/**
		 * Update Weather
		 * @description Partial update settings for weather configuration, allowing changes to location, temperature unit, and API key.
		 */
		ConfigUpdateWeather: {
			/** @description The location for weather updates, specified as a city name or coordinates (latitude, longitude). */
			location?: string | null;
			/**
			 * @description Defines the temperature unit for weather data.
			 * @enum {string}
			 */
			unit?: 'celsius' | 'fahrenheit';
			/** @description API key for OpenWeatherMap. Required only if using OpenWeatherMap as a data source. */
			open_weather_api_key?: string | null;
		};
		/**
		 * Memory Info
		 * @description Provides details about total, used, and free memory on the system.
		 */
		SystemMemoryInfo: {
			/**
			 * @description Total available system memory in bytes.
			 * @example 8388608000
			 */
			readonly total: number;
			/**
			 * @description Used memory in bytes.
			 * @example 4200000000
			 */
			readonly used: number;
			/**
			 * @description Free memory in bytes.
			 * @example 4188608000
			 */
			readonly free: number;
		};
		/**
		 * Storage Info
		 * @description Provides details about system storage, including file system, usage, and available space.
		 */
		SystemStorageInfo: {
			/**
			 * @description Filesystem type or mount point.
			 * @example /dev/mmcblk0p1
			 */
			readonly fs: string;
			/**
			 * @description Used storage space in bytes.
			 * @example 15000000000
			 */
			readonly used: number;
			/**
			 * @description Total storage capacity in bytes.
			 * @example 32000000000
			 */
			readonly size: number;
			/**
			 * @description Available free storage space in bytes.
			 * @example 17000000000
			 */
			readonly available: number;
		};
		/**
		 * Temperature Info
		 * @description Provides the current temperature of system components like CPU and GPU.
		 */
		SystemTemperatureInfo: {
			/**
			 * @description CPU temperature in Celsius.
			 * @example 55
			 */
			readonly cpu?: number;
			/**
			 * @description GPU temperature in Celsius.
			 * @example 60
			 */
			readonly gpu?: number;
		};
		/**
		 * Operating System Info
		 * @description Provides information about the operating system, including distribution, version, and uptime.
		 */
		SystemOperatingSystemInfo: {
			/**
			 * @description Operating system platform.
			 * @example linux
			 */
			readonly platform: string;
			/**
			 * @description Operating system distribution.
			 * @example Debian
			 */
			readonly distro: string;
			/**
			 * @description Operating system release version.
			 * @example 11 (bullseye)
			 */
			readonly release: string;
			/**
			 * @description System uptime in seconds.
			 * @example 36000
			 */
			readonly uptime: number;
		};
		/**
		 * Display Info
		 * @description Provides information about the display resolution and current screen resolution.
		 */
		SystemDisplayInfo: {
			/**
			 * @description Native horizontal screen resolution.
			 * @example 1920
			 */
			readonly resolution_x: number;
			/**
			 * @description Native vertical screen resolution.
			 * @example 1080
			 */
			readonly resolution_y: number;
			/**
			 * @description Current horizontal screen resolution.
			 * @example 1280
			 */
			readonly current_res_x: number;
			/**
			 * @description Current vertical screen resolution.
			 * @example 720
			 */
			readonly current_res_y: number;
		};
		/**
		 * Network Stats
		 * @description Provides network statistics, including interface, received/transmitted bytes, and speed.
		 */
		SystemNetworkStats: {
			/**
			 * @description Network interface name.
			 * @example eth0
			 */
			readonly interface: string;
			/**
			 * @description Total received bytes.
			 * @example 123456789
			 */
			readonly rx_bytes: number;
			/**
			 * @description Total transmitted bytes.
			 * @example 98765432
			 */
			readonly tx_bytes: number;
		};
		/**
		 * System Info
		 * @description Provides detailed information about the system, including CPU load, memory, storage, temperature, operating system, network, and display.
		 */
		SystemSystemInfo: {
			/**
			 * Format: float
			 * @description Current CPU load percentage (0-100%).
			 * @example 15.3
			 */
			readonly cpu_load: number;
			memory: components['schemas']['SystemMemoryInfo'];
			/** @description List of available storage devices and their usage details. */
			readonly storage: components['schemas']['SystemStorageInfo'][];
			temperature: components['schemas']['SystemTemperatureInfo'];
			/** @description Operating system name and version. */
			os: components['schemas']['SystemOperatingSystemInfo'];
			/** @description List of network interfaces with statistics. */
			readonly network: components['schemas']['SystemNetworkStats'][];
			display: components['schemas']['SystemDisplayInfo'];
		};
		/**
		 * Throttle Status
		 * @description Indicates whether the system has experienced any throttling, frequency capping, or undervoltage conditions.
		 */
		SystemThrottleStatus: {
			/**
			 * @description Indicates if the system has detected undervoltage conditions.
			 * @default false
			 */
			readonly undervoltage: boolean;
			/**
			 * @description Indicates if the system is reducing CPU frequency due to power constraints.
			 * @default false
			 */
			readonly frequency_capping: boolean;
			/** @description Indicates if the system has experienced CPU throttling due to high temperatures. */
			readonly throttling: boolean;
			/**
			 * @description Indicates if the system has reached the soft temperature limit and is reducing performance.
			 * @default false
			 */
			readonly soft_temp_limit: boolean;
		};
		/**
		 * User
		 * @description Represents a user in the system.
		 */
		UsersUser: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the user.
			 * @example f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6
			 */
			id: string;
			/**
			 * @description Unique username of the user.
			 * @example johndoe
			 */
			username: string;
			/**
			 * @description First name of the user.
			 * @example John
			 */
			first_name: string | null;
			/**
			 * @description Last name of the user.
			 * @example Doe
			 */
			last_name: string | null;
			/**
			 * Format: email
			 * @description Email address of the user.
			 * @example john@doe.com
			 */
			email: string | null;
			/**
			 * @description Indicates whether the user is hidden from general visibility.
			 * @default false
			 */
			is_hidden: boolean;
			/**
			 * @description User role: 'owner' has full access, 'admin' can manage users, 'user' has limited access, 'display' is read-only.
			 * @default user
			 * @enum {unknown}
			 */
			role: 'owner' | 'admin' | 'user' | 'display';
			/**
			 * Format: date-time
			 * @description The timestamp when the user was created.
			 * @example 2025-01-25T12:00:00Z
			 */
			created_at: string;
			/**
			 * Format: date-time
			 * @description The timestamp when the user was updated.
			 * @example 2025-01-25T12:00:00Z
			 */
			updated_at: string | null;
		};
		/**
		 * Create User
		 * @description Schema for creating a new user.
		 */
		UsersCreateUser: {
			/**
			 * Format: uuid
			 * @description Unique identifier for the user.
			 * @example f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6
			 */
			id?: string;
			/**
			 * @description Unique username for the new user.
			 * @example johndoe
			 */
			username: string;
			/**
			 * Format: password
			 * @description Password for the new user. Must be at least 6 characters long.
			 * @example superstrongpassword
			 */
			password: string;
			/**
			 * Format: email
			 * @description Optional email address for the user.
			 * @example john@doe.com
			 */
			email?: string | null;
			/**
			 * @description Optional first name of the user.
			 * @example John
			 */
			first_name?: string | null;
			/**
			 * @description Optional last name of the user.
			 * @example Doe
			 */
			last_name?: string | null;
			/**
			 * @description Role of the user. Defaults to 'user' if not provided.
			 * @enum {unknown}
			 */
			role?: 'owner' | 'admin' | 'user' | 'display';
		};
		/**
		 * Update User
		 * @description Schema for updating an existing user.
		 */
		UsersUpdateUser: {
			/**
			 * Format: password
			 * @description New password for the user.
			 * @example superstrongpassword
			 */
			password?: string;
			/**
			 * Format: email
			 * @description Updated email address of the user.
			 * @example john@doe.com
			 */
			email?: string | null;
			/**
			 * @description Updated first name of the user.
			 * @example John
			 */
			first_name?: string | null;
			/**
			 * @description Updated last name of the user.
			 * @example Doe
			 */
			last_name?: string | null;
			/**
			 * @description Updated role of the user.
			 * @enum {unknown}
			 */
			role?: 'owner' | 'admin' | 'user' | 'display';
		};
		/**
		 * Register
		 * @description Schema for user registration.
		 */
		AuthRegister: {
			/**
			 * @description Unique identifier for the user.
			 * @example johndoe
			 */
			username: string;
			/**
			 * Format: password
			 * @description User's password. Must be at least 6 characters long.
			 * @example superstrongpassword
			 */
			password: string;
			/**
			 * Format: email
			 * @description Optional user's email address.
			 * @example john@doe.com
			 */
			email?: string;
			/**
			 * @description Optional user's first name.
			 * @example John
			 */
			first_name?: string;
			/**
			 * @description Optional user's last name.
			 * @example Doe
			 */
			last_name?: string;
		};
		/**
		 * Login
		 * @description Schema for user authentication.
		 */
		AuthLogin: {
			/**
			 * @description The username of the user.
			 * @example johndoe
			 */
			username: string;
			/**
			 * Format: password
			 * @description The user's password.
			 * @example superstrongpassword
			 */
			password: string;
		};
		/**
		 * Check Email
		 * @description Checks whether an email address is already in use.
		 */
		AuthCheckEmail: {
			/**
			 * Format: email
			 * @description The email address to check for availability.
			 * @example john@doe.com
			 */
			email: string;
		};
		/**
		 * Check Username
		 * @description Checks whether a username is already in use.
		 */
		AuthCheckUsername: {
			/**
			 * @description The username to check for availability.
			 * @example johndoe
			 */
			username: string;
		};
		/**
		 * Location Weather
		 * @description Provides current weather conditions and forecast details for a specific location.
		 */
		WeatherLocationWeather: {
			/** @description Current weather conditions at the specified location. */
			weather: {
				/**
				 * @description Current temperature in degrees Celsius.
				 * @example 22.5
				 */
				temperature: number;
				/**
				 * @description Minimum recorded temperature for the day in degrees Celsius.
				 * @example 18.2
				 */
				temperature_min: number;
				/**
				 * @description Maximum recorded temperature for the day in degrees Celsius.
				 * @example 25.8
				 */
				temperature_max: number;
				/**
				 * @description Perceived temperature based on wind and humidity.
				 * @example 21.9
				 */
				feels_like: number;
				/**
				 * @description Atmospheric pressure in hPa.
				 * @example 1013
				 */
				pressure: number;
				/**
				 * @description Humidity level as a percentage.
				 * @example 55
				 */
				humidity: number;
				/** @description Detailed weather status. */
				weather: {
					/**
					 * @description Weather condition code.
					 * @example 800
					 */
					code: number;
					/**
					 * @description Weather condition (e.g., Rain, Snow, Clear).
					 * @example Clear
					 */
					main: string;
					/**
					 * @description Detailed description of the weather condition.
					 * @example clear sky
					 */
					description: string;
					/**
					 * @description Icon code representing the current weather condition.
					 * @example 01d
					 */
					icon: string;
				};
				/**
				 * Format: date-time
				 * @description Timestamp for sunrise in ISO 8601 format.
				 * @example 2025-02-06T06:45:00Z
				 */
				sunrise: string;
				/**
				 * Format: date-time
				 * @description Timestamp for sunset in ISO 8601 format.
				 * @example 2025-02-06T17:30:00Z
				 */
				sunset: string;
				/** @description Details of the location where the weather data is recorded. */
				location: {
					/**
					 * @description Name of the city or region.
					 * @example Prague
					 */
					name: string;
					/**
					 * @description Country code (ISO 3166-1 alpha-2) or full country name.
					 * @example CZ
					 */
					country: string;
				};
				/** @description Wind conditions at the location. */
				wind: {
					/**
					 * @description Wind speed in meters per second.
					 * @example 3.5
					 */
					speed: number;
					/**
					 * @description Wind direction in degrees (0° - 360°).
					 * @example 180
					 */
					deg: number;
					/**
					 * @description Wind gust speed in meters per second.
					 * @example 5.8
					 */
					gust: number | null;
				};
				/**
				 * @description Cloudiness percentage.
				 * @example 10
				 */
				clouds: number;
				/**
				 * @description Rain volume in the last hour (mm).
				 * @example 0
				 */
				rain: number | null;
				/**
				 * @description Snow volume in the last hour (mm).
				 * @example null
				 */
				snow: number | null;
				/**
				 * Format: date-time
				 * @description Timestamp when the weather data was last updated.
				 * @example 2025-02-06T12:00:00Z
				 */
				created_at: string;
			};
			/** @description Weather forecast for upcoming days at the specified location. */
			forecast: {
				/** @description Location details for the forecast. */
				location: {
					/**
					 * @description Name of the city or region.
					 * @example Prague
					 */
					name: string;
					/**
					 * @description Country code (ISO 3166-1 alpha-2) or full country name.
					 * @example CZ
					 */
					country: string;
				};
				/**
				 * Format: date-time
				 * @description Timestamp for sunrise in ISO 8601 format.
				 * @example 2025-02-07T06:47:00Z
				 */
				sunrise: string;
				/**
				 * Format: date-time
				 * @description Timestamp for sunset in ISO 8601 format.
				 * @example 2025-02-07T17:32:00Z
				 */
				sunset: string;
				/** @description List of daily weather forecasts. */
				forecast: {
					/**
					 * @description Predicted temperature in degrees Celsius.
					 * @example 20.5
					 */
					temperature: number;
					/**
					 * @description Predicted minimum temperature in degrees Celsius.
					 * @example 16
					 */
					temperature_min: number;
					/**
					 * @description Predicted maximum temperature in degrees Celsius.
					 * @example 24
					 */
					temperature_max: number;
					/**
					 * @description Predicted perceived temperature based on wind and humidity.
					 * @example 19.8
					 */
					feels_like: number;
					/**
					 * @description Predicted atmospheric pressure in hPa.
					 * @example 1015
					 */
					pressure: number;
					/**
					 * @description Predicted humidity level as a percentage.
					 * @example 60
					 */
					humidity: number;
					/**
					 * @description Predicted cloudiness percentage.
					 * @example 30
					 */
					clouds: number;
					/**
					 * @description Predicted rain volume in the last 3 hours (mm).
					 * @example 0.5
					 */
					rain: number | null;
					/**
					 * @description Predicted snow volume in the last 3 hours (mm).
					 * @example null
					 */
					snow: number | null;
					/**
					 * Format: date-time
					 * @description Timestamp when the forecast data was last updated.
					 * @example 2025-02-06T18:00:00Z
					 */
					created_at: string;
				}[];
			};
		};
		/**
		 * Geolocation
		 * @description Represents geographical location details, including city name, coordinates, and country information.
		 */
		WeatherGeolocation: {
			/**
			 * @description Name of the city or location.
			 * @example Prague
			 */
			name?: string;
			/** @description Alternative names for the location in different languages. */
			local_names?: {
				[key: string]: string;
			};
			/**
			 * @description Latitude coordinate of the location.
			 * @example 50.0755
			 */
			lat?: string;
			/**
			 * @description Longitude coordinate of the location.
			 * @example 14.4378
			 */
			lon?: string;
			/**
			 * @description Country code (ISO 3166-1 alpha-2) or full country name.
			 * @example CZ
			 */
			country?: string;
			/**
			 * @description State or province where the location is situated, if applicable.
			 * @example Prague Region
			 */
			state?: string;
		};
	};
	responses: {
		/** @description An unexpected server error occurred. */
		InternalServerError: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example error */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					error: {
						/**
						 * @description Short error code indicating the type of error.
						 * @example InternalServerError
						 */
						readonly code: string;
						/**
						 * @description Detailed error message for debugging or client display.
						 * @example An unexpected error occurred.
						 */
						readonly message: string;
						/** @description Additional information about the error, if available. */
						details?:
							| {
									/** @example name */
									readonly field?: string;
									/** @example Name cannot contain special characters. */
									readonly reason?: string;
							  }
							| {
									/** @example name */
									readonly field?: string;
									/** @example Name cannot contain special characters. */
									readonly reason?: string;
							  }[];
					};
					metadata: {
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 30.73
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The requested resource was not found. */
		NotFoundError: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/**
					 * @default error
					 * @example error
					 */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					error: {
						/**
						 * @description Short error code indicating the type of error.
						 * @example NotFoundError
						 */
						readonly code: string;
						/**
						 * @description Detailed error message for debugging or client display.
						 * @example The specified resource was not found.
						 */
						readonly message: string;
						/** @description Additional information about the error, if available. */
						details?:
							| {
									/** @example id */
									readonly field?: string;
									/** @example resource not found */
									readonly reason?: string;
							  }
							| {
									readonly field?: string;
									readonly reason?: string;
							  }[];
					};
					metadata: {
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 30.73
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The request parameters were invalid. */
		BadRequestError: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example error */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					error: {
						/**
						 * @description Short error code indicating the type of error.
						 * @example BadRequestError
						 */
						readonly code: string;
						/**
						 * @description Detailed error message for debugging or client display.
						 * @example The 'name' parameter is invalid.
						 */
						readonly message: string;
						/** @description Additional information about the error, if available. */
						details?:
							| {
									/** @example name */
									readonly field?: string;
									/** @example Name cannot contain special characters. */
									readonly reason?: string;
							  }
							| {
									/** @example name */
									readonly field?: string;
									/** @example Name cannot contain special characters. */
									readonly reason?: string;
							  }[];
					};
					metadata: {
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 30.73
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The device was successfully retrieved. The response contains detailed information about the device, including its metadata, channels, controls, and properties. */
		DevicesOneDevice: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDevice'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description A list of devices successfully retrieved. Each device includes its metadata (ID, name, category), associated channels, controls, and properties. */
		DevicesMultipleDevices: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/**
					 * @default success
					 * @example success
					 */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDevice'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The details of the control were successfully retrieved. The response contains information such as the control’s name, ID, associated device, and timestamps. */
		DevicesOneDeviceControl: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls/227349b1-a2a7-439a-b296-59f002faa8ce
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDeviceControl'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The list of controls was successfully retrieved. Each control includes metadata such as its ID, name, and timestamps. */
		DevicesMultipleDeviceControls: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDeviceControl'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The channel details were successfully retrieved. The response contains detailed information about the channel, including its metadata, associated device, controls, and properties. */
		DevicesOneChannel: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannel'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The list of channels was successfully retrieved. The response includes metadata for each channel, including its ID, name, category, associated device, controls, and properties. */
		DevicesMultipleChannels: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/**
					 * @default success
					 * @example success
					 */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannel'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The request was successful. The response contains the details of the requested control, including its ID, name, associated channel, and metadata. */
		DevicesOneChannelControl: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelControl'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The request was successful. The response contains an array of controls, each including details such as the control’s ID, name, associated channel, and metadata. */
		DevicesMultipleChannelControls: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/**
					 * @default success
					 * @example success
					 */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelControl'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The request was successful. The response contains the full representation of the requested property, including its unique identifier, metadata, current value, and the associated channel. */
		DevicesOneChannelProperty: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelProperty'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The request was successful. The response contains an array of properties associated with the specified channel. Each property includes detailed metadata such as its unique identifier, category, permissions, data type, unit, and current value, along with timestamps for creation and updates. */
		DevicesMultipleChannelProperties: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/**
					 * @default success
					 * @example success
					 */
					status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties
					 */
					path: string;
					/** @enum {unknown} */
					method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelProperty'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						cpu_usage: number;
					};
				};
			};
		};
		/** @description The device was successfully created. The response body contains the complete representation of the device, including its unique ID, category, name, channels, controls, and properties. A Location header is also returned, containing the URI of the created device resource for future operations. */
		DevicesCreatedDevice: {
			headers: {
				/** @description The URI of the newly created device resource, which can be used to retrieve, update, or delete the device. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDevice'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The device was successfully updated. The response contains the updated device object, including its metadata, associated channels, controls, and properties. */
		DevicesUpdateDevice: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDevice'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The control was successfully created. The response contains the details of the newly created control. */
		DevicesCreatedDeviceControl: {
			headers: {
				/** @description The URI of the newly created device control resource, which can be used to retrieve, update, or delete the control. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesDeviceControl'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The channel was successfully created. The response contains the details of the newly created channel, including its metadata, associated controls, and properties. */
		DevicesCreatedChannel: {
			headers: {
				/** @description The URI of the newly created channel resource, which can be used to retrieve, update, or delete the channel. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannel'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The channel was successfully updated. The response contains the updated channel object, including its metadata, associated controls, and properties. */
		DevicesUpdatedChannel: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannel'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The control was successfully created. The response includes the complete details of the newly created control, such as its unique identifier, name, associated channel, and timestamps. */
		DevicesCreatedChannelControl: {
			headers: {
				/** @description The URI of the newly created channel control resource, which can be used to retrieve, update, or delete the control. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelControl'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The property was successfully created. The response body contains the complete representation of the created property, including its unique ID, associated channel, category, and metadata. The Location header provides the URI of the newly created property resource. */
		DevicesCreatedChannelProperty: {
			headers: {
				/** @description The URI of the newly created channel property resource, which can be used to retrieve, update, or delete the property. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelProperty'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The property was successfully updated. The response contains the updated representation of the property, including its unique identifier, metadata, and current value. */
		DevicesUpdatedChannelProperty: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DevicesChannelProperty'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The page was successfully retrieved. The response contains detailed information about the page, including its metadata, tiles and data sources. */
		DashboardOnePage: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardPage'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description A list of pages successfully retrieved. Each page includes its metadata (ID and title), associated tiles and data sources. */
		DashboardMultiplePages: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					readonly data: components['schemas']['DashboardPage'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The details of the tile were successfully retrieved. The response contains information such as the tile’s position, size, associated page, and timestamps. */
		DashboardOneTile: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardTile'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The list of tiles was successfully retrieved. Each tile includes metadata such as its ID, size, and position. */
		DashboardMultipleTiles: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					readonly data: components['schemas']['DashboardTile'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The details of the data soure were successfully retrieved. The response contains information such as the data source’s associated device, channel, value, and associated tile. */
		DashboardOneDataSource: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source/123e4567-e89b-12d3-a456-426614174000
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardDataSource'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The list of data sources associated with the tile was successfully retrieved. Each data source includes details such as its ID, associated device, value, and metadata. */
		DashboardMultipleDataSources: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					readonly data: components['schemas']['DashboardDataSource'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The page was successfully created. The response body contains the complete representation of the page, including its unique ID, title, tiles and data sources. A Location header is also returned, containing the URI of the created page resource for future operations. */
		DashboardCreatedPage: {
			headers: {
				/** @description The URI of the newly created page resource, which can be used to retrieve, update, or delete the page. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardPage'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The tile was successfully created. The response contains the details of the newly created tile. */
		DashboardCreatedTile: {
			headers: {
				/** @description The URI of the newly created page tile resource, which can be used to retrieve, update, or delete the tile. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardTile'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The data source was successfully created. The response body contains the complete representation of the data source, including its unique identifier, associated device, associated channel, timezone and metadata. */
		DashboardCreatedDataSource: {
			headers: {
				/** @description The URI of the newly created tile data source resource, which can be used to retrieve, update, or delete the data source. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardDataSource'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The page was successfully updated. The response contains the updated page object, including its metadata, associated tiles and data sources. */
		DashboardUpdatedPage: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardPage'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Partially updates the attributes of a specific tile associated with a page using its unique ID. The update can modify metadata, such as the tile’s position or size, without requiring the full object. */
		DashboardUpdatedTile: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardTile'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The data source was successfully updated. The response contains the updated data source details, including its unique identifier, associated device, channel, value, and metadata. */
		DashboardUpdatedDataSource: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source/123e4567-e89b-12d3-a456-426614174000
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardDataSource'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response containing the full smart panel configuration, including audio, display, language, and weather settings. */
		ConfigApp: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['ConfigApp'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response containing the current audio configuration, including speaker and microphone settings. */
		ConfigSection: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data:
						| components['schemas']['ConfigAudio']
						| components['schemas']['ConfigDisplay']
						| components['schemas']['ConfigLanguage']
						| components['schemas']['ConfigWeather'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Provides a detailed overview of the system’s current status, including CPU load, memory usage, storage details, temperature readings, operating system information, network statistics, and display settings. */
		SystemSystemInfo: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['SystemSystemInfo'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Provides the system’s throttling status, indicating whether any CPU or power-related limitations have been triggered. */
		SystemSystemThrottling: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['SystemThrottleStatus'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Represents the result of an individual property update request. */
		DevicesThirdPartyDevicePropertyUpdateResult: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': components['schemas']['DevicesThirdPartyDevicePropertyUpdateResult'];
			};
		};
		/** @description The card was successfully created. The response contains the details of the newly created card. */
		DashboardCreatedCard: {
			headers: {
				/** @description The URI of the newly created card resource, which can be used to retrieve, update, or delete the card. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardCard'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Partially updates the attributes of a specific card associated with a page using its unique ID. The update can modify metadata, such as the card’s title or icon, without requiring the full object. */
		DashboardUpdatedCard: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardCard'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The list of cards was successfully retrieved. Each card includes metadata such as its ID, title, and icon. */
		DashboardMultipleCards: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					readonly data: components['schemas']['DashboardCard'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The details of the card were successfully retrieved. The response contains information such as the card’s associated tiles, data sources and card details. */
		DashboardOneCard: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source/123e4567-e89b-12d3-a456-426614174000
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['DashboardCard'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response returned after successfully creating a user. */
		UsersCreatedUser: {
			headers: {
				/** @description The URI of the newly created user resource, which can be used to retrieve, update, or delete the user. */
				Location?: string;
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['UsersUser'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response returned after successfully updating a user. */
		UsersUpdatedUser: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['UsersUser'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description A list of users successfully retrieved. Each user includes its metadata (ID, username, role). */
		UsersMultipleUsers: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['UsersUser'][];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description The user details were successfully retrieved. The response contains detailed information about the user. */
		UsersOneUser: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['UsersUser'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response returned after successful user login. */
		AuthLoggedIn: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: {
						/** @description The JWT access token for authenticated sessions. */
						access_token: string;
						/** @description The JWT refresh token for authenticated sessions. */
						refresh_token: string;
						/** @description Token type */
						type: string;
						/**
						 * Format: date-time
						 * @description The JWT access token expiration date.
						 */
						expiration: string;
					};
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response returned when checking the validity of a user's authentication token. */
		AuthCheck: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: {
						/** @description Indicates whether the provided validation field is valid. */
						valid: boolean;
					};
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response returned after successfully registering a display-only user. */
		AuthRegisteredDisplay: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: {
						/** @description A unique secret key assigned to the display-only user. */
						secret: string;
					};
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response containing the authenticated user's profile details. */
		AuthProfile: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					/** @description User profile data for the authenticated user. */
					data: components['schemas']['UsersUser'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response containing current weather conditions and forecast details for a specified location. */
		WeatherLocationWeather: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['WeatherLocationWeather'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response containing geographical information related to a specified location. */
		WeatherGeolocation: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: components['schemas']['WeatherGeolocation'];
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
		/** @description Response returned after successful user access token refresh. */
		AuthRefresh: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': {
					/** @example success */
					readonly status: string;
					/**
					 * Format: date-time
					 * @description Timestamp when the error occurred in ISO 8601 format.
					 * @example 2025-01-18T12:00:00Z
					 */
					readonly timestamp: string;
					/**
					 * Format: uuid
					 * @description Unique identifier for this specific API request.
					 * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
					 */
					readonly request_id: string;
					/**
					 * @description The requested API endpoint.
					 * @example /api/v1/dashboard-module/pages/123e4567-e89b-12d3-a456-426614174000/tiles/456e7890-a89b-22d3-c456-426614174111/data-source
					 */
					readonly path: string;
					/** @enum {unknown} */
					readonly method: 'GET' | 'POST' | 'PATCH' | 'DELETE';
					data: {
						/** @description The JWT access token for authenticated sessions. */
						access_token: string;
						/** @description The JWT refresh token for authenticated sessions. */
						refresh_token: string;
						/** @description Token type */
						type: string;
						/**
						 * Format: date-time
						 * @description The JWT access token expiration date.
						 */
						expiration: string;
					};
					metadata: {
						/**
						 * Format: float
						 * @example 57
						 */
						readonly request_duration_ms: number;
						/**
						 * Format: date-time
						 * @example 2025-01-18T12:00:00Z
						 */
						readonly server_time: string;
						/**
						 * Format: float
						 * @example 25.28
						 */
						readonly cpu_usage: number;
					};
				};
			};
		};
	};
	parameters: {
		/**
		 * @description The ID of the resource to retrieve.
		 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
		 */
		id: string;
		/**
		 * @description The ID of the device to retrieve.
		 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
		 */
		deviceId: string;
		/**
		 * @description The ID of the channel to retrieve.
		 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
		 */
		channelId: string;
		/**
		 * @description The ID of the page to retrieve.
		 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
		 */
		pageId: string;
		/**
		 * @description The ID of the card to retrieve.
		 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
		 */
		cardId: string;
		/**
		 * @description The ID of the tile to retrieve.
		 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
		 */
		tileId: string;
	};
	requestBodies: {
		/** @description The data required to create a new device */
		DevicesCreateDevice: {
			content: {
				'application/json': components['schemas']['DevicesCreateThirdPartyDevice'] & {
					controls?: components['schemas']['DevicesCreateDeviceControl'][];
					channels?: (components['schemas']['DevicesCreateChannel'] & {
						controls?: components['schemas']['DevicesCreateChannelControl'][];
						properties?: components['schemas']['DevicesCreateChannelProperty'][];
					})[];
				};
			};
		};
		/** @description The data required to create a new device control */
		DevicesCreateDeviceControl: {
			content: {
				'application/json': components['schemas']['DevicesCreateDeviceControl'];
			};
		};
		/** @description The data required to create a new channel */
		DevicesCreateChannel: {
			content: {
				'application/json': components['schemas']['DevicesCreateChannel'] & {
					/**
					 * Format: uuid
					 * @description The parent device to which this channel belongs.
					 * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
					 */
					device: string;
					controls?: components['schemas']['DevicesCreateChannelControl'];
					properties?: components['schemas']['DevicesCreateChannelProperty'][];
				};
			};
		};
		/** @description The data required to create a new channel control */
		DevicesCreateChannelControl: {
			content: {
				'application/json': components['schemas']['DevicesCreateChannelControl'];
			};
		};
		/** @description The data required to create a new channel property */
		DevicesCreateChannelProperty: {
			content: {
				'application/json': components['schemas']['DevicesCreateChannelProperty'];
			};
		};
		/** @description The data required to update a existing device */
		DevicesUpdateDevice: {
			content: {
				'application/json': components['schemas']['DevicesUpdateThirdPartyDevice'];
			};
		};
		/** @description The data required to update a existing channel */
		DevicesUpdateChannel: {
			content: {
				'application/json': components['schemas']['DevicesUpdateChannel'];
			};
		};
		/** @description The data required to update a existing channel property */
		DevicesUpdateChannelProperty: {
			content: {
				'application/json': components['schemas']['DevicesUpdateChannelProperty'];
			};
		};
		/** @description The data required to create a new device channel */
		DevicesCreateDeviceChannel: {
			content: {
				'application/json': components['schemas']['DevicesCreateChannel'] & {
					controls?: components['schemas']['DevicesCreateChannelControl'][];
					properties?: components['schemas']['DevicesCreateChannelProperty'][];
				};
			};
		};
		/** @description The payload schema used for creating a new dashboard page. */
		DashboardCreatePage: {
			content: {
				'application/json':
					| (components['schemas']['DashboardCreateCardsPage'] & {
							/** @description A list of tiles to include on the cards page. */
							cards?: (components['schemas']['DashboardCreateCard'] & {
								tiles?: (
									| (components['schemas']['DashboardCreateDeviceTile'] & {
											data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
									  })
									| (components['schemas']['DashboardCreateTimeTile'] & {
											data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
									  })
									| (components['schemas']['DashboardCreateDayWeatherTile'] & {
											data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
									  })
									| (components['schemas']['DashboardCreateForecastWeatherTile'] & {
											data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
									  })
								)[];
								data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
							})[];
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateTilesPage'] & {
							/** @description A list of tiles to include on the cards page. */
							tiles?: (
								| (components['schemas']['DashboardCreateDeviceTile'] & {
										/** @description A list of data sources associated with the device tile. */
										data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
								  })
								| (components['schemas']['DashboardCreateTimeTile'] & {
										/** @description A list of data sources associated with the device tile. */
										data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
								  })
								| (components['schemas']['DashboardCreateDayWeatherTile'] & {
										/** @description A list of data sources associated with the device tile. */
										data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
								  })
								| (components['schemas']['DashboardCreateForecastWeatherTile'] & {
										/** @description A list of data sources associated with the device tile. */
										data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
								  })
							)[];
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| components['schemas']['DashboardCreateDevicePage'];
			};
		};
		/** @description The payload schema used for creating a new page tile. */
		DashboardCreatePageTile: {
			content: {
				'application/json':
					| (components['schemas']['DashboardCreateDeviceTile'] & {
							/** @description A list of data sources associated with the device tile. */
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateTimeTile'] & {
							/** @description A list of data sources associated with the device tile. */
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateDayWeatherTile'] & {
							/** @description A list of data sources associated with the device tile. */
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateForecastWeatherTile'] & {
							/** @description A list of data sources associated with the device tile. */
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  });
			};
		};
		/** @description The payload schema used for creating a new tile data source. */
		DashboardCreatePageTileDataSource: {
			content: {
				'application/json': components['schemas']['DashboardCreateDeviceChannelDataSource'];
			};
		};
		/** @description The payload schema used for updatin a existing dashboard page. */
		DashboardUpdatePage: {
			content: {
				'application/json':
					| components['schemas']['DashboardUpdateCardsPage']
					| components['schemas']['DashboardUpdateDevicePage'];
			};
		};
		/** @description The payload schema used for updating a existing page tile. */
		DashboardUpdatePageTile: {
			content: {
				'application/json':
					| components['schemas']['DashboardUpdateDeviceTile']
					| components['schemas']['DashboardUpdateTimeTile'];
			};
		};
		/** @description The payload schema used for updating a existing tile data source. */
		DashboardUpdatePageTileDataSource: {
			content: {
				'application/json': components['schemas']['DashboardUpdateDeviceChannelDataSource'];
			};
		};
		/** @description Request body for updating audio configuration, allowing modifications to speaker and microphone settings. */
		ConfigUpdate: {
			content: {
				'application/json':
					| components['schemas']['ConfigUpdateAudio']
					| components['schemas']['ConfigUpdateDisplay']
					| components['schemas']['ConfigUpdateLanguage']
					| components['schemas']['ConfigUpdateWeather'];
			};
		};
		/** @description Represents property update operation for a third-party device. */
		DevicesThirdPartyDevicePropertyUpdateRequest: {
			content: {
				'application/json': components['schemas']['DevicesThirdPartyDevicePropertyUpdateRequest'];
			};
		};
		/** @description The payload schema used for creating a new page card. */
		DashboardCreatePageCard: {
			content: {
				'application/json': components['schemas']['DashboardCreateCard'] & {
					tiles?: (
						| (components['schemas']['DashboardCreateDeviceTile'] & {
								data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
						  })
						| (components['schemas']['DashboardCreateTimeTile'] & {
								data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
						  })
						| (components['schemas']['DashboardCreateDayWeatherTile'] & {
								data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
						  })
						| (components['schemas']['DashboardCreateForecastWeatherTile'] & {
								data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
						  })
					)[];
					data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
				};
			};
		};
		/** @description The payload schema used for creating a new page data source. */
		DashboardCreatePageDataSource: {
			content: {
				'application/json': components['schemas']['DashboardCreateDeviceChannelDataSource'];
			};
		};
		/** @description The payload schema used for creating a new card data source. */
		DashboardCreatePageCardDataSource: {
			content: {
				'application/json': components['schemas']['DashboardCreateDeviceChannelDataSource'];
			};
		};
		/** @description The payload schema used for creating a new card tile. */
		DashboardCreatePageCardTile: {
			content: {
				'application/json':
					| (components['schemas']['DashboardCreateDeviceTile'] & {
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateTimeTile'] & {
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateDayWeatherTile'] & {
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  })
					| (components['schemas']['DashboardCreateForecastWeatherTile'] & {
							data_source?: components['schemas']['DashboardCreateDeviceChannelDataSource'][];
					  });
			};
		};
		/** @description The payload schema used for updatin a existing page card. */
		DashboardUpdatePageCard: {
			content: {
				'application/json': components['schemas']['DashboardUpdateCard'];
			};
		};
		/** @description The payload schema used for updatin a existing card data source. */
		DashboardUpdatePageCardDataSource: {
			content: {
				'application/json': components['schemas']['DashboardUpdateDeviceChannelDataSource'];
			};
		};
		/** @description The payload schema used for updatin a existing card tile. */
		DashboardUpdatePageCardTile: {
			content: {
				'application/json':
					| components['schemas']['DashboardUpdateDeviceTile']
					| components['schemas']['DashboardUpdateTimeTile'];
			};
		};
		/** @description The payload schema used for updatin a existing tile data source. */
		DashboardUpdatePageCardTileDataSource: {
			content: {
				'application/json': components['schemas']['DashboardUpdateDeviceChannelDataSource'];
			};
		};
		/** @description The payload schema used for creating a new tile data source. */
		DashboardCreatePageCardTileDataSource: {
			content: {
				'application/json': components['schemas']['DashboardCreateDeviceChannelDataSource'];
			};
		};
		/** @description The payload schema used for updatin a existing page data source. */
		DashboardUpdatePageDataSource: {
			content: {
				'application/json': components['schemas']['DashboardUpdateDeviceChannelDataSource'];
			};
		};
		/** @description Schema for creating a new user. */
		UsersCreateUser: {
			content: {
				'application/json': components['schemas']['UsersCreateUser'];
			};
		};
		/** @description Schema for updating an existing user. Supports partial updates. */
		UsersUpdateUser: {
			content: {
				'application/json': components['schemas']['UsersUpdateUser'];
			};
		};
		/** @description Schema for user registration. */
		AuthRegister: {
			content: {
				'application/json': components['schemas']['AuthRegister'];
			};
		};
		/** @description Schema for user authentication. */
		AuthLogin: {
			content: {
				'application/json': components['schemas']['AuthLogin'];
			};
		};
		/** @description Checks whether an email address is already in use. */
		AuthCheckEmail: {
			content: {
				'application/json': components['schemas']['AuthCheckEmail'];
			};
		};
		/** @description Checks whether a username is already in use. */
		AuthCheckUsername: {
			content: {
				'application/json': components['schemas']['AuthCheckUsername'];
			};
		};
		/** @description Schema for user access token refresh. */
		AuthRefresh: {
			content: {
				'application/json': {
					/** @description JWT refresh access token */
					token: string;
				};
			};
		};
	};
	headers: never;
	pathItems: never;
}
export type SchemaDevicesDeviceBase = components['schemas']['DevicesDeviceBase'];
export type SchemaDevicesThirdPartyDevice = components['schemas']['DevicesThirdPartyDevice'];
export type SchemaDevicesCreateDeviceBase = components['schemas']['DevicesCreateDeviceBase'];
export type SchemaDevicesCreateThirdPartyDevice = components['schemas']['DevicesCreateThirdPartyDevice'];
export type SchemaDevicesCreateDeviceControl = components['schemas']['DevicesCreateDeviceControl'];
export type SchemaDevicesCreateChannel = components['schemas']['DevicesCreateChannel'];
export type SchemaDevicesCreateChannelControl = components['schemas']['DevicesCreateChannelControl'];
export type SchemaDevicesCreateChannelProperty = components['schemas']['DevicesCreateChannelProperty'];
export type SchemaDevicesUpdateDeviceBase = components['schemas']['DevicesUpdateDeviceBase'];
export type SchemaDevicesUpdateThirdPartyDevice = components['schemas']['DevicesUpdateThirdPartyDevice'];
export type SchemaDevicesUpdateChannel = components['schemas']['DevicesUpdateChannel'];
export type SchemaDevicesUpdateChannelProperty = components['schemas']['DevicesUpdateChannelProperty'];
export type SchemaDevicesDevice = components['schemas']['DevicesDevice'];
export type SchemaDevicesDeviceControl = components['schemas']['DevicesDeviceControl'];
export type SchemaDevicesChannel = components['schemas']['DevicesChannel'];
export type SchemaDevicesChannelControl = components['schemas']['DevicesChannelControl'];
export type SchemaDevicesChannelProperty = components['schemas']['DevicesChannelProperty'];
export type SchemaDevicesDeviceCategory = components['schemas']['DevicesDeviceCategory'];
export type SchemaDevicesChannelCategory = components['schemas']['DevicesChannelCategory'];
export type SchemaDevicesChannelPropertyCategory = components['schemas']['DevicesChannelPropertyCategory'];
export type SchemaDevicesThirdPartyDevicePropertyUpdateRequest =
	components['schemas']['DevicesThirdPartyDevicePropertyUpdateRequest'];
export type SchemaDevicesThirdPartyDevicePropertyUpdateResult =
	components['schemas']['DevicesThirdPartyDevicePropertyUpdateResult'];
export type SchemaDevicesThirdPartyErrorCode = components['schemas']['DevicesThirdPartyErrorCode'];
export type SchemaDashboardPageBase = components['schemas']['DashboardPageBase'];
export type SchemaDashboardCardsPage = components['schemas']['DashboardCardsPage'];
export type SchemaDashboardTilesPage = components['schemas']['DashboardTilesPage'];
export type SchemaDashboardDevicePage = components['schemas']['DashboardDevicePage'];
export type SchemaDashboardTileBase = components['schemas']['DashboardTileBase'];
export type SchemaDashboardDeviceTile = components['schemas']['DashboardDeviceTile'];
export type SchemaDashboardTimeTile = components['schemas']['DashboardTimeTile'];
export type SchemaDashboardDayWeatherTile = components['schemas']['DashboardDayWeatherTile'];
export type SchemaDashboardForecastWeatherTile = components['schemas']['DashboardForecastWeatherTile'];
export type SchemaDashboardDataSourceBase = components['schemas']['DashboardDataSourceBase'];
export type SchemaDashboardDeviceChannelDataSource = components['schemas']['DashboardDeviceChannelDataSource'];
export type SchemaDashboardCreatePageBase = components['schemas']['DashboardCreatePageBase'];
export type SchemaDashboardCreateCardsPage = components['schemas']['DashboardCreateCardsPage'];
export type SchemaDashboardCreateTilesPage = components['schemas']['DashboardCreateTilesPage'];
export type SchemaDashboardCreateDevicePage = components['schemas']['DashboardCreateDevicePage'];
export type SchemaDashboardCreateCard = components['schemas']['DashboardCreateCard'];
export type SchemaDashboardCreateTileBase = components['schemas']['DashboardCreateTileBase'];
export type SchemaDashboardCreateDeviceTile = components['schemas']['DashboardCreateDeviceTile'];
export type SchemaDashboardCreateTimeTile = components['schemas']['DashboardCreateTimeTile'];
export type SchemaDashboardCreateDayWeatherTile = components['schemas']['DashboardCreateDayWeatherTile'];
export type SchemaDashboardCreateForecastWeatherTile = components['schemas']['DashboardCreateForecastWeatherTile'];
export type SchemaDashboardCreateDataSourceBase = components['schemas']['DashboardCreateDataSourceBase'];
export type SchemaDashboardCreateDeviceChannelDataSource =
	components['schemas']['DashboardCreateDeviceChannelDataSource'];
export type SchemaDashboardUpdatePageBase = components['schemas']['DashboardUpdatePageBase'];
export type SchemaDashboardUpdateCardsPage = components['schemas']['DashboardUpdateCardsPage'];
export type SchemaDashboardUpdateTilesPage = components['schemas']['DashboardUpdateTilesPage'];
export type SchemaDashboardUpdateDevicePage = components['schemas']['DashboardUpdateDevicePage'];
export type SchemaDashboardUpdateCard = components['schemas']['DashboardUpdateCard'];
export type SchemaDashboardUpdateTileBase = components['schemas']['DashboardUpdateTileBase'];
export type SchemaDashboardUpdateDeviceTile = components['schemas']['DashboardUpdateDeviceTile'];
export type SchemaDashboardUpdateTimeTile = components['schemas']['DashboardUpdateTimeTile'];
export type SchemaDashboardUpdateDayWeatherTile = components['schemas']['DashboardUpdateDayWeatherTile'];
export type SchemaDashboardUpdateForecastWeatherTile = components['schemas']['DashboardUpdateForecastWeatherTile'];
export type SchemaDashboardUpdateDataSourceBase = components['schemas']['DashboardUpdateDataSourceBase'];
export type SchemaDashboardUpdateDeviceChannelDataSource =
	components['schemas']['DashboardUpdateDeviceChannelDataSource'];
export type SchemaDashboardPage = components['schemas']['DashboardPage'];
export type SchemaDashboardCard = components['schemas']['DashboardCard'];
export type SchemaDashboardTile = components['schemas']['DashboardTile'];
export type SchemaDashboardDataSource = components['schemas']['DashboardDataSource'];
export type SchemaConfigAudio = components['schemas']['ConfigAudio'];
export type SchemaConfigDisplay = components['schemas']['ConfigDisplay'];
export type SchemaConfigLanguage = components['schemas']['ConfigLanguage'];
export type SchemaConfigWeather = components['schemas']['ConfigWeather'];
export type SchemaConfigApp = components['schemas']['ConfigApp'];
export type SchemaConfigUpdateAudio = components['schemas']['ConfigUpdateAudio'];
export type SchemaConfigUpdateDisplay = components['schemas']['ConfigUpdateDisplay'];
export type SchemaConfigUpdateLanguage = components['schemas']['ConfigUpdateLanguage'];
export type SchemaConfigUpdateWeather = components['schemas']['ConfigUpdateWeather'];
export type SchemaSystemMemoryInfo = components['schemas']['SystemMemoryInfo'];
export type SchemaSystemStorageInfo = components['schemas']['SystemStorageInfo'];
export type SchemaSystemTemperatureInfo = components['schemas']['SystemTemperatureInfo'];
export type SchemaSystemOperatingSystemInfo = components['schemas']['SystemOperatingSystemInfo'];
export type SchemaSystemDisplayInfo = components['schemas']['SystemDisplayInfo'];
export type SchemaSystemNetworkStats = components['schemas']['SystemNetworkStats'];
export type SchemaSystemSystemInfo = components['schemas']['SystemSystemInfo'];
export type SchemaSystemThrottleStatus = components['schemas']['SystemThrottleStatus'];
export type SchemaUsersUser = components['schemas']['UsersUser'];
export type SchemaUsersCreateUser = components['schemas']['UsersCreateUser'];
export type SchemaUsersUpdateUser = components['schemas']['UsersUpdateUser'];
export type SchemaAuthRegister = components['schemas']['AuthRegister'];
export type SchemaAuthLogin = components['schemas']['AuthLogin'];
export type SchemaAuthCheckEmail = components['schemas']['AuthCheckEmail'];
export type SchemaAuthCheckUsername = components['schemas']['AuthCheckUsername'];
export type SchemaWeatherLocationWeather = components['schemas']['WeatherLocationWeather'];
export type SchemaWeatherGeolocation = components['schemas']['WeatherGeolocation'];
export type ResponseInternalServerError = components['responses']['InternalServerError'];
export type ResponseNotFoundError = components['responses']['NotFoundError'];
export type ResponseBadRequestError = components['responses']['BadRequestError'];
export type ResponseDevicesOneDevice = components['responses']['DevicesOneDevice'];
export type ResponseDevicesMultipleDevices = components['responses']['DevicesMultipleDevices'];
export type ResponseDevicesOneDeviceControl = components['responses']['DevicesOneDeviceControl'];
export type ResponseDevicesMultipleDeviceControls = components['responses']['DevicesMultipleDeviceControls'];
export type ResponseDevicesOneChannel = components['responses']['DevicesOneChannel'];
export type ResponseDevicesMultipleChannels = components['responses']['DevicesMultipleChannels'];
export type ResponseDevicesOneChannelControl = components['responses']['DevicesOneChannelControl'];
export type ResponseDevicesMultipleChannelControls = components['responses']['DevicesMultipleChannelControls'];
export type ResponseDevicesOneChannelProperty = components['responses']['DevicesOneChannelProperty'];
export type ResponseDevicesMultipleChannelProperties = components['responses']['DevicesMultipleChannelProperties'];
export type ResponseDevicesCreatedDevice = components['responses']['DevicesCreatedDevice'];
export type ResponseDevicesUpdateDevice = components['responses']['DevicesUpdateDevice'];
export type ResponseDevicesCreatedDeviceControl = components['responses']['DevicesCreatedDeviceControl'];
export type ResponseDevicesCreatedChannel = components['responses']['DevicesCreatedChannel'];
export type ResponseDevicesUpdatedChannel = components['responses']['DevicesUpdatedChannel'];
export type ResponseDevicesCreatedChannelControl = components['responses']['DevicesCreatedChannelControl'];
export type ResponseDevicesCreatedChannelProperty = components['responses']['DevicesCreatedChannelProperty'];
export type ResponseDevicesUpdatedChannelProperty = components['responses']['DevicesUpdatedChannelProperty'];
export type ResponseDashboardOnePage = components['responses']['DashboardOnePage'];
export type ResponseDashboardMultiplePages = components['responses']['DashboardMultiplePages'];
export type ResponseDashboardOneTile = components['responses']['DashboardOneTile'];
export type ResponseDashboardMultipleTiles = components['responses']['DashboardMultipleTiles'];
export type ResponseDashboardOneDataSource = components['responses']['DashboardOneDataSource'];
export type ResponseDashboardMultipleDataSources = components['responses']['DashboardMultipleDataSources'];
export type ResponseDashboardCreatedPage = components['responses']['DashboardCreatedPage'];
export type ResponseDashboardCreatedTile = components['responses']['DashboardCreatedTile'];
export type ResponseDashboardCreatedDataSource = components['responses']['DashboardCreatedDataSource'];
export type ResponseDashboardUpdatedPage = components['responses']['DashboardUpdatedPage'];
export type ResponseDashboardUpdatedTile = components['responses']['DashboardUpdatedTile'];
export type ResponseDashboardUpdatedDataSource = components['responses']['DashboardUpdatedDataSource'];
export type ResponseConfigApp = components['responses']['ConfigApp'];
export type ResponseConfigSection = components['responses']['ConfigSection'];
export type ResponseSystemSystemInfo = components['responses']['SystemSystemInfo'];
export type ResponseSystemSystemThrottling = components['responses']['SystemSystemThrottling'];
export type ResponseDevicesThirdPartyDevicePropertyUpdateResult =
	components['responses']['DevicesThirdPartyDevicePropertyUpdateResult'];
export type ResponseDashboardCreatedCard = components['responses']['DashboardCreatedCard'];
export type ResponseDashboardUpdatedCard = components['responses']['DashboardUpdatedCard'];
export type ResponseDashboardMultipleCards = components['responses']['DashboardMultipleCards'];
export type ResponseDashboardOneCard = components['responses']['DashboardOneCard'];
export type ResponseUsersCreatedUser = components['responses']['UsersCreatedUser'];
export type ResponseUsersUpdatedUser = components['responses']['UsersUpdatedUser'];
export type ResponseUsersMultipleUsers = components['responses']['UsersMultipleUsers'];
export type ResponseUsersOneUser = components['responses']['UsersOneUser'];
export type ResponseAuthLoggedIn = components['responses']['AuthLoggedIn'];
export type ResponseAuthCheck = components['responses']['AuthCheck'];
export type ResponseAuthRegisteredDisplay = components['responses']['AuthRegisteredDisplay'];
export type ResponseAuthProfile = components['responses']['AuthProfile'];
export type ResponseWeatherLocationWeather = components['responses']['WeatherLocationWeather'];
export type ResponseWeatherGeolocation = components['responses']['WeatherGeolocation'];
export type ResponseAuthRefresh = components['responses']['AuthRefresh'];
export type ParameterId = components['parameters']['id'];
export type ParameterDeviceId = components['parameters']['deviceId'];
export type ParameterChannelId = components['parameters']['channelId'];
export type ParameterPageId = components['parameters']['pageId'];
export type ParameterCardId = components['parameters']['cardId'];
export type ParameterTileId = components['parameters']['tileId'];
export type RequestBodyDevicesCreateDevice = components['requestBodies']['DevicesCreateDevice'];
export type RequestBodyDevicesCreateDeviceControl = components['requestBodies']['DevicesCreateDeviceControl'];
export type RequestBodyDevicesCreateChannel = components['requestBodies']['DevicesCreateChannel'];
export type RequestBodyDevicesCreateChannelControl = components['requestBodies']['DevicesCreateChannelControl'];
export type RequestBodyDevicesCreateChannelProperty = components['requestBodies']['DevicesCreateChannelProperty'];
export type RequestBodyDevicesUpdateDevice = components['requestBodies']['DevicesUpdateDevice'];
export type RequestBodyDevicesUpdateChannel = components['requestBodies']['DevicesUpdateChannel'];
export type RequestBodyDevicesUpdateChannelProperty = components['requestBodies']['DevicesUpdateChannelProperty'];
export type RequestBodyDevicesCreateDeviceChannel = components['requestBodies']['DevicesCreateDeviceChannel'];
export type RequestBodyDashboardCreatePage = components['requestBodies']['DashboardCreatePage'];
export type RequestBodyDashboardCreatePageTile = components['requestBodies']['DashboardCreatePageTile'];
export type RequestBodyDashboardCreatePageTileDataSource =
	components['requestBodies']['DashboardCreatePageTileDataSource'];
export type RequestBodyDashboardUpdatePage = components['requestBodies']['DashboardUpdatePage'];
export type RequestBodyDashboardUpdatePageTile = components['requestBodies']['DashboardUpdatePageTile'];
export type RequestBodyDashboardUpdatePageTileDataSource =
	components['requestBodies']['DashboardUpdatePageTileDataSource'];
export type RequestBodyConfigUpdate = components['requestBodies']['ConfigUpdate'];
export type RequestBodyDevicesThirdPartyDevicePropertyUpdateRequest =
	components['requestBodies']['DevicesThirdPartyDevicePropertyUpdateRequest'];
export type RequestBodyDashboardCreatePageCard = components['requestBodies']['DashboardCreatePageCard'];
export type RequestBodyDashboardCreatePageDataSource = components['requestBodies']['DashboardCreatePageDataSource'];
export type RequestBodyDashboardCreatePageCardDataSource =
	components['requestBodies']['DashboardCreatePageCardDataSource'];
export type RequestBodyDashboardCreatePageCardTile = components['requestBodies']['DashboardCreatePageCardTile'];
export type RequestBodyDashboardUpdatePageCard = components['requestBodies']['DashboardUpdatePageCard'];
export type RequestBodyDashboardUpdatePageCardDataSource =
	components['requestBodies']['DashboardUpdatePageCardDataSource'];
export type RequestBodyDashboardUpdatePageCardTile = components['requestBodies']['DashboardUpdatePageCardTile'];
export type RequestBodyDashboardUpdatePageCardTileDataSource =
	components['requestBodies']['DashboardUpdatePageCardTileDataSource'];
export type RequestBodyDashboardCreatePageCardTileDataSource =
	components['requestBodies']['DashboardCreatePageCardTileDataSource'];
export type RequestBodyDashboardUpdatePageDataSource = components['requestBodies']['DashboardUpdatePageDataSource'];
export type RequestBodyUsersCreateUser = components['requestBodies']['UsersCreateUser'];
export type RequestBodyUsersUpdateUser = components['requestBodies']['UsersUpdateUser'];
export type RequestBodyAuthRegister = components['requestBodies']['AuthRegister'];
export type RequestBodyAuthLogin = components['requestBodies']['AuthLogin'];
export type RequestBodyAuthCheckEmail = components['requestBodies']['AuthCheckEmail'];
export type RequestBodyAuthCheckUsername = components['requestBodies']['AuthCheckUsername'];
export type RequestBodyAuthRefresh = components['requestBodies']['AuthRefresh'];
export type $defs = Record<string, never>;
export interface operations {
	'create-auth-module-register': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['AuthRegister'];
		responses: {
			/** @description User registered successfully. No content returned. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-auth-module-register-display': {
		parameters: {
			query?: never;
			header: {
				/** @description A string identifying the requesting device. Required for registering display-only users. */
				'User-Agent': string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			201: components['responses']['AuthRegisteredDisplay'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-auth-module-login': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['AuthLogin'];
		responses: {
			200: components['responses']['AuthLoggedIn'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'validate-auth-module-check-username': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['AuthCheckUsername'];
		responses: {
			200: components['responses']['AuthCheck'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'validate-auth-module-check-email': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['AuthCheckEmail'];
		responses: {
			200: components['responses']['AuthCheck'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-auth-module-profile': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['AuthProfile'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-auth-module-refresh': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['AuthRefresh'];
		responses: {
			201: components['responses']['AuthRefresh'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-users-module-users': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['UsersMultipleUsers'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-users-module-user': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['UsersCreateUser'];
		responses: {
			201: components['responses']['UsersCreatedUser'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-users-module-user': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['UsersOneUser'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-users-module-user': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The user was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-users-module-user': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['UsersUpdateUser'];
		responses: {
			200: components['responses']['UsersUpdatedUser'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-devices': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleDevices'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-device': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateDevice'];
		responses: {
			201: components['responses']['DevicesCreatedDevice'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneDevice'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-device': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The device was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-devices-module-device': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesUpdateDevice'];
		responses: {
			200: components['responses']['DevicesUpdateDevice'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-controls': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleDeviceControls'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-device-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateDeviceControl'];
		responses: {
			201: components['responses']['DevicesCreatedDeviceControl'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneDeviceControl'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-device-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No The control was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-channels': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleChannels'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-device-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateDeviceChannel'];
		responses: {
			201: components['responses']['DevicesCreatedChannel'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneChannel'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-device-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The channel was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-devices-module-device-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesUpdateChannel'];
		responses: {
			200: components['responses']['DevicesUpdatedChannel'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-channel-controls': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleChannelControls'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-device-channel-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateChannelControl'];
		responses: {
			201: components['responses']['DevicesCreatedChannelControl'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-channel-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneChannelControl'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-device-channel-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The control was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-channel-properties': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleChannelProperties'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-device-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateChannelProperty'];
		responses: {
			201: components['responses']['DevicesCreatedChannelProperty'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-device-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneChannelProperty'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-device-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The property was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-devices-module-device-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the device to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				deviceId: components['parameters']['deviceId'];
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesUpdateChannelProperty'];
		responses: {
			200: components['responses']['DevicesUpdatedChannelProperty'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-channels': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleChannels'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-channel': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateChannel'];
		responses: {
			201: components['responses']['DevicesCreatedChannel'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneChannel'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The channel was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-devices-module-channel': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesUpdateChannel'];
		responses: {
			200: components['responses']['DevicesUpdatedChannel'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-channel-controls': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleChannelControls'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-channel-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateChannelControl'];
		responses: {
			201: components['responses']['DevicesCreatedChannelControl'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-channel-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneChannelControl'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-channel-control': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The control was successfully deleted. The response contains no additional content. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-channel-properties': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesMultipleChannelProperties'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-devices-module-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesCreateChannelProperty'];
		responses: {
			201: components['responses']['DevicesCreatedChannelProperty'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-devices-module-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DevicesOneChannelProperty'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-devices-module-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The property was successfully deleted. No response body is returned. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-devices-module-channel-property': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the channel to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				channelId: components['parameters']['channelId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DevicesUpdateChannelProperty'];
		responses: {
			200: components['responses']['DevicesUpdatedChannelProperty'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-pages': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultiplePages'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePage'];
		responses: {
			201: components['responses']['DashboardCreatedPage'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOnePage'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The page was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'patch-dashboard-module-page': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePage'];
		responses: {
			200: components['responses']['DashboardUpdatedPage'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-data-sources': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleDataSources'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageDataSource'];
		responses: {
			201: components['responses']['DashboardCreatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The data source was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageDataSource'];
		responses: {
			200: components['responses']['DashboardUpdatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-tiles': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleTiles'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageTile'];
		responses: {
			201: components['responses']['DashboardCreatedTile'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneTile'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The tile was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageTile'];
		responses: {
			200: components['responses']['DashboardUpdatedTile'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-tile-data-sources': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleDataSources'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageTileDataSource'];
		responses: {
			201: components['responses']['DashboardCreatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['BadRequestError'];
		};
	};
	'delete-dashboard-module-page-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The data source was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageTileDataSource'];
		responses: {
			200: components['responses']['DashboardUpdatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-cards': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleCards'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-card': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageCard'];
		responses: {
			201: components['responses']['DashboardCreatedCard'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-card': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneCard'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page-card': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The card was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-card': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageCard'];
		responses: {
			200: components['responses']['DashboardUpdatedCard'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-card-tiles': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleTiles'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-card-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageCardTile'];
		responses: {
			201: components['responses']['DashboardCreatedTile'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-card-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneTile'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page-card-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The tile was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-card-tile': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageCardTile'];
		responses: {
			200: components['responses']['DashboardUpdatedTile'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-car-tile-data-sources': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleDataSources'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-card-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageCardTileDataSource'];
		responses: {
			201: components['responses']['DashboardCreatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-card-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page-card-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The data source was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-card-tile-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the tile to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				tileId: components['parameters']['tileId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageCardTileDataSource'];
		responses: {
			200: components['responses']['DashboardUpdatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-car-data-sources': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardMultipleDataSources'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'create-dashboard-module-page-card-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardCreatePageCardDataSource'];
		responses: {
			201: components['responses']['DashboardCreatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-dashboard-module-page-card-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['DashboardOneDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'delete-dashboard-module-page-card-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The data source was successfully deleted. No content is returned in the response body. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-dashboard-module-page-card-data-source': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the page to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				pageId: components['parameters']['pageId'];
				/**
				 * @description The ID of the card to retrieve.
				 * @example 89a29104-184f-4b6f-9b37-5a70e24f8b44
				 */
				cardId: components['parameters']['cardId'];
				/**
				 * @description The ID of the resource to retrieve.
				 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
				 */
				id: components['parameters']['id'];
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['DashboardUpdatePageCardDataSource'];
		responses: {
			200: components['responses']['DashboardUpdatedDataSource'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-config-module-config': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['ConfigApp'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-config-module-config-section': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The configuration section name. */
				section: 'audio' | 'display' | 'language' | 'weather';
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['ConfigSection'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'update-config-module-config-section': {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The configuration section name. */
				section: 'audio' | 'display' | 'language' | 'weather';
			};
			cookie?: never;
		};
		requestBody?: components['requestBodies']['ConfigUpdate'];
		responses: {
			200: components['responses']['ConfigSection'];
			400: components['responses']['BadRequestError'];
			404: components['responses']['NotFoundError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-system-module-system-info': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['SystemSystemInfo'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-system-module-system-throttle': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['SystemSystemThrottling'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-weather-module-weather': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['WeatherLocationWeather'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-weather-module-geolocation': {
		parameters: {
			query: {
				/** @description The name of the city for which geographical coordinates are requested. */
				city: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['WeatherGeolocation'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'get-weather-module-geolocation-coordinates-to-city': {
		parameters: {
			query: {
				/** @description Latitude of the location for reverse geocoding. */
				lat: number;
				/** @description Longitude of the location for reverse geocoding. */
				lon: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: components['responses']['WeatherGeolocation'];
			400: components['responses']['BadRequestError'];
			500: components['responses']['InternalServerError'];
		};
	};
	'put-third-party-webhook': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Payload containing a list of properties to be updated on the third-party device. */
		requestBody?: components['requestBodies']['DevicesThirdPartyDevicePropertyUpdateRequest'];
		responses: {
			/** @description No Content. Indicates that the request was successfully processed and no further response is required. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Multi-Status. Indicates that some or all property updates failed. The response body will include detailed status information for each property. */
			207: components['responses']['DevicesThirdPartyDevicePropertyUpdateResult'];
			/** @description Bad Request. Indicates that the request was invalid, possibly due to missing or malformed data. */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal Server Error. Indicates a server-side error while processing the request. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
