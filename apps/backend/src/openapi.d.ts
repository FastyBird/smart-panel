/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth-module/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Endpoint to register a new user by providing username, password, and optional profile information.
         */
        post: operations["create-auth-module-register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-module/auth/register-display": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a display-only user
         * @description Endpoint to register a user with limited permissions, designed for display-only functionalities.
         */
        post: operations["create-auth-module-register-display"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-module/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Endpoint for user login, requiring username and password to generate an authentication token.
         */
        post: operations["create-auth-module-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-module/auth/check/username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check username availability
         * @description Endpoint to check whether a given username is already in use in the system.
         */
        post: operations["validate-auth-module-check-username"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-module/auth/check/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check email availability
         * @description Endpoint to check whether a given email address is already in use in the system.
         */
        post: operations["validate-auth-module-check-email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-module/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve authenticated user's profile
         * @description Endpoint to retrieve the profile information of the authenticated user, including username, email, and role.
         */
        get: operations["get-auth-module-profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-module/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh user access token
         * @description Endpoint for user access token refresh, requiring refresh token to generate an authentication token.
         */
        post: operations["update-auth-module-refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users-module/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of users
         * @description Fetch a paginated list of users, including details such as usernames, emails, and roles.
         */
        get: operations["get-users-module-users"];
        put?: never;
        /**
         * Create a new user
         * @description Register a new user by providing necessary details such as username, password, and optional profile information.
         */
        post: operations["create-users-module-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/users-module/users/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific user
         * @description Fetch detailed information about a specific user, including their profile, role, and associated data.
         */
        get: operations["get-users-module-user"];
        put?: never;
        post?: never;
        /**
         * Delete an existing user
         * @description Remove a user from the system. This action is irreversible.
         */
        delete: operations["delete-users-module-user"];
        options?: never;
        head?: never;
        /**
         * Update an existing user
         * @description Modify user details such as email, role, or profile information. Partial updates are supported.
         */
        patch: operations["update-users-module-user"];
        trace?: never;
    };
    "/devices-module/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of available devices
         * @description Fetches a list of all devices currently registered in the system. Each device includes its metadata (e.g., ID, name, and category), along with associated channels, controls, and properties.
         */
        get: operations["get-devices-module-devices"];
        put?: never;
        /**
         * Create a new device
         * @description Creates a new device resource in the system. The request requires device-specific attributes such as category and name. The response includes the full representation of the created device, including its associated channels, controls, and properties. Additionally, a Location header is provided with the URI of the newly created resource.
         */
        post: operations["create-devices-module-device"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific device
         * @description Fetches the details of a specific device using its unique ID. The response includes the device’s metadata (e.g., ID, name, and category), associated channels, controls, and properties.
         */
        get: operations["get-devices-module-device"];
        put?: never;
        post?: never;
        /**
         * Delete an existing device
         * @description Deletes a specific device identified by its unique ID from the system. This action is irreversible and will remove the device and its associated data from the system.
         */
        delete: operations["delete-devices-module-device"];
        options?: never;
        head?: never;
        /**
         * Update an existing device
         * @description Partially updates the attributes of an existing device identified by its unique ID. The update can modify metadata, such as the device’s name, category, or description, without requiring the full object.
         */
        patch: operations["update-devices-module-device"];
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/controls`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /**
         * Retrieve a list of all available device controls
         * @description Fetches a list of controls associated with a specific device. Controls represent actions that can be performed on the device, such as reboot or calibration.
         */
        get: operations["get-devices-module-device-controls"];
        put?: never;
        /**
         * Create a new control for a device
         * @description Creates a new control associated with a specific device. Controls represent actions or commands that can be executed on the device, such as reboot or factory reset.
         */
        post: operations["create-devices-module-device-control"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/controls/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific control for a device
         * @description Fetches detailed information about a specific control associated with a device using its unique ID. The response includes metadata such as the control’s name, ID, associated device, and timestamps.
         */
        get: operations["get-devices-module-device-control"];
        put?: never;
        post?: never;
        /**
         * Delete an existing control for a device
         * @description Deletes a specific control associated with a device using its unique ID. This action is irreversible and removes the control from the system.
         */
        delete: operations["delete-devices-module-device-control"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/channels`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /**
         * Retrieve a list of all available channels for a device
         * @description Fetches a list of channels associated with a specific device. Each channel includes metadata (e.g., ID, name, category), associated controls, and properties.
         */
        get: operations["get-devices-module-device-channels"];
        put?: never;
        /**
         * Create a new channel for a device
         * @description Creates a new channel associated with a specific device. The channel can have attributes such as name, category, description, and optionally controls and properties.
         */
        post: operations["create-devices-module-device-channel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/channels/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific channel for a device
         * @description Fetches detailed information about a specific channel associated with a device using its unique ID. The response includes metadata, category, associated controls, and properties for the channel.
         */
        get: operations["get-devices-module-device-channel"];
        put?: never;
        post?: never;
        /**
         * Delete a specific channel for a device
         * @description Deletes a specific channel associated with a device using its unique ID. This action is irreversible and will remove the channel and its associated data from the system.
         */
        delete: operations["delete-devices-module-device-channel"];
        options?: never;
        head?: never;
        /**
         * Update an existing channel for a device
         * @description Partially updates the attributes of a specific channel associated with a device using its unique ID. The update can modify metadata, such as the channel’s name, category, or description, without requiring the full object.
         */
        patch: operations["update-devices-module-device-channel"];
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/channels/${string}/controls`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /**
         * Retrieve a list of all available controls for a device’s channel
         * @description Fetches a list of controls associated with a specific channel of a device. Controls represent actions or commands that can be executed on the channel, such as reset or calibration.
         */
        get: operations["get-devices-module-device-channel-controls"];
        put?: never;
        /**
         * Create a new control for a specific device’s channel
         * @description Creates a new control associated with a specific device channel. Controls represent actions or commands that can be executed on the channel, such as reset or calibration.
         */
        post: operations["create-devices-module-device-channel-control"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/channels/${string}/controls/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific control for a device’s channel
         * @description Fetches detailed information about a specific control associated with a device channel using its unique ID. The response includes metadata such as the control’s name, ID, associated channel, and timestamps.
         */
        get: operations["get-devices-module-device-channel-control"];
        put?: never;
        post?: never;
        /**
         * Delete a specific control from a device’s channel
         * @description Deletes a specific control associated with a device channel using its unique ID. This action is irreversible and removes the control from the system.
         */
        delete: operations["delete-devices-module-device-channel-control"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/channels/${string}/properties`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /**
         * Retrieve a list of all available properties for a device’s channel
         * @description Fetches a list of properties associated with a specific channel of a device. Properties represent attributes or measurements related to the channel, such as thermostat mode, temperature, or humidity.
         */
        get: operations["get-devices-module-device-channel-properties"];
        put?: never;
        /**
         * Create a new property for a specific device’s channel
         * @description Creates a new property for a specific device channel. The property can include metadata such as category, permissions, data type, unit, and initial value. The response contains the full representation of the created property, including its unique identifier, associated channel, and metadata.
         */
        post: operations["create-devices-module-device-channel-property"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/devices/${string}/channels/${string}/properties/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific property for a device’s channel
         * @description Fetches detailed information about a specific property associated with a device channel using its unique ID. The response includes metadata such as the property’s name, category, value, and associated channel.
         */
        get: operations["get-devices-module-device-channel-property"];
        put?: never;
        post?: never;
        /**
         * Delete a specific property from a device’s channel.
         * @description Deletes a specific property associated with a device channel using its unique ID. This operation is irreversible and removes the property from the system.
         */
        delete: operations["delete-devices-module-device-channel-property"];
        options?: never;
        head?: never;
        /**
         * Update and existing property for a specific device’s channel
         * @description Partially updates the details of a specific property associated with a device channel. This operation allows modifications to attributes such as the property’s name, value, or metadata, while preserving its unique identifier and association with the channel.
         */
        patch: operations["update-devices-module-device-channel-property"];
        trace?: never;
    };
    "/devices-module/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of available channels
         * @description Fetches a list of channels in the system. The response includes metadata for each channel, such as its ID, name, category, associated device, controls, and properties.
         */
        get: operations["get-devices-module-channels"];
        put?: never;
        /**
         * Create a new channel
         * @description Creates a new channel in the system. The channel can have attributes such as name, category, description, and an associated device. Optionally, controls and properties can also be defined during creation.
         */
        post: operations["create-devices-module-channel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/channels/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific channel
         * @description Fetches detailed information about a specific channel using its unique ID. The response includes metadata, associated device information, controls, and properties for the channel.
         */
        get: operations["get-devices-module-channel"];
        put?: never;
        post?: never;
        /**
         * Delete an existing channel
         * @description Deletes a specific channel using its unique ID. This action is irreversible and removes the channel and all associated data from the system.
         */
        delete: operations["delete-devices-module-channel"];
        options?: never;
        head?: never;
        /**
         * Update an existing channel
         * @description Partially updates the attributes of a specific channel using its unique ID. This allows modifications to properties such as the channel’s name, category, description, or associated controls and properties.
         */
        patch: operations["update-devices-module-channel"];
        trace?: never;
    };
    [path: `/devices-module/channels/${string}/controls`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /**
         * Retrieve a list of all available channel controls
         * @description Fetches a list of all controls available for channels in the system. Each control represents an actionable operation associated with a channel. The response includes details such as the control’s ID, name, associated channel, and timestamps.
         */
        get: operations["get-devices-module-channel-controls"];
        put?: never;
        /**
         * Create a new control for a channel
         * @description Allows the creation of a new control for a specific channel. A control represents an actionable operation or command associated with the channel. The response includes the complete details of the newly created control, including its ID, name, associated channel, and metadata.
         */
        post: operations["create-devices-module-channel-control"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/channels/${string}/controls/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific control for a channel
         * @description Fetches the details of a specific control associated with a channel. The response includes the control’s unique identifier, name, associated channel, and metadata such as creation and update timestamps.
         */
        get: operations["get-devices-module-channel-control"];
        put?: never;
        post?: never;
        /**
         * Delete an existing control for a channel
         * @description Deletes an existing control associated with a specific channel. This operation is irreversible and will remove the control permanently from the system.
         */
        delete: operations["delete-devices-module-channel-control"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/channels/${string}/properties`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /**
         * Retrieve a list of all available channel properties
         * @description Fetches all properties associated with a specific channel. The response includes metadata for each property, such as category, name, permissions, data type, unit, and current value, along with the associated channel’s unique identifier.
         */
        get: operations["get-devices-module-channel-properties"];
        put?: never;
        /**
         * Create a new property for a channel
         * @description Creates a new property for a channel, such as thermostat mode or brightness level. The property includes metadata like category, permissions, data type, unit, and initial value. The response provides the full representation of the created property along with a Location header containing the URI for the new property resource.
         */
        post: operations["create-devices-module-channel-property"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/devices-module/channels/${string}/properties/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific property for a channel
         * @description Fetches detailed information about a specific property associated with a channel. The response includes metadata such as the property’s unique ID, category, permissions, data type, unit, and current value, along with timestamps and the associated channel’s identifier.
         */
        get: operations["get-devices-module-channel-property"];
        put?: never;
        post?: never;
        /**
         * Delete an existing property for a channel
         * @description Deletes an existing property associated with a channel. This operation is irreversible and permanently removes the property from the system.
         */
        delete: operations["delete-devices-module-channel-property"];
        options?: never;
        head?: never;
        /**
         * Update an existing property for a channel
         * @description Allows partial updates to an existing property associated with a channel. You can update specific attributes such as the name, category, permissions, data type, unit, or current value. The response includes the updated representation of the property.
         */
        patch: operations["update-devices-module-channel-property"];
        trace?: never;
    };
    "/dashboard-module/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of available pages
         * @description Fetches a list of all pages currently registered in the system. Each pages includes its metadata (e.g., ID, title), along with associated tiles and data sources.
         */
        get: operations["get-dashboard-module-pages"];
        put?: never;
        /**
         * Create a new page
         * @description Creates a new page resource in the system. The request requires page-specific attributes such as title. The response includes the full representation of the created page, including its associated tiles and data sources. Additionally, a Location header is provided with the URI of the newly created resource.
         */
        post: operations["create-dashboard-module-page"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/dashboard-module/pages/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific page
         * @description Fetches the details of a specific page using its unique ID. The response includes the page’s metadata (e.g., ID and title), associated tiles and data sources.
         */
        get: operations["get-dashboard-module-page"];
        put?: never;
        post?: never;
        /**
         * Delete an existing page
         * @description Deletes a specific page identified by its unique ID from the system. This action is irreversible and will remove the page and its associated data from the system.
         */
        delete: operations["delete-dashboard-module-page"];
        options?: never;
        head?: never;
        /**
         * Update an existing page
         * @description Partially updates the attributes of an existing page identified by its unique ID. The update can modify metadata, such as the page’s title, without requiring the full object.
         */
        patch: operations["update-dashboard-module-page"];
        trace?: never;
    };
    "/dashboard-module/tiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all available tiles
         * @description Fetches a list of tiles. Tiles represent widgets that can be used for displaying data, such as device state, actual clock.
         */
        get: operations["get-dashboard-module-tiles"];
        put?: never;
        /**
         * Create a new tile
         * @description Creates a new tile. Tiles represent widgets that can display device state or actual clock.
         */
        post: operations["create-dashboard-module-tile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/dashboard-module/tiles/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific tile
         * @description Fetches detailed information about a specific tile using its unique ID. The response includes metadata such as the tiles’s position, ID, associated page, and timestamps.
         */
        get: operations["get-dashboard-module-tile"];
        put?: never;
        post?: never;
        /**
         * Delete a specific tile
         * @description Deletes a specific tile using its unique ID. This action is irreversible and will remove the tile and its associated data from the system.
         */
        delete: operations["delete-dashboard-module-tile"];
        options?: never;
        head?: never;
        /**
         * Update an existing tile
         * @description Partially updates the attributes of a specific tile using its unique ID. The update can modify metadata, such as the tile’s position or size, without requiring the full object.
         */
        patch: operations["update-dashboard-module-tile"];
        trace?: never;
    };
    "/dashboard-module/data-source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all available data sources
         * @description Fetches a list of data sources. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.
         */
        get: operations["get-dashboard-module-data-sources"];
        put?: never;
        /**
         * Create a new data source
         * @description Creates a new data source. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.
         */
        post: operations["create-dashboard-module-data-source"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/dashboard-module/data-source/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific data source
         * @description Fetches detailed information about a specific data source using its unique ID. The response includes metadata such as the data source’s associated device, channel, value, and associated tile.
         */
        get: operations["get-dashboard-module-data-source"];
        put?: never;
        post?: never;
        /**
         * Delete a specific data source.
         * @description Deletes a specific data source using its unique ID. This operation is irreversible and removes the property from the system.
         */
        delete: operations["delete-dashboard-module-data-source"];
        options?: never;
        head?: never;
        /**
         * Update and existing data source
         * @description Partially updates the details of a specific data source. This operation allows modifications to attributes such as the data source’s associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.
         */
        patch: operations["update-dashboard-module-data-source"];
        trace?: never;
    };
    "/config-module/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve full configuration
         * @description Retrieves the complete smart panel configuration, including audio, display, language, and weather settings.
         */
        get: operations["get-config-module-config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/config-module/config/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The configuration section name. */
                section: "audio" | "display" | "language" | "weather";
            };
            cookie?: never;
        };
        /**
         * Retrieve specific configuration section
         * @description Retrieves a specific configuration section, such as audio, display, language, or weather.
         */
        get: operations["get-config-module-config-section"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update specific configuration section
         * @description Updates a specific configuration section, such as audio, display, language, or weather. Only the provided fields will be modified.
         */
        patch: operations["update-config-module-config-section"];
        trace?: never;
    };
    [path: `/config-module/config/plugin/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The configuration plugin name. */
                plugin: string;
            };
            cookie?: never;
        };
        /**
         * Retrieve specific plugin configuration
         * @description Retrieves a specific plugin configuration.
         */
        get: operations["get-config-module-config-plugin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update specific plugin configuration
         * @description Updates a specific plugin configuration. Only the provided fields will be modified.
         */
        patch: operations["update-config-module-config-plugin"];
        trace?: never;
    };
    "/system-module/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve system information
         * @description Fetches detailed system information, including CPU load, memory usage, storage details, temperature readings, OS version, network statistics, and display settings.
         */
        get: operations["get-system-module-system-info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system-module/system/throttle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve system throttling status
         * @description Checks the system’s throttling status to determine if any CPU, power, or thermal restrictions have been applied.
         */
        get: operations["get-system-module-system-throttle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/weather-module/weather": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve weather conditions
         * @description Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details for a specified location.
         */
        get: operations["get-weather-module-weather"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/weather-module/weather/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve current day conditions
         * @description Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details for a current day and for a specified location.
         */
        get: operations["get-weather-module-current"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/weather-module/weather/forecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve forecast conditions
         * @description Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details forecast for a specified location.
         */
        get: operations["get-weather-module-forecast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/weather-module/geolocation/city-to-coordinates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Convert city name to geographical coordinates
         * @description Retrieves latitude and longitude based on a given city name. Useful for mapping and location-based services.
         */
        get: operations["get-weather-module-geolocation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/weather-module/geolocation/coordinates-to-city": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Convert coordinates to city name
         * @description Returns the city name based on provided latitude and longitude values. Useful for reverse geocoding applications.
         */
        get: operations["get-weather-module-geolocation-coordinates-to-city"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/third-party/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Send command to third-party device
         * @description This endpoint is used to send property update commands to a third-party device. The backend calls this webhook with one or more property updates. The third-party device should process the updates and return a status response.
         *
         *     **The actual webhook path must be defined on the third-party device level**, and the backend must be configured accordingly to call the correct endpoint.
         */
        put: operations["put-third-party-webhook"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugins/devices-home-assistant-plugin/discovered-devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all available Home Assistant Devices
         * @description Retrieves a list of devices discovered from the connected Home Assistant instance. Each device includes metadata, associated entities, and their current states.
         */
        get: operations["get-devices-home-assistant-plugin-devices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/plugins/devices-home-assistant-plugin/discovered-devices/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Home Assisant discovered device to retrieve. */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific Home Assistant Device
         * @description Fetches details of a specific Home Assistant device by its Home Assistant ID. The response includes associated entities and their current states.
         */
        get: operations["get-devices-home-assistant-plugin-device"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugins/devices-home-assistant-plugin/states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all available Home Assistant States
         * @description Fetches the current state information for all known entities from the connected Home Assistant instance. Each state includes metadata such as attributes and timestamps.
         */
        get: operations["get-devices-home-assistant-plugin-states"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/plugins/devices-home-assistant-plugin/states/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Home Assisant entity to retrieve state. */
                entityId: string;
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific Home Assistant State
         * @description Fetches the current state and attributes for a single entity by its Home Assistant entity ID. This includes state value and timestamp details.
         */
        get: operations["get-devices-home-assistant-plugin-state"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plugins/pages-cards-plugin/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all available page cards
         * @description Fetches a list of cards associated with a specific page. Cards represent widgets that can be used for displaying data, such as device state, actual clock.
         */
        get: operations["get-pages-cards-plugin-page-cards"];
        put?: never;
        /**
         * Create a new card for a page
         * @description Creates a new card associated with a specific page. Cards represent widgets that can display device state or actual clock.
         */
        post: operations["create-pages-cards-plugin-page-card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/plugins/pages-cards-plugin/cards/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /**
         * Retrieve details of a specific card for a page
         * @description Fetches detailed information about a specific card associated with a page using its unique ID. The response includes metadata such as the card’s position, ID, associated page, and tiles.
         */
        get: operations["get-pages-cards-plugin-page-card"];
        put?: never;
        post?: never;
        /**
         * Delete a specific card for a page
         * @description Deletes a specific card associated with a page using its unique ID. This action is irreversible and will remove the card and its associated data from the system.
         */
        delete: operations["delete-pages-cards-plugin-page-card"];
        options?: never;
        head?: never;
        /**
         * Update an existing card for a page
         * @description Partially updates the attributes of a specific card associated with a page using its unique ID. The update can modify metadata, such as the card’s position or title, without requiring the full object.
         */
        patch: operations["update-pages-cards-plugin-page-card"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Register
         * @description Schema for user registration.
         */
        AuthModuleRegister: {
            /**
             * @description Unique identifier for the user.
             * @example johndoe
             */
            username: string;
            /**
             * Format: password
             * @description User's password. Must be at least 6 characters long.
             * @example superstrongpassword
             */
            password: string;
            /**
             * Format: email
             * @description Optional user's email address.
             * @example john@doe.com
             */
            email?: string;
            /**
             * @description Optional user's first name.
             * @example John
             */
            first_name?: string;
            /**
             * @description Optional user's last name.
             * @example Doe
             */
            last_name?: string;
        };
        /**
         * Check Username
         * @description Schema for checking username availability.
         */
        AuthModuleCheckUsername: {
            /**
             * @description The username to check for availability.
             * @example johndoe
             */
            username: string;
        };
        /**
         * Check Email
         * @description Schema for checking email availability.
         */
        AuthModuleCheckEmail: {
            /**
             * Format: email
             * @description The email address to check for availability.
             * @example john@doe.com
             */
            email: string;
        };
        /**
         * Login
         * @description Schema for user authentication.
         */
        AuthModuleLogin: {
            /**
             * @description The username of the user.
             * @example johndoe
             */
            username: string;
            /**
             * Format: password
             * @description The user's password.
             * @example superstrongpassword
             */
            password: string;
        };
        /**
         * Refresh Access Token
         * @description Schema for refreshing user access token.
         */
        AuthModuleRefreshToken: {
            /**
             * @description JWT refresh access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw
             */
            token: string;
        };
        /**
         * Token Pair
         * @description Schema for access and refresh tokens for an authenticated session.
         */
        AuthModuleTokenPair: {
            /**
             * @description The JWT access token for authenticated sessions.
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
             */
            access_token: string;
            /**
             * @description The JWT refresh token for authenticated sessions.
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw
             */
            refresh_token: string;
            /**
             * @description Token type
             * @default Bearer
             * @example Bearer
             */
            type: string;
            /**
             * Format: date-time
             * @description The JWT access token expiration date.
             * @example 2025-01-18T12:00:00Z
             */
            expiration: string;
        };
        /**
         * Validation
         * @description Schema for validation result.
         */
        AuthModuleValidation: {
            /**
             * @description Indicates whether the provided validation field is valid.
             * @example true
             */
            valid: boolean;
        };
        /**
         * Display Secret
         * @description Schema for display registration result.
         */
        AuthModuleDisplaySecret: {
            /**
             * @description Display account secret
             * @example IwMj3jfHdRVIxCck6DBgcQi3zXDNAHUu
             */
            secret: string;
        };
        /**
         * Register Request
         * @description Request schema for user registration.
         */
        AuthModuleReqRegister: {
            data: components["schemas"]["AuthModuleRegister"];
        };
        /**
         * Check Username Request
         * @description Request schema for username validation.
         */
        AuthModuleReqCheckUsername: {
            data: components["schemas"]["AuthModuleCheckUsername"];
        };
        /**
         * Check Email Request
         * @description Request schema for email validation.
         */
        AuthModuleReqCheckEmail: {
            data: components["schemas"]["AuthModuleCheckEmail"];
        };
        /**
         * Login Request
         * @description Request schema for user authentication.
         */
        AuthModuleReqLogin: {
            data: components["schemas"]["AuthModuleLogin"];
        };
        /**
         * Refresh Access Token Request
         * @description Request schema for user access token refresh.
         */
        AuthModuleReqRefreshToken: {
            data: components["schemas"]["AuthModuleRefreshToken"];
        };
        /**
         * Validation Response
         * @description Response schema indicating the result of a username validation request.
         */
        AuthModuleResCheckUsername: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/auth-module/auth/check/username
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example POST
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["AuthModuleValidation"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Validation Response
         * @description Response schema indicating the result of a email validation request.
         */
        AuthModuleResCheckEmail: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/auth-module/auth/check/email
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example POST
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["AuthModuleValidation"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Login Response
         * @description Response schema returned after successful user authentication.
         */
        AuthModuleResLogin: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/auth-module/auth/login
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example POST
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["AuthModuleTokenPair"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Refresh Access Token Response
         * @description Response schema returned after successful user access token refresh.
         */
        AuthModuleResRefresh: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/auth-module/auth/refresh
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example POST
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["AuthModuleTokenPair"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Register Display Response
         * @description Response returned after successfully registering a display.
         */
        AuthModuleResRegisterDisplay: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/auth-module/auth/register-display
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example POST
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["AuthModuleDisplaySecret"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Profile Response
         * @description Response schema containing details about the authenticated user's profile.
         */
        AuthModuleResProfile: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/auth-module/auth/profile
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["UsersModuleUser"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * User
         * @description Schema for a registered user within the system.
         */
        UsersModuleUser: {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             * @example f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6
             */
            id: string;
            /**
             * @description Unique username of the user.
             * @example johndoe
             */
            username: string;
            /**
             * @description First name of the user.
             * @example John
             */
            first_name: string | null;
            /**
             * @description Last name of the user.
             * @example Doe
             */
            last_name: string | null;
            /**
             * Format: email
             * @description Email address of the user.
             * @example john@doe.com
             */
            email: string | null;
            /**
             * @description Indicates whether the user is hidden from general visibility.
             * @default false
             */
            is_hidden: boolean;
            /**
             * @description User role: 'owner' has full access, 'admin' can manage users, 'user' has limited access, 'display' is read-only.
             * @default user
             * @enum {string}
             */
            role: "owner" | "admin" | "user" | "display";
            /**
             * Format: date-time
             * @description The timestamp when the user was created.
             * @example 2025-01-25T12:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the user was updated.
             * @default null
             * @example 2025-01-25T12:00:00Z
             */
            updated_at: string | null;
        };
        /**
         * Create User
         * @description Schema for creating a new user account.
         */
        UsersModuleCreateUser: {
            /**
             * Format: uuid
             * @description Unique identifier for the user.
             * @example f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6
             */
            id?: string;
            /**
             * @description Unique username for the new user.
             * @example johndoe
             */
            username: string;
            /**
             * Format: password
             * @description Password for the new user. Must be at least 6 characters long.
             * @example superstrongpassword
             */
            password: string;
            /**
             * Format: email
             * @description Optional email address for the user.
             * @example john@doe.com
             */
            email?: string | null;
            /**
             * @description Optional first name of the user.
             * @example John
             */
            first_name?: string | null;
            /**
             * @description Optional last name of the user.
             * @example Doe
             */
            last_name?: string | null;
            /**
             * @description Role of the user. Defaults to 'user' if not provided.
             * @default user
             * @example user
             * @enum {string}
             */
            role?: "owner" | "admin" | "user" | "display";
        };
        /**
         * Update User
         * @description Schema for modifying an existing user account.
         */
        UsersModuleUpdateUser: {
            /**
             * Format: password
             * @description New password for the user.
             * @example superstrongpassword
             */
            password?: string;
            /**
             * Format: email
             * @description Updated email address of the user.
             * @example john@doe.com
             */
            email?: string | null;
            /**
             * @description Updated first name of the user.
             * @example John
             */
            first_name?: string | null;
            /**
             * @description Updated last name of the user.
             * @example Doe
             */
            last_name?: string | null;
            /**
             * @description Updated role of the user.
             * @example user
             * @enum {string}
             */
            role?: "owner" | "admin" | "user" | "display";
        };
        /**
         * Create User Request
         * @description Request schema for creating new user.
         */
        UsersModuleReqCreateUser: {
            data: components["schemas"]["UsersModuleCreateUser"];
        };
        /**
         * Update User Request
         * @description Request schema for updating an existing user.
         */
        UsersModuleReqUpdateUser: {
            data: components["schemas"]["UsersModuleUpdateUser"];
        };
        /**
         * User Response
         * @description Response schema containing a single user.
         */
        UsersModuleResUser: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/users-module/users/f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["UsersModuleUser"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * User Response
         * @description Response schema containing a list of users.
         */
        UsersModuleResUsers: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/users-module/users
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["UsersModuleUser"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Audio
         * @description Schema for audio configuration, including speaker and microphone controls.
         */
        ConfigModuleAudio: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "audio";
            /**
             * @description Indicates whether the speaker is enabled.
             * @default false
             */
            speaker: boolean;
            /**
             * Format: int32
             * @description The volume level of the speaker, ranging from 0 to 100.
             * @default 0
             * @example 50
             */
            speaker_volume: number;
            /**
             * @description Indicates whether the microphone is enabled.
             * @default false
             */
            microphone: boolean;
            /**
             * Format: int32
             * @description The volume level of the microphone, ranging from 0 to 100.
             * @default 0
             * @example 50
             */
            microphone_volume: number;
        };
        /**
         * Display
         * @description Schema for display configuration, including brightness, dark mode, and screen lock behavior.
         */
        ConfigModuleDisplay: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "display";
            /**
             * @description Enables dark mode for the display.
             * @default false
             */
            dark_mode: boolean;
            /**
             * Format: int32
             * @description Sets the brightness level of the display (0-100).
             * @default 0
             * @example 50
             */
            brightness: number;
            /**
             * Format: int32
             * @description Time in seconds before the screen automatically locks.
             * @default 30
             * @example 30
             */
            screen_lock_duration: number;
            /**
             * @description Enables the screen saver when the device is idle. Value is in seconds.
             * @default true
             */
            screen_saver: boolean;
        };
        /**
         * Language
         * @description Schema for language configuration, time zone, and time format on the smart panel.
         */
        ConfigModuleLanguage: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "language";
            /**
             * @description Defines the language and region format. Uses standard locale codes (ISO 639-1).
             * @default en_US
             * @enum {string}
             */
            language: "en_US" | "cs_CZ";
            /**
             * @description Sets the time format for displaying time on the panel.
             * @default Europe/Prague
             * @example Europe/Prague
             */
            timezone: string;
            /**
             * @description Defines the time zone of the smart panel. Uses the IANA time zone format.
             * @default 24h
             * @enum {string}
             */
            time_format: "12h" | "24h";
        };
        /**
         * Weather
         * @description Schema for weather configuration, including location, temperature unit, and API integration.
         */
        ConfigModuleWeather: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "weather";
            /**
             * @description The location for weather updates, specified as a city name or coordinates (latitude, longitude).
             * @example Prague
             */
            location: string | null;
            /**
             * @description Specifies the method used to determine the location for weather updates.
             * @default city_name
             * @example city_name
             * @enum {string}
             */
            location_type: "lat_lon" | "city_name" | "city_id" | "zip_code";
            /**
             * @description Defines the temperature unit for weather data.
             * @default celsius
             * @example celsius
             * @enum {string}
             */
            unit: "celsius" | "fahrenheit";
            /** @description API key for OpenWeatherMap. Required only if using OpenWeatherMap as a data source. */
            open_weather_api_key: string | null;
        };
        /**
         * Plugin
         * @description Schema for plugin configuration.
         */
        ConfigModulePlugin: {
            /**
             * @description Configuration plugin type
             * @default custom-plugin
             */
            type: string;
        };
        /**
         * Configuration
         * @description Schema for the complete configuration settings for the smart panel, including audio, display, language, and weather settings.
         */
        ConfigModuleApp: {
            /** @description Audio configuration settings, including speaker and microphone options. */
            audio: components["schemas"]["ConfigModuleAudio"];
            /** @description Display settings, including brightness, dark mode, and screen lock duration. */
            display: components["schemas"]["ConfigModuleDisplay"];
            /** @description Language and localization settings, including time zone and time format. */
            language: components["schemas"]["ConfigModuleLanguage"];
            /** @description Weather settings, including location, unit preferences, and API integration. */
            weather: components["schemas"]["ConfigModuleWeather"];
            plugins: components["schemas"]["ConfigModulePlugin"][];
        };
        /**
         * Update Audio
         * @description Schema for partial update settings for audio configuration, allowing changes to speaker and microphone settings.
         */
        ConfigModuleUpdateAudio: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "audio";
            /**
             * @description Enables or disables the speaker.
             * @example true
             */
            speaker?: boolean;
            /**
             * Format: int32
             * @description Sets the speaker volume (0-100).
             * @example 34
             */
            speaker_volume?: number;
            /**
             * @description Enables or disables the microphone.
             * @example true
             */
            microphone?: boolean;
            /**
             * Format: int32
             * @description Sets the microphone volume (0-100).
             * @example 55
             */
            microphone_volume?: number;
        };
        /**
         * Update Display
         * @description Schema for partial update settings for display configuration, allowing changes to brightness, dark mode, and screen lock duration.
         */
        ConfigModuleUpdateDisplay: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "display";
            /**
             * @description Enables or disables dark mode.
             * @example false
             */
            dark_mode?: boolean;
            /**
             * Format: int32
             * @description Sets the brightness level (0-100).
             * @example 55
             */
            brightness?: number;
            /**
             * Format: int32
             * @description Time in seconds before the screen automatically locks.
             * @example 120
             */
            screen_lock_duration?: number;
            /**
             * @description Enables or disables the screen saver.
             * @example true
             */
            screen_saver?: boolean;
        };
        /**
         * Update Language
         * @description Schema for partial update settings for language and localization configuration.
         */
        ConfigModuleUpdateLanguage: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "language";
            /**
             * @description Defines the language and region format.
             * @example en_US
             * @enum {string}
             */
            language?: "en_US" | "cs_CZ";
            /**
             * @description Defines the time zone using the IANA time zone format.
             * @example Europe/Prague
             */
            timezone?: string;
            /**
             * @description Sets the time format (12-hour or 24-hour).
             * @example 24h
             * @enum {string}
             */
            time_format?: "12h" | "24h";
        };
        /**
         * Update Weather
         * @description Schema for partial update settings for weather configuration, allowing changes to location, temperature unit, and API key.
         */
        ConfigModuleUpdateWeather: {
            /**
             * @description Configuration section type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "weather";
            /**
             * @description The location for weather updates, specified as a city name or coordinates (latitude, longitude).
             * @example Prague
             */
            location?: string | null;
            /**
             * @description Specifies the method used to determine the location for weather updates.
             * @example city_name
             * @enum {string}
             */
            location_type?: "lat_lon" | "city_name" | "city_id" | "zip_code";
            /**
             * @description Defines the temperature unit for weather data.
             * @example celsius
             * @enum {string}
             */
            unit?: "celsius" | "fahrenheit";
            /** @description API key for OpenWeatherMap. Required only if using OpenWeatherMap as a data source. */
            open_weather_api_key?: string | null;
        };
        /**
         * Update Plugin
         * @description Schema for partial update settings for plugin configuration.
         */
        ConfigModuleUpdatePlugin: {
            /** @description Configuration plugin type */
            type: string;
        };
        /**
         * Update Section
         * @description Request schema for partial updating a configuration section.
         */
        ConfigModuleReqUpdateSection: {
            data: components["schemas"]["ConfigModuleUpdateAudio"] | components["schemas"]["ConfigModuleUpdateDisplay"] | components["schemas"]["ConfigModuleUpdateLanguage"] | components["schemas"]["ConfigModuleUpdateWeather"];
        };
        /**
         * Update Plugin
         * @description Request schema for partial updating a configuration plugin.
         */
        ConfigModuleReqUpdatePlugin: {
            data: components["schemas"]["ConfigModuleUpdatePlugin"];
        };
        /**
         * Configuration Response
         * @description Response schema containing complete configuration settings for the smart panel, including audio, display, language, and weather settings.
         */
        ConfigModuleResApp: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/config-module/config
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The configuration data for the smart panel, containing various settings. */
            data: components["schemas"]["ConfigModuleApp"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Configuration Section Response
         * @description Response containing a specific section of the smart panel configuration, such as audio, display, language, or weather settings.
         */
        ConfigModuleResSection: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/config-module/config/audio
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            data: components["schemas"]["ConfigModuleAudio"] | components["schemas"]["ConfigModuleDisplay"] | components["schemas"]["ConfigModuleLanguage"] | components["schemas"]["ConfigModuleWeather"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Configuration Plugin Response
         * @description Response containing a specific plugin of the smart panel configuration, like custom-plugin.
         */
        ConfigModuleResPlugin: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/config-module/config/plugin/custom-plugin
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            data: components["schemas"]["ConfigModulePlugin"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device
         * @description Represents the core attributes of a device, including its unique identifier, name, and category. This model forms the foundation for more detailed device representations, such as those including related components (e.g., channels, properties, or controls).
         */
        DevicesModuleDevice: {
            /**
             * Format: uuid
             * @description System-generated unique identifier for the device.
             * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            readonly id: string;
            /**
             * @description Specifies the type of device.
             * @example third-party
             */
            readonly type: string;
            /** @description Type of the device, defining its purpose or category (e.g., thermostat, lighting). */
            readonly category: components["schemas"]["DevicesModuleDeviceCategory"];
            /**
             * @description Human-readable name of the device.
             * @example Thermostat
             */
            name: string;
            /**
             * @description Optional detailed description of the device.
             * @default null
             * @example Living room thermostat
             */
            description: string | null;
            /** @description A list of controls associated with the device. Controls represent actions or commands that can be executed on the device. */
            controls: components["schemas"]["DevicesModuleDeviceControl"][];
            /** @description A list of channels associated with the device. Each channel represents a functional unit of the device, such as a sensor, actuator, or logical grouping of properties. */
            channels: components["schemas"]["DevicesModuleChannel"][];
            /**
             * Format: date-time
             * @description Timestamp indicating when the device was created.
             * @example 2024-12-11T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description Timestamp indicating when the device was last updated, if applicable.
             * @default null
             * @example 2024-12-11T12:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Device Control
         * @description A Device control is an action that can be executed at the device level. It provides operational commands like restarting a device or updating its firmware.
         */
        DevicesModuleDeviceControl: {
            /**
             * Format: uuid
             * @description System-generated unique identifier for the control.
             * @example 227349b1-a2a7-439a-b296-59f002faa8ce
             */
            readonly id: string;
            /**
             * @description The name of the control, representing the action it performs.
             * @example reboot
             */
            name: string;
            /**
             * Format: uuid
             * @description The device to which this control belongs.
             * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            readonly device: string;
            /**
             * Format: date-time
             * @description Timestamp when the control was created.
             * @example 2024-12-11T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the control was last updated, if applicable.
             * @default null
             * @example 2024-12-11T12:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Channel
         * @description Defines a functional unit of a device, such as a sensor, actuator, or informational component. Channels group related properties and controls for modular device functionality.
         */
        DevicesModuleChannel: {
            /**
             * Format: uuid
             * @description System-generated unique identifier for the channel.
             * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
             */
            readonly id: string;
            /**
             * @description Specifies the type of channel.
             * @example third-party
             */
            readonly type: string;
            /** @description Type of the channel, indicating its functional category (e.g., temperature, light). */
            category: components["schemas"]["DevicesModuleChannelCategory"];
            /**
             * @description Human-readable name of the channel.
             * @example Temperature Sensor
             */
            name: string;
            /**
             * @description Optional description of the channel’s purpose or functionality.
             * @default null
             * @example Living room temperature sensor
             */
            description: string | null;
            /**
             * Format: uuid
             * @description The parent device to which this channel belongs.
             * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            readonly device: string;
            /** @description A list of controls associated with the device channel. Controls represent actions or commands that can be executed on the channel. */
            controls: components["schemas"]["DevicesModuleChannelControl"][];
            /** @description A list of properties associated with the device channel. Properties represent the state or attributes of the channel. */
            properties: components["schemas"]["DevicesModuleChannelProperty"][];
            /**
             * Format: date-time
             * @description Timestamp when the channel was created.
             * @example 2024-12-11T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the channel was last updated, if applicable.
             * @default null
             * @example 2024-12-11T12:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Channel Control
         * @description A Channel control defines a specific action or command that can be executed for a channel. Examples include resetting a sensor or changing its operational mode.
         */
        DevicesModuleChannelControl: {
            /**
             * Format: uuid
             * @description System-generated unique identifier for the channel control.
             * @example 4b76637f-a8a6-45ba-965b-4819f4b57df2
             */
            readonly id: string;
            /**
             * @description The name of the control, representing the action it performs.
             * @example reset
             */
            name: string;
            /**
             * Format: uuid
             * @description The channel to which this control belongs.
             * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
             */
            readonly channel: string;
            /**
             * Format: date-time
             * @description Timestamp when the control was created.
             * @example 2024-12-11T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the control was last updated, if applicable.
             * @default null
             * @example 2024-12-11T12:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Channel Property
         * @description A Channel property describes an individual attribute or measurable value associated with a channel. This includes parameters like brightness, temperature, or energy consumption, reflecting the channel’s current state or configuration.
         */
        DevicesModuleChannelProperty: {
            /**
             * Format: uuid
             * @description System-generated unique identifier for the channel property.
             * @example 208f4790-21b0-4927-8835-7302d883a141
             */
            readonly id: string;
            /**
             * @description Specifies the type of channel property.
             * @example third-party
             */
            readonly type: string;
            /** @description Defines the category of the property, representing its functionality or characteristic. */
            readonly category: components["schemas"]["DevicesModuleChannelPropertyCategory"];
            /**
             * @description Optional name of the property for easier identification.
             * @default null
             * @example Thermostat mode
             */
            name: string | null;
            /**
             * @description Access level for the property: read-only (ro), read-write (rw), write-only (wo), or event-only (ev).
             * @example [
             *       "ro"
             *     ]
             */
            readonly permissions: ("ro" | "rw" | "wo" | "ev")[];
            /**
             * @description Data type of the property’s value, e.g., string, integer, or boolean.
             * @default unknown
             * @example string
             * @enum {string}
             */
            data_type: "char" | "uchar" | "short" | "ushort" | "int" | "uint" | "float" | "bool" | "string" | "enum" | "unknown";
            /**
             * @description Measurement unit associated with the property’s value, if applicable.
             * @default null
             * @example °C
             */
            unit: string | null;
            /**
             * @description List of valid values or states for the property, where applicable.
             * @default null
             * @example [
             *       "heat",
             *       "auto"
             *     ]
             */
            format: (string | number | null)[] | null;
            /**
             * @description Value to represent an invalid state for the property.
             * @default null
             * @example -999
             */
            invalid: ((number | null) | (string | null) | (boolean | null) | null) | null;
            /**
             * @description Step value indicating the smallest increment for the property.
             * @default null
             * @example 0.5
             */
            step: number | null;
            /**
             * @description Current value of the property.
             * @default null
             * @example 22.1
             */
            value: ((number | null) | (string | null) | (boolean | null) | null) | null;
            /**
             * Format: uuid
             * @description Reference to the channel that this property belongs to.
             * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
             */
            readonly channel: string;
            /**
             * Format: date-time
             * @description Timestamp when the control was created.
             * @example 2024-12-11T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the control was last updated, if applicable.
             * @default null
             * @example 2024-12-11T12:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Create Device
         * @description Schema for creating a new device. This includes essential attributes like type, category, and name, along with optional details such as a description.
         */
        DevicesModuleCreateDevice: {
            /**
             * Format: uuid
             * @description Unique identifier for the device. Optional during creation and system-generated if not provided.
             * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            id?: string;
            /**
             * @description Specifies the type of device.
             * @example third-party
             */
            type: string;
            /** @description Type of the device, defining its purpose or category (e.g., thermostat, lighting). */
            category: components["schemas"]["DevicesModuleDeviceCategory"];
            /**
             * @description Human-readable name of the device.
             * @example Thermostat
             */
            name: string;
            /**
             * @description Optional detailed description of the device.
             * @example Living room thermostat
             */
            description?: string | null;
            /** @description A list of controls associated with the device. Controls represent actions or commands that can be executed on the device. */
            controls?: components["schemas"]["DevicesModuleCreateDeviceControl"][];
            /** @description A list of channels associated with the device. Each channel represents a functional unit of the device, such as a sensor, actuator, or logical grouping of properties. */
            channels?: components["schemas"]["DevicesModuleCreateDeviceChannel"][];
        };
        /**
         * Create Device Control
         * @description Schema for creating a new device control, which represents an action the device can perform.
         */
        DevicesModuleCreateDeviceControl: {
            /**
             * Format: uuid
             * @description Unique identifier for the control. Optional during creation and system-generated if not provided.
             * @example 227349b1-a2a7-439a-b296-59f002faa8ce
             */
            id?: string;
            /**
             * @description The name of the control, representing the action it performs.
             * @example reboot
             */
            name: string;
        };
        /**
         * Create Channel
         * @description Schema for creating a new channel, representing a functional category of a device such as temperature, light, or motion.
         */
        DevicesModuleCreateDeviceChannel: {
            /**
             * Format: uuid
             * @description Unique identifier for the channel. Optional during creation and system-generated if not provided.
             * @example 568e43e9-c9da-4a4e-ac7c-9904b42730c6
             */
            id?: string;
            /**
             * @description Specifies the type of channel.
             * @example third-party
             */
            type: string;
            /** @description Type of the channel, indicating its functional category (e.g., temperature, light). */
            category: components["schemas"]["DevicesModuleChannelCategory"];
            /**
             * @description Human-readable name of the channel.
             * @example Temperature Sensor
             */
            name: string;
            /**
             * @description Optional description of the channel’s purpose or functionality.
             * @example Living room temperature sensor
             */
            description?: string | null;
            /** @description A list of controls associated with the device channel. Controls represent actions or commands that can be executed on the channel. */
            controls?: components["schemas"]["DevicesModuleCreateChannelControl"][];
            /** @description A list of properties associated with the device channel. Properties represent the state or attributes of the channel. */
            properties?: components["schemas"]["DevicesModuleCreateChannelProperty"][];
        };
        /**
         * Create Device Channel
         * @description Schema representing a request to create a new channel for a device.
         */
        DevicesModuleCreateChannel: components["schemas"]["DevicesModuleCreateDeviceChannel"] & {
            /**
             * Format: uuid
             * @description The parent device to which this channel belongs.
             * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            device: string;
        };
        /**
         * Create Channel Control
         * @description Schema for creating a new control within a channel, representing a specific action or command that can be performed.
         */
        DevicesModuleCreateChannelControl: {
            /**
             * Format: uuid
             * @description Unique identifier for the control. Optional during creation and system-generated if not provided.
             * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
             */
            id?: string;
            /**
             * @description The name of the control, representing the action it performs.
             * @example reset
             */
            name: string;
        };
        /**
         * Create Channel Property
         * @description Schema for creating a new property within a channel, representing a specific characteristic or functional value.
         */
        DevicesModuleCreateChannelProperty: {
            /**
             * Format: uuid
             * @description Unique identifier for the property. Optional during creation and system-generated if not provided.
             * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
             */
            id?: string;
            /**
             * @description Specifies the type of channel property.
             * @example third-party
             */
            type: string;
            /** @description Defines the category of the property, representing its functionality or characteristic. */
            category: components["schemas"]["DevicesModuleChannelPropertyCategory"];
            /**
             * @description Optional name of the property for easier identification.
             * @example Thermostat mode
             */
            name?: string | null;
            /**
             * @description Access level for the property: read-only (ro), read-write (rw), write-only (wo), or event-only (ev).
             * @example [
             *       "ro"
             *     ]
             */
            permissions: ("ro" | "rw" | "wo" | "ev")[];
            /**
             * @description Data type of the property’s value, e.g., string, integer, or boolean.
             * @example string
             * @enum {string}
             */
            data_type: "char" | "uchar" | "short" | "ushort" | "int" | "uint" | "float" | "bool" | "string" | "enum" | "unknown";
            /**
             * @description Measurement unit associated with the property’s value, if applicable.
             * @example °C
             */
            unit?: string | null;
            /**
             * @description List of valid values or states for the property, where applicable.
             * @example [
             *       "heat",
             *       "auto"
             *     ]
             */
            format?: (string | number | null)[] | null;
            /**
             * @description Value to represent an invalid state for the property.
             * @example -999
             */
            invalid?: ((number | null) | (string | null) | (boolean | null) | null) | null;
            /**
             * @description Step value indicating the smallest increment for the property.
             * @example 0.5
             */
            step?: number | null;
            /**
             * @description Current value of the property.
             * @example 22.1
             */
            value?: ((number | null) | (string | null) | (boolean | null) | null) | null;
        };
        /**
         * Update Device
         * @description Schema for updating basic details of a device, including its name and description.
         */
        DevicesModuleUpdateDevice: {
            /**
             * @description Specifies the type of device.
             * @example third-party
             */
            type: string;
            /**
             * @description Human-readable name of the device.
             * @example Thermostat
             */
            name?: string;
            /**
             * @description Optional detailed description of the device.
             * @example Living room thermostat
             */
            description?: string | null;
        };
        /**
         * Update Channel
         * @description Schema for updating a channel, including optional updates to its name and description.
         */
        DevicesModuleUpdateChannel: {
            /**
             * @description Specifies the type of channel.
             * @example third-party
             */
            type: string;
            /**
             * @description Human-readable name of the channel.
             * @example Temperature Sensor
             */
            name?: string;
            /**
             * @description Optional description of the channel’s purpose or functionality.
             * @example Living room temperature sensor
             */
            description?: string | null;
        };
        /**
         * Update Channel Property
         * @description Schema for updating a channel property, allowing updates to its name, unit, format, invalid state, step, and value.
         */
        DevicesModuleUpdateChannelProperty: {
            /**
             * @description Specifies the type of channel property.
             * @example third-party
             */
            type: string;
            /**
             * @description Optional name of the property for easier identification.
             * @example Thermostat mode
             */
            name?: string | null;
            /**
             * @description Measurement unit associated with the property’s value, if applicable.
             * @example °C
             */
            unit?: string | null;
            /**
             * @description List of valid values or states for the property, where applicable.
             * @example [
             *       "heat",
             *       "auto"
             *     ]
             */
            format?: (string | number | null)[] | null;
            /**
             * @description Value to represent an invalid state for the property.
             * @example -999
             */
            invalid?: ((number | null) | (string | null) | (boolean | null) | null) | null;
            /**
             * @description Step value indicating the smallest increment for the property.
             * @example 0.5
             */
            step?: number | null;
            /**
             * @description Current value of the property.
             * @example 22.1
             */
            value?: ((number | null) | (string | null) | (boolean | null) | null) | null;
        };
        /**
         * Create Device Request
         * @description Request schema for creating new device.
         */
        DevicesModuleReqCreateDevice: {
            data: components["schemas"]["DevicesModuleCreateDevice"];
        };
        /**
         * Create Device Control Request
         * @description Request schema for creating new device control.
         */
        DevicesModuleReqCreateDeviceControl: {
            data: components["schemas"]["DevicesModuleCreateDeviceControl"];
        };
        /**
         * Create Device Channel Request
         * @description Request schema for creating new device channel.
         */
        DevicesModuleReqCreateDeviceChannel: {
            data: components["schemas"]["DevicesModuleCreateDeviceChannel"];
        };
        /**
         * Create Channel Request
         * @description Request schema for creating new channel.
         */
        DevicesModuleReqCreateChannel: {
            data: components["schemas"]["DevicesModuleCreateChannel"];
        };
        /**
         * Create Channel Control Request
         * @description Request schema for creating new channel control.
         */
        DevicesModuleReqCreateChannelControl: {
            data: components["schemas"]["DevicesModuleCreateChannelControl"];
        };
        /**
         * Create Channel Property Request
         * @description Request schema for creating new channel property.
         */
        DevicesModuleReqCreateChannelProperty: {
            data: components["schemas"]["DevicesModuleCreateChannelProperty"];
        };
        /**
         * Update Device Request
         * @description Request schema for updating an existing device.
         */
        DevicesModuleReqUpdateDevice: {
            data: components["schemas"]["DevicesModuleUpdateDevice"];
        };
        /**
         * Update Channel Request
         * @description Request schema for updating an existing channel.
         */
        DevicesModuleReqUpdateChannel: {
            data: components["schemas"]["DevicesModuleUpdateChannel"];
        };
        /**
         * Update Channel Property Request
         * @description Request schema for updating an existing channel property.
         */
        DevicesModuleReqUpdateChannelProperty: {
            data: components["schemas"]["DevicesModuleUpdateChannelProperty"];
        };
        /**
         * Device Response
         * @description Response schema containing a single device.
         */
        DevicesModuleResDevice: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            data: components["schemas"]["DevicesModuleDevice"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Response
         * @description Response schema containing a list of devices.
         */
        DevicesModuleResDevices: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/devices
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            data: components["schemas"]["DevicesModuleDevice"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Control Response
         * @description Response schema containing a single device control.
         */
        DevicesModuleResDeviceControl: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls/227349b1-a2a7-439a-b296-59f002faa8ce
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleDeviceControl"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Controls Response
         * @description Response schema containing a list of device controls.
         */
        DevicesModuleResDeviceControls: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleDeviceControl"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channel Response
         * @description Response schema containing a single device channel.
         */
        DevicesModuleResDeviceChannel: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannel"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channels Response
         * @description Response schema containing a list of device channels.
         */
        DevicesModuleResDeviceChannels: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannel"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channel Response
         * @description Response schema containing a single channel.
         */
        DevicesModuleResChannel: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannel"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channels Response
         * @description Response schema containing a list of channels.
         */
        DevicesModuleResChannels: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/channels
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannel"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channel Control Response
         * @description Response schema containing a single channel control.
         */
        DevicesModuleResChannelControl: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannelControl"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channel Controls Response
         * @description Response schema containing a list of channel controls.
         */
        DevicesModuleResChannelControls: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannelControl"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channel Property Response
         * @description Response schema containing a single channel property.
         */
        DevicesModuleResChannelProperty: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannelProperty"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Channel Properties Response
         * @description Response schema containing a list of channel properties.
         */
        DevicesModuleResChannelProperties: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesModuleChannelProperty"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Device Category
         * @description Defines the type of device, categorizing it by its primary function.
         * @enum {string}
         */
        DevicesModuleDeviceCategory: "generic" | "air_conditioner" | "air_dehumidifier" | "air_humidifier" | "air_purifier" | "alarm" | "camera" | "door" | "doorbell" | "fan" | "heater" | "lighting" | "lock" | "media" | "outlet" | "pump" | "robot_vacuum" | "sensor" | "speaker" | "sprinkler" | "switcher" | "television" | "thermostat" | "valve" | "window_covering";
        /**
         * Channel Category
         * @description Represents a functional channel inside a device, responsible for a specific type of data or control.
         * @enum {string}
         */
        DevicesModuleChannelCategory: "generic" | "air_particulate" | "alarm" | "battery" | "camera" | "carbon_dioxide" | "carbon_monoxide" | "contact" | "cooler" | "device_information" | "door" | "doorbell" | "electrical_energy" | "electrical_power" | "fan" | "flow" | "heater" | "humidity" | "illuminance" | "leak" | "light" | "lock" | "media_input" | "media_playback" | "microphone" | "motion" | "nitrogen_dioxide" | "occupancy" | "outlet" | "ozone" | "pressure" | "robot_vacuum" | "smoke" | "speaker" | "sulphur_dioxide" | "switcher" | "television" | "temperature" | "thermostat" | "valve" | "volatile_organic_compounds" | "window_covering";
        /**
         * Channel Property Category
         * @description Defines specific properties of a device channel that can be measured, controlled, or reported.
         * @enum {string}
         */
        DevicesModuleChannelPropertyCategory: "generic" | "active" | "angle" | "brightness" | "color_blue" | "color_green" | "color_red" | "color_temperature" | "color_white" | "connection_type" | "consumption" | "current" | "density" | "detected" | "direction" | "distance" | "duration" | "event" | "fault" | "firmware_revision" | "frequency" | "hardware_revision" | "hue" | "humidity" | "in_use" | "infrared" | "input_source" | "level" | "link_quality" | "locked" | "manufacturer" | "measured" | "model" | "mode" | "obstruction" | "on" | "over_current" | "over_voltage" | "pan" | "peak_level" | "percentage" | "position" | "power" | "rate" | "remaining" | "remote_key" | "saturation" | "serial_number" | "source" | "speed" | "status" | "swing" | "tampered" | "temperature" | "tilt" | "track" | "type" | "units" | "voltage" | "volume" | "zoom";
        /**
         * Page Base
         * @description The base schema for all dashboard pages, including common properties such as id, type, title, and timestamps.
         */
        DashboardModulePage: {
            /**
             * Format: uuid
             * @description A unique identifier for the dashboard page.
             * @example 602df00f-0cc9-45dd-a74f-3a28f0e8c8ee
             */
            readonly id: string;
            /**
             * @description Discriminator for the page type
             * @example tiles
             */
            readonly type: string;
            /**
             * @description The title of the dashboard page, displayed in the UI.
             * @example Living room
             */
            title: string;
            /**
             * @description The icon representing the dashboard page.
             * @default null
             * @example icon-name
             */
            icon: string | null;
            /**
             * Format: int32
             * @description The display order of the dashboard page in the navigation or list.
             * @default 0
             * @example 1
             */
            order: number;
            /** @description A list of data sources used by the page, typically for real-time updates. */
            data_source: components["schemas"]["DashboardModuleDataSource"][];
            /**
             * Format: date-time
             * @description The timestamp when the dashboard page was created.
             * @example 2025-01-25T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the dashboard page was last updated.
             * @default null
             * @example 2025-01-25T13:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Tile
         * @description The base schema for all dashboard tiles, containing common properties such as position, dimensions, and associated page and data sources.
         */
        DashboardModuleTile: {
            /**
             * Format: uuid
             * @description A unique identifier for the dashboard tile.
             * @example 9f807d44-bd0f-4f5e-b409-3d048efa03d8
             */
            readonly id: string;
            /** @description Discriminator for the tile type */
            type: string;
            /** @description Discriminator for the data source type */
            parent: {
                /**
                 * Format: uuid
                 * @description A unique parent identifier.
                 * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
                 */
                readonly id: string;
                /** @description Discriminator for the tile parent */
                type: string;
            };
            /**
             * Format: int32
             * @description The row position of the tile in the grid.
             * @example 1
             */
            row: number;
            /**
             * Format: int32
             * @description The column position of the tile in the grid.
             * @example 1
             */
            col: number;
            /**
             * Format: int32
             * @description The number of rows the tile spans.
             * @default 0
             * @example 2
             */
            row_span: number;
            /**
             * Format: int32
             * @description The number of columns the tile spans.
             * @default 0
             * @example 2
             */
            col_span: number;
            /**
             * @description Informing that this tile is not displayed on the display application.
             * @default false
             * @example true
             */
            hidden: boolean;
            /** @description A list of data sources used by the tile, typically for real-time updates. */
            data_source: components["schemas"]["DashboardModuleDataSource"][];
            /**
             * Format: date-time
             * @description The timestamp when the dashboard tile was created.
             * @example 2025-01-25T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the dashboard tile was last updated.
             * @default null
             * @example 2025-01-25T13:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Data Source
         * @description The base schema for all dashboard data sources, containing common attributes such as the associated tile and timestamps.
         */
        DashboardModuleDataSource: {
            /**
             * Format: uuid
             * @description A unique identifier for the data source.
             * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
             */
            readonly id: string;
            /** @description Discriminator for the data source type */
            type: string;
            /** @description Discriminator for the data source type */
            parent: {
                /**
                 * Format: uuid
                 * @description A unique parent identifier.
                 * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
                 */
                readonly id: string;
                /** @description Discriminator for the data source parent */
                type: string;
            };
            /**
             * Format: date-time
             * @description The timestamp when the data source was created.
             * @example 2025-01-25T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the data source was last updated.
             * @default null
             * @example 2025-01-25T13:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Create Page
         * @description The base schema for creating a new dashboard page, containing shared attributes like title and order.
         */
        DashboardModuleCreatePage: {
            /**
             * Format: uuid
             * @description The unique identifier for the dashboard page (optional during creation).
             * @example 602df00f-0cc9-45dd-a74f-3a28f0e8c8ee
             */
            id?: string;
            /** @description Discriminator for the page type */
            type: string;
            /**
             * @description The title of the dashboard page.
             * @example My Dashboard
             */
            title: string;
            /**
             * @description The icon associated with the dashboard page.
             * @default null
             * @example icon-name
             */
            icon?: string | null;
            /**
             * Format: int32
             * @description The position of the page in the dashboard’s list.
             * @default 0
             * @example 1
             */
            order?: number;
            /** @description A list of data sources used by the page, typically for real-time updates. */
            data_source?: components["schemas"]["DashboardModuleCreateDataSource"][];
        };
        /**
         * Create Tile
         * @description Base schema for creating a dashboard tile, containing shared attributes such as position and size.
         */
        DashboardModuleCreateTile: {
            /**
             * Format: uuid
             * @description Unique identifier for the dashboard tile (optional during creation).
             * @example 9f807d44-bd0f-4f5e-b409-3d048efa03d8
             */
            id?: string;
            /** @description Discriminator for the tile type */
            type: string;
            /**
             * Format: int32
             * @description The row position of the tile in the grid.
             * @example 1
             */
            row: number;
            /**
             * Format: int32
             * @description The column position of the tile in the grid.
             * @example 2
             */
            col: number;
            /**
             * Format: int32
             * @description The number of rows the tile spans in the grid.
             * @default 0
             * @example 1
             */
            row_span?: number;
            /**
             * Format: int32
             * @description The number of columns the tile spans in the grid.
             * @default 0
             * @example 2
             */
            col_span?: number;
            /**
             * @description Mark the tile as hidden and will not be displayed on the display application.
             * @default false
             * @example true
             */
            hidden?: boolean;
            /** @description A list of data sources used by the tile, typically for real-time updates. */
            data_source?: components["schemas"]["DashboardModuleCreateDataSource"][];
        };
        /**
         * Create Data Source
         * @description Base schema for creating a data source.
         */
        DashboardModuleCreateDataSource: {
            /**
             * Format: uuid
             * @description Unique identifier for the data source (optional during creation).
             * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
             */
            id?: string;
            /** @description Discriminator for the data source type */
            type: string;
        };
        /**
         * Update Page
         * @description Base schema for updating a dashboard page.
         */
        DashboardModuleUpdatePage: {
            /** @description Discriminator for the page type */
            type: string;
            /**
             * @description The title of the page.
             * @example My Updated Dashboard
             */
            title?: string;
            /**
             * @description The icon associated with the page.
             * @example icon-name
             */
            icon?: string | null;
            /**
             * Format: int32
             * @description The display order of the page.
             * @example 1
             */
            order?: number;
        };
        /**
         * Update Tile
         * @description Base schema for updating a tile in the dashboard.
         */
        DashboardModuleUpdateTile: {
            /** @description Discriminator for the tile type */
            type: string;
            /**
             * Format: int32
             * @description The row position of the tile in the grid.
             * @example 1
             */
            row?: number;
            /**
             * Format: int32
             * @description The column position of the tile in the grid.
             * @example 2
             */
            col?: number;
            /**
             * Format: int32
             * @description The number of rows the tile spans in the grid.
             * @example 1
             */
            row_span?: number;
            /**
             * Format: int32
             * @description The number of columns the tile spans in the grid.
             * @example 2
             */
            col_span?: number;
            /**
             * @description Mark the tile as hidden and will not be displayed on the display application.
             * @default false
             * @example true
             */
            hidden?: boolean;
        };
        /**
         * Update Data Source Base
         * @description Base schema for updating a data source in the dashboard.
         */
        DashboardModuleUpdateDataSource: {
            /**
             * @description Specifies the type of data source.
             * @example device-channel
             */
            type: string;
        };
        /**
         * Create Page Request
         * @description Request schema for creating new page.
         */
        DashboardModuleReqCreatePage: {
            data: components["schemas"]["DashboardModuleCreatePage"];
        };
        /**
         * Create Page Tile Request
         * @description Request schema for creating new page tile.
         */
        DashboardModuleReqCreateTile: {
            data: Omit<components["schemas"]["DashboardModuleCreateTile"], "type"> & {
                /** @description Discriminator for the tile type */
                parent: {
                    /**
                     * Format: uuid
                     * @description A unique parent identifier.
                     * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
                     */
                    readonly id: string;
                    /** @description Discriminator for the tile parent */
                    type: string;
                };
            };
        };
        /**
         * Create Page Tile Request
         * @description Request schema for creating new page tile.
         */
        DashboardModuleReqCreateTileWithParent: {
            data: components["schemas"]["DashboardModuleCreateTile"];
        };
        /**
         * Create Data Source Request
         * @description Request schema for creating new data source.
         */
        DashboardModuleReqCreateDataSource: {
            data: Omit<components["schemas"]["DashboardModuleCreateDataSource"], "type"> & {
                /** @description Discriminator for the data source type */
                parent: {
                    /**
                     * Format: uuid
                     * @description A unique parent identifier.
                     * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
                     */
                    readonly id: string;
                    /** @description Discriminator for the data source parent */
                    type: string;
                };
            };
        };
        /**
         * Create Data Source Request
         * @description Request schema for creating new data source.
         */
        DashboardModuleReqCreateDataSourceWithParent: {
            data: components["schemas"]["DashboardModuleCreateDataSource"];
        };
        /**
         * Update Page Request
         * @description Request schema for updating an existing page.
         */
        DashboardModuleReqUpdatePage: {
            data: components["schemas"]["DashboardModuleUpdatePage"];
        };
        /**
         * Update Tile Request
         * @description Request schema for updating an existing tile.
         */
        DashboardModuleReqUpdateTile: {
            data: components["schemas"]["DashboardModuleUpdateTile"];
        };
        /**
         * Update Data Source Request
         * @description Request schema for updating an existing data source.
         */
        DashboardModuleReqUpdateDataSource: {
            data: components["schemas"]["DashboardModuleUpdateDataSource"];
        };
        /**
         * Page Response
         * @description Response schema containing a single page.
         */
        DashboardModuleResPage: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DashboardModulePage"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Pages Response
         * @description Response schema containing a list of pages.
         */
        DashboardModuleResPages: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/pages
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DashboardModulePage"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Tile Response
         * @description Response schema containing a single tile.
         */
        DashboardModuleResTile: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DashboardModuleTile"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Tiles Response
         * @description Response schema containing a list of tiles.
         */
        DashboardModuleResTiles: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/tiles
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DashboardModuleTile"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Data Source Response
         * @description Response schema containing a single data source.
         */
        DashboardModuleResDataSource: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DashboardModuleDataSource"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Data Sources Response
         * @description Response schema containing a list of data sources.
         */
        DashboardModuleResDataSources: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/data-source
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DashboardModuleDataSource"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Memory Info
         * @description Schema for a details about total, used, and free memory on the system.
         */
        SystemModuleMemoryInfo: {
            /**
             * @description Total available system memory in bytes.
             * @example 8388608000
             */
            readonly total: number;
            /**
             * @description Used memory in bytes.
             * @example 4200000000
             */
            readonly used: number;
            /**
             * @description Free memory in bytes.
             * @example 4188608000
             */
            readonly free: number;
        };
        /**
         * Storage Info
         * @description Schema for a details about system storage, including file system, usage, and available space.
         */
        SystemModuleStorageInfo: {
            /**
             * @description Filesystem type or mount point.
             * @example /dev/mmcblk0p1
             */
            readonly fs: string;
            /**
             * @description Used storage space in bytes.
             * @example 15000000000
             */
            readonly used: number;
            /**
             * @description Total storage capacity in bytes.
             * @example 32000000000
             */
            readonly size: number;
            /**
             * @description Available free storage space in bytes.
             * @example 17000000000
             */
            readonly available: number;
        };
        /**
         * Temperature Info
         * @description Schema for the current temperature of system components like CPU and GPU.
         */
        SystemModuleTemperatureInfo: {
            /**
             * @description CPU temperature in Celsius.
             * @example 55
             */
            readonly cpu?: number | null;
            /**
             * @description GPU temperature in Celsius.
             * @example 60
             */
            readonly gpu?: number | null;
        };
        /**
         * Operating System Info
         * @description Schema for a information about the operating system, including distribution, version, and uptime.
         */
        SystemModuleOperatingSystemInfo: {
            /**
             * @description Operating system platform.
             * @example linux
             */
            readonly platform: string;
            /**
             * @description Operating system distribution.
             * @example Debian
             */
            readonly distro: string;
            /**
             * @description Operating system release version.
             * @example 11 (bullseye)
             */
            readonly release: string;
            /**
             * @description System uptime in seconds.
             * @example 36000
             */
            readonly uptime: number;
        };
        /**
         * Display Info
         * @description Schema for a information about the display resolution and current screen resolution.
         */
        SystemModuleDisplayInfo: {
            /**
             * @description Native horizontal screen resolution.
             * @example 1920
             */
            readonly resolution_x: number;
            /**
             * @description Native vertical screen resolution.
             * @example 1080
             */
            readonly resolution_y: number;
            /**
             * @description Current horizontal screen resolution.
             * @example 1280
             */
            readonly current_res_x: number;
            /**
             * @description Current vertical screen resolution.
             * @example 720
             */
            readonly current_res_y: number;
        };
        /**
         * Network Stats
         * @description Schema for a network statistics, including interface, received/transmitted bytes, and speed.
         */
        SystemModuleNetworkStats: {
            /**
             * @description Network interface name.
             * @example eth0
             */
            readonly interface: string;
            /**
             * @description Total received bytes.
             * @example 123456789
             */
            readonly rx_bytes: number;
            /**
             * @description Total transmitted bytes.
             * @example 98765432
             */
            readonly tx_bytes: number;
        };
        /**
         * Default Network Info
         * @description Schema for a default network info, including interface, ip addresses and mac address.
         */
        SystemModuleDefaultNetwork: {
            /**
             * @description Network interface name.
             * @example eth0
             */
            readonly interface: string;
            /**
             * @description IPv4 address.
             * @example 192.168.1.5
             */
            readonly ip4: string;
            /**
             * @description IPv6 address.
             * @example fe80::134a:1e43:abc5:d413
             */
            readonly ip6: string;
            /**
             * @description Default network interface physical address.
             * @example xx:xx:xx:xx:xx:xx
             */
            readonly mac: string;
        };
        /**
         * System Info
         * @description Schema for a detailed information about the system, including CPU load, memory, storage, temperature, operating system, network, and display.
         */
        SystemModuleSystemInfo: {
            /**
             * Format: float
             * @description Current CPU load percentage (0-100%).
             * @example 15.3
             */
            readonly cpu_load: number;
            memory: components["schemas"]["SystemModuleMemoryInfo"];
            /** @description List of available storage devices and their usage details. */
            readonly storage: components["schemas"]["SystemModuleStorageInfo"][];
            temperature: components["schemas"]["SystemModuleTemperatureInfo"];
            /** @description Operating system name and version. */
            os: components["schemas"]["SystemModuleOperatingSystemInfo"];
            /** @description List of network interfaces with statistics. */
            readonly network: components["schemas"]["SystemModuleNetworkStats"][];
            default_network: components["schemas"]["SystemModuleDefaultNetwork"];
            display: components["schemas"]["SystemModuleDisplayInfo"];
        };
        /**
         * Throttle Status
         * @description Schema that indicates whether the system has encountered throttling, frequency capping, or undervoltage conditions.
         */
        SystemModuleThrottleStatus: {
            /**
             * @description Indicates if the system has detected undervoltage conditions.
             * @default false
             */
            readonly undervoltage: boolean;
            /**
             * @description Indicates if the system is reducing CPU frequency due to power constraints.
             * @default false
             */
            readonly frequency_capping: boolean;
            /**
             * @description Indicates if the system has experienced CPU throttling due to high temperatures.
             * @default false
             */
            readonly throttling: boolean;
            /**
             * @description Indicates if the system has reached the soft temperature limit and is reducing performance.
             * @default false
             */
            readonly soft_temp_limit: boolean;
        };
        /**
         * System Info Response
         * @description Response containing detailed system information, including CPU load, memory usage, storage, temperature, OS, network, and display details.
         */
        SystemModuleResSystemInfo: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/system-module/system/info
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["SystemModuleSystemInfo"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Throttle Status Response
         * @description Response indicating whether the system has experienced any throttling, frequency capping, or undervoltage conditions.
         */
        SystemModuleResThrottleStatus: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/system-module/system/throtle
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["SystemModuleThrottleStatus"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Weather Condition
         * @description Schema for the current weather condition, including description and icon.
         */
        WeatherModuleWeather: {
            /**
             * @description Weather condition code.
             * @example 800
             */
            code: number;
            /**
             * @description Weather condition (e.g., Rain, Snow, Clear).
             * @example Clear
             */
            main: string;
            /**
             * @description Detailed description of the weather condition.
             * @example clear sky
             */
            description: string;
            /**
             * @description Icon code representing the current weather condition.
             * @example 01d
             */
            icon: string;
        };
        /**
         * Wind Conditions
         * @description Schema for describing the wind conditions at the specified location.
         */
        WeatherModuleWind: {
            /**
             * @description Wind speed in meters per second.
             * @example 3.5
             */
            speed: number;
            /**
             * @description Wind direction in degrees (0° - 360°).
             * @example 180
             */
            deg: number;
            /**
             * @description Wind gust speed in meters per second.
             * @example 5.8
             */
            gust: number | null;
        };
        /**
         * Location Details
         * @description Schema for the geographical location of the weather data.
         */
        WeatherModuleLocation: {
            /**
             * @description Name of the city or region.
             * @example Prague
             */
            name: string;
            /**
             * @description Country code (ISO 3166-1 alpha-2) or full country name.
             * @example CZ
             */
            country: string;
        };
        /**
         * Daily Weather Report
         * @description Schema for a specific day, including temperature, wind, and precipitation.
         */
        WeatherModuleCurrentDay: {
            /**
             * @description Current temperature in degrees Celsius.
             * @example 22.5
             */
            temperature: number;
            /**
             * @description Minimum recorded temperature for the day in degrees Celsius.
             * @default null
             * @example 18.2
             */
            temperature_min?: number | null;
            /**
             * @description Maximum recorded temperature for the day in degrees Celsius.
             * @default null
             * @example 25.8
             */
            temperature_max?: number | null;
            /**
             * @description Perceived temperature based on wind and humidity.
             * @example 21.9
             */
            feels_like: number;
            /**
             * @description Atmospheric pressure in hPa.
             * @example 1013
             */
            pressure: number;
            /**
             * @description Humidity level as a percentage.
             * @example 55
             */
            humidity: number;
            /** @description Detailed weather status. */
            weather: components["schemas"]["WeatherModuleWeather"];
            /** @description Wind conditions at the location. */
            wind: components["schemas"]["WeatherModuleWind"];
            /**
             * @description Cloudiness percentage.
             * @example 10
             */
            clouds: number;
            /**
             * @description Rain volume in the last hour (mm).
             * @example 10
             */
            rain: number | null;
            /**
             * @description Snow volume in the last hour (mm).
             * @example 10
             */
            snow: number | null;
            /**
             * Format: date-time
             * @description Timestamp for sunrise in ISO 8601 format.
             * @example 2025-02-06T06:45:00Z
             */
            sunrise: string;
            /**
             * Format: date-time
             * @description Timestamp for sunset in ISO 8601 format.
             * @example 2025-02-06T17:30:00Z
             */
            sunset: string;
            /**
             * Format: date-time
             * @description Time of data calculation
             */
            day_time: string;
        };
        /**
         * Forecast Weather Report
         * @description Schema for a forecasted day, including temperature, wind, and precipitation.
         */
        WeatherModuleForecastDay: {
            /** @description Current temperatures during the day in degrees Celsius. */
            temperature: {
                /**
                 * @description Morning temperature.
                 * @default null
                 * @example 22.5
                 */
                morn?: number | null;
                /**
                 * @description Day temperature.
                 * @default null
                 * @example 24.5
                 */
                day?: number | null;
                /**
                 * @description Evening temperature.
                 * @default null
                 * @example 22.5
                 */
                eve?: number | null;
                /**
                 * @description Night temperature.
                 * @default null
                 * @example 20.5
                 */
                night?: number | null;
                /**
                 * @description Min daily temperature.
                 * @default null
                 * @example 20.5
                 */
                min?: number | null;
                /**
                 * @description Max daily temperature.
                 * @default null
                 * @example 24.5
                 */
                max?: number | null;
            };
            /** @description Perceived temperatures during the day based on wind and humidity. */
            feels_like: {
                /**
                 * @description Morning temperature.
                 * @default null
                 * @example 22.5
                 */
                morn?: number | null;
                /**
                 * @description Day temperature.
                 * @default null
                 * @example 24.5
                 */
                day?: number | null;
                /**
                 * @description Evening temperature.
                 * @default null
                 * @example 22.5
                 */
                eve?: number | null;
                /**
                 * @description Night temperature.
                 * @default null
                 * @example 20.5
                 */
                night?: number | null;
            };
            /**
             * @description Atmospheric pressure in hPa.
             * @example 1013
             */
            pressure: number;
            /**
             * @description Humidity level as a percentage.
             * @example 55
             */
            humidity: number;
            /** @description Detailed weather status. */
            weather: components["schemas"]["WeatherModuleWeather"];
            /** @description Wind conditions at the location. */
            wind: components["schemas"]["WeatherModuleWind"];
            /**
             * @description Cloudiness percentage.
             * @example 10
             */
            clouds: number;
            /**
             * @description Rain volume in the last hour (mm).
             * @example 10
             */
            rain: number | null;
            /**
             * @description Snow volume in the last hour (mm).
             * @example 10
             */
            snow: number | null;
            /**
             * Format: date-time
             * @description Timestamp for sunrise in ISO 8601 format.
             * @default null
             * @example 2025-02-06T06:45:00Z
             */
            sunrise?: string | null;
            /**
             * Format: date-time
             * @description Timestamp for sunset in ISO 8601 format.
             * @default null
             * @example 2025-02-06T17:30:00Z
             */
            sunset?: string | null;
            /**
             * Format: date-time
             * @description Timestamp for moonrise in ISO 8601 format.
             * @default null
             * @example 2025-02-06T17:30:00Z
             */
            moonrise?: string | null;
            /**
             * Format: date-time
             * @description Timestamp for moonset in ISO 8601 format.
             * @default null
             * @example 2025-02-06T17:30:00Z
             */
            moonset?: string | null;
            /**
             * Format: date-time
             * @description Time of data calculation
             */
            day_time: string;
        };
        /**
         * Location Weather
         * @description Schema form current weather conditions and forecast details for a specific location.
         */
        WeatherModuleLocationWeather: {
            /** @description Current weather conditions at the specified location. */
            current: components["schemas"]["WeatherModuleCurrentDay"];
            /** @description List of daily weather forecasts. */
            forecast: components["schemas"]["WeatherModuleForecastDay"][];
            /** @description Details of the location where the weather data is recorded. */
            location: components["schemas"]["WeatherModuleLocation"];
        };
        /**
         * Geolocation
         * @description Represents geographical location details, including city name, coordinates, and country information.
         */
        WeatherModuleGeolocation: {
            /**
             * @description Name of the city or location.
             * @example Prague
             */
            name: string;
            /** @description Alternative names for the location in different languages. */
            local_names: {
                [key: string]: string;
            };
            /**
             * @description Latitude coordinate of the location.
             * @example 50.0755
             */
            lat: string;
            /**
             * @description Longitude coordinate of the location.
             * @example 14.4378
             */
            lon: string;
            /**
             * @description Country code (ISO 3166-1 alpha-2) or full country name.
             * @example CZ
             */
            country: string;
            /**
             * @description State or province where the location is situated, if applicable.
             * @example Prague Region
             */
            state?: string;
        };
        /**
         * Location Weather Response
         * @description Response containing detailed weather conditions and forecast for a specified location.
         */
        WeatherModuleResLocationWeather: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/weather-module/weather
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["WeatherModuleLocationWeather"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Location Current Day Response
         * @description Response containing detailed weather conditions for a current day and for a specified location.
         */
        WeatherModuleResLocationCurrent: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status?: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp?: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id?: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/weather-module/weather/current
             */
            readonly path?: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method?: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data?: components["schemas"]["WeatherModuleCurrentDay"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata?: components["schemas"]["CommonResMetadata"];
        };
        /**
         * LocationForecast
         * @description Response containing detailed weather conditions forecast for a specified location.
         */
        WeatherModuleResLocationForecast: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status?: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp?: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id?: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/weather-module/weather/forecast
             */
            readonly path?: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method?: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data?: components["schemas"]["WeatherModuleForecastDay"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata?: components["schemas"]["CommonResMetadata"];
        };
        /**
         * City to Coordinates Geolocation Response
         * @description Response providing latitude and longitude coordinates for a given city name.
         */
        WeatherModuleResGeolocationCityToCoordinates: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/weather-module/geolocation/city-to-coordinates
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["WeatherModuleGeolocation"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Coordinates to City Geolocation Response
         * @description Response providing city details for a given latitude and longitude.
         */
        WeatherModuleResGeolocationCoordinatesToCity: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/weather-module/geolocation/coordinates-to-city
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["WeatherModuleGeolocation"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Tiles Page
         * @description A third-party device used to communicate with third-party devices.
         */
        DevicesThirdPartyPluginThirdPartyDevice: components["schemas"]["DevicesModuleDevice"] & {
            /**
             * Format: uri
             * @description A url address of the third-party device endpoint.
             * @example http://third-party-device.local:8081
             */
            service_address: string;
        };
        /**
         * Create Tiles Page
         * @description The schema for creating a third-party device.
         */
        DevicesThirdPartyPluginCreateThirdPartyDevice: components["schemas"]["DevicesModuleCreateDevice"] & {
            /**
             * Format: uri
             * @description A url address of the third-party device endpoint.
             * @example http://third-party-device.local:8081
             */
            service_address: string;
        };
        /**
         * Update Tiles Page
         * @description Schema for updating a third-party device.
         */
        DevicesThirdPartyPluginUpdateThirdPartyDevice: components["schemas"]["DevicesModuleUpdateDevice"] & {
            /**
             * Format: uri
             * @description A url address of the third-party device endpoint.
             * @example http://third-party-device.local:8081
             */
            service_address?: string;
        };
        /**
         * Home Assistant Device Channel
         * @description A Home Assistant channels used to communicate with Home Assistant instance.
         */
        DevicesThirdPartyPluginThirdPartyChannel: components["schemas"]["DevicesModuleChannel"];
        /**
         * Create Home Assistant Device Channel
         * @description The schema for creating a Home Assistant channel.
         */
        DevicesThirdPartyPluginCreateThirdPartyChannel: components["schemas"]["DevicesModuleCreateChannel"];
        /**
         * Update Home Assistant Device Chanel
         * @description Schema for updating a Home Assistant channel.
         */
        DevicesThirdPartyPluginUpdateThirdPartyChannel: components["schemas"]["DevicesModuleUpdateChannel"];
        /**
         * Home Assistant Channel Property
         * @description A Home Assistant properties used to communicate with Home Assistant instance.
         */
        DevicesThirdPartyPluginThirdPartyChannelProperty: components["schemas"]["DevicesModuleChannelProperty"];
        /**
         * Create Home Assistant Channel Property
         * @description The schema for creating a Home Assistant channel property.
         */
        DevicesThirdPartyPluginCreateThirdPartyChannelProperty: components["schemas"]["DevicesModuleCreateChannelProperty"];
        /**
         * Update Home Assistant Device Chanel
         * @description Schema for updating a Home Assistant channel property.
         */
        DevicesThirdPartyPluginUpdateThirdPartyChannelProperty: components["schemas"]["DevicesModuleUpdateChannelProperty"];
        /**
         * Third-Party Device Property Update
         * @description Represents a request to update a specific property on a third-party device.
         */
        DevicesThirdPartyPluginPropertyUpdateRequest: {
            /**
             * Format: uuid
             * @description Unique identifier of the target device.
             * @example 234e5678-a89b-22d3-c456-426614174133
             */
            device: string;
            /**
             * Format: uuid
             * @description Unique identifier of the target device channel.
             * @example 456e7890-c89d-42d5-e678-626816194355
             */
            channel: string;
            /**
             * Format: uuid
             * @description Unique identifier of the property being updated.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            property: string;
            /** @description New value to be applied to the property. */
            value: string | number | boolean;
        };
        /**
         * Third-Party Device Property Update Request
         * @description Represents a request to update one or more properties on a third-party device.
         */
        DevicesThirdPartyPluginPropertiesUpdateRequest: {
            /** @description Represents a single property update operation for a third-party device. */
            properties?: components["schemas"]["DevicesThirdPartyPluginPropertyUpdateRequest"][];
        };
        /**
         * Third-Party Device Property Update Result
         * @description Represents the result of an update operation for a specific property on a third-party device.
         */
        DevicesThirdPartyPluginPropertyUpdateResult: {
            /**
             * Format: uuid
             * @description Unique identifier of the device for which the update was requested.
             * @example 234e5678-a89b-22d3-c456-426614174133
             */
            readonly device: string;
            /**
             * Format: uuid
             * @description Unique identifier of the channel that was updated.
             * @example 456e7890-c89d-42d5-e678-626816194355
             */
            readonly channel: string;
            /**
             * Format: uuid
             * @description Unique identifier of the property that was updated.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            property: string;
            /** @description Status code indicating the outcome of the update request. A value of 0 indicates success, while negative values indicate errors. */
            status: components["schemas"]["DevicesThirdPartyPluginErrorCode"];
        };
        /**
         * Third-Party Device Property Update Result
         * @description Represents the overall response from a third-party device after processing an update request.
         */
        DevicesThirdPartyPluginPropertiesUpdateResult: {
            /** @description List of processed properties and their update results. */
            readonly properties: components["schemas"]["DevicesThirdPartyPluginPropertyUpdateResult"][];
        };
        /**
         * Third-Party Error Code
         * @description Error codes returned by third-party devices when processing requests.
         * @enum {number}
         */
        DevicesThirdPartyPluginErrorCode: 0 | -80001 | -80002 | -80003 | -80004 | -80005 | -80006 | -80007 | -80008 | -80009 | -80010 | -80011;
        /**
         * Home Assistant Device
         * @description A Home Assistant device used to communicate with Home Assistant instance.
         */
        DevicesHomeAssistantPluginHomeAssistantDevice: components["schemas"]["DevicesModuleDevice"] & {
            /**
             * @description A HA device instance identifier.
             * @example 2fcdc656a7ae51e33482c8314b1d32b9
             */
            ha_device_id: string;
        };
        /**
         * Create Home Assistant Device
         * @description The schema for creating a Home Assistant device.
         */
        DevicesHomeAssistantPluginCreateHomeAssistantDevice: components["schemas"]["DevicesModuleCreateDevice"] & {
            /**
             * @description A HA device instance identifier.
             * @example 2fcdc656a7ae51e33482c8314b1d32b9
             */
            ha_device_id: string;
        };
        /**
         * Update Home Assistant Device
         * @description Schema for updating a Home Assistant device.
         */
        DevicesHomeAssistantPluginUpdateHomeAssistantDevice: components["schemas"]["DevicesModuleUpdateDevice"];
        /**
         * Home Assistant Device Channel
         * @description A Home Assistant channels used to communicate with Home Assistant instance.
         */
        DevicesHomeAssistantPluginHomeAssistantChannel: components["schemas"]["DevicesModuleChannel"];
        /**
         * Create Home Assistant Device Channel
         * @description The schema for creating a Home Assistant channel.
         */
        DevicesHomeAssistantPluginCreateHomeAssistantChannel: components["schemas"]["DevicesModuleCreateChannel"];
        /**
         * Update Home Assistant Device Chanel
         * @description Schema for updating a Home Assistant channel.
         */
        DevicesHomeAssistantPluginUpdateHomeAssistantChannel: components["schemas"]["DevicesModuleUpdateChannel"];
        /**
         * Home Assistant Channel Property
         * @description A Home Assistant properties used to communicate with Home Assistant instance.
         */
        DevicesHomeAssistantPluginHomeAssistantChannelProperty: components["schemas"]["DevicesModuleChannelProperty"] & {
            /**
             * @description A HA device entity identifier.
             * @example light.hall_cabinet_lights_lights
             */
            ha_entity_id: string;
            /**
             * @description A HA device entity attribute.
             * @example brightness
             */
            ha_attribute: string;
        };
        /**
         * Create Home Assistant Channel Property
         * @description The schema for creating a Home Assistant channel property.
         */
        DevicesHomeAssistantPluginCreateHomeAssistantChannelProperty: components["schemas"]["DevicesModuleCreateChannelProperty"] & {
            /**
             * @description A HA device entity identifier.
             * @example light.hall_cabinet_lights_lights
             */
            ha_entity_id: string;
            /**
             * @description A HA device entity attribute.
             * @example brightness
             */
            ha_attribute: string;
        };
        /**
         * Update Home Assistant Device Chanel
         * @description Schema for updating a Home Assistant channel property.
         */
        DevicesHomeAssistantPluginUpdateHomeAssistantChannelProperty: components["schemas"]["DevicesModuleUpdateChannelProperty"] & {
            /**
             * @description A HA device entity identifier.
             * @example light.hall_cabinet_lights_lights
             */
            ha_entity_id?: string;
            /**
             * @description A HA device entity attribute.
             * @example brightness
             */
            ha_attribute?: string;
        };
        /**
         * Home Assistant Discovered Device
         * @description Represents a device discovered from a connected Home Assistant instance, including its associated entities and current states.
         */
        DevicesHomeAssistantPluginDiscoveredDevice: {
            /** @description Home Assistant device ID. */
            id: string;
            /** @description Display name of the device. */
            name: string;
            /** @description List of entity IDs belonging to the device. */
            entities: string[];
            /**
             * Format: uuid
             * @description If adopted, the UUID of the corresponding panel device.
             * @example 332dda32-b7de-4557-956a-b6ed6c6799a4
             */
            adopted_device_id: string | null;
            /** @description Current states of all entities belonging to the device. */
            states: components["schemas"]["DevicesHomeAssistantPluginState"][];
        };
        /**
         * Home Assistant State
         * @description A representation of an individual Home Assistant entity's state and metadata.
         */
        DevicesHomeAssistantPluginState: {
            /** @description The unique ID of the Home Assistant entity (e.g. 'light.kitchen'). */
            entity_id: string;
            /**
             * @description Current state of the entity (e.g. 'on', 'off', 'home', etc.).
             * @default null
             * @example 22.1
             */
            state: ((number | null) | (string | null) | (boolean | null) | null) | null;
            /** @description Dynamic attributes of the entity such as friendly_name, unit_of_measurement, etc. */
            attributes: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description Timestamp of the last state change.
             * @example 2025-01-25T12:00:00Z
             */
            last_changed: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last report (may match last_updated).
             * @example 2025-01-25T12:00:00Z
             */
            last_reported: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the last entity update.
             * @example 2025-01-25T12:00:00Z
             */
            last_updated: string | null;
        };
        /**
         * Home Assistant Device Response
         * @description Response schema containing a single Home Assistant devices.
         */
        DevicesHomeAssistantPluginResDiscoveredDevice: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/plugins/devices-home-assistant-plugin/discovered-devices/2fcdc656a7ae51e33482c8314b1d32b9
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesHomeAssistantPluginDiscoveredDevice"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Home Assistant Devices Response
         * @description Response schema containing a list of Home Assistant devices.
         */
        DevicesHomeAssistantPluginResDiscoveredDevices: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/plugins/devices-home-assistant-plugin/discovered-devices
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesHomeAssistantPluginDiscoveredDevice"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Home Assistant State Response
         * @description Response schema containing a single Home Assistant state.
         */
        DevicesHomeAssistantPluginResState: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/plugins/devices-home-assistant-plugin/states/sensor.hall_heater_floot_temperature
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesHomeAssistantPluginState"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Home Assistant States Response
         * @description Response schema containing a list of Home Assistant states.
         */
        DevicesHomeAssistantPluginResStates: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/plugins/devices-home-assistant-plugin/states
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["DevicesHomeAssistantPluginState"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Tiles Page
         * @description A tiles page dashboard type, displaying a grid of customizable tiles.
         */
        PagesTilesPluginTilesPage: Omit<components["schemas"]["DashboardModulePage"], "type"> & {
            /** @description A list of tiles associated with the tiles page. */
            tiles: components["schemas"]["DashboardModuleTile"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tiles";
        };
        /**
         * Create Tiles Page
         * @description The schema for creating a tiles dashboard page.
         */
        PagesTilesPluginCreateTilesPage: Omit<components["schemas"]["DashboardModuleCreatePage"], "type"> & {
            /** @description A list of tiles associated with the tiles page. */
            tiles?: components["schemas"]["DashboardModuleCreateTile"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tiles";
        };
        /**
         * Update Tiles Page
         * @description Schema for updating a tiles page in the dashboard.
         */
        PagesTilesPluginUpdateTilesPage: Omit<components["schemas"]["DashboardModuleUpdatePage"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tiles";
        };
        /**
         * Device Page
         * @description A dashboard page type associated with a specific device.
         */
        PagesDeviceDetailPluginDeviceDetailPage: Omit<components["schemas"]["DashboardModulePage"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-detail";
        };
        /**
         * Create Device Page
         * @description The schema for creating a device dashboard page.
         */
        PagesDeviceDetailPluginCreateDeviceDetailPage: Omit<components["schemas"]["DashboardModuleCreatePage"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-detail";
        };
        /**
         * Update Device Page
         * @description Schema for updating a device page in the dashboard.
         */
        PagesDeviceDetailPluginUpdateDeviceDetailPage: Omit<components["schemas"]["DashboardModuleUpdatePage"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-detail";
        };
        /**
         * Device Tile
         * @description A dashboard tile associated with a specific device.
         */
        TilesDevicePreviewPluginDevicePreviewTile: Omit<components["schemas"]["DashboardModuleTile"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device: string;
            /**
             * @description The icon representing the device tile.
             * @example icon-name
             */
            icon: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-preview";
        };
        /**
         * Create Device Tile
         * @description Schema for creating a dashboard tile representing a device.
         */
        TilesDevicePreviewPluginCreateDevicePreviewTile: Omit<components["schemas"]["DashboardModuleCreateTile"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device: string;
            /**
             * @description The icon representing the tile.
             * @example icon-name
             */
            icon?: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-preview";
        };
        /**
         * Update Device Tile
         * @description Schema for updating a device tile in the dashboard.
         */
        TilesDevicePreviewPluginUpdateDevicePreviewTile: Omit<components["schemas"]["DashboardModuleUpdateTile"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device?: string;
            /**
             * @description The icon representing the tile.
             * @example icon-name
             */
            icon?: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-preview";
        };
        /**
         * Time Tile
         * @description A dashboard tile displaying a clock.
         */
        TilesTimePluginTimeTile: Omit<components["schemas"]["DashboardModuleTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "clock";
        };
        /**
         * Create Time Tile
         * @description Schema for creating a dashboard tile representing a clock.
         */
        TilesTimePluginCreateTimeTile: Omit<components["schemas"]["DashboardModuleCreateTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "clock";
        };
        /**
         * Update Time Tile
         * @description Schema for updating a time tile (clock) in the dashboard.
         */
        TilesTimePluginUpdateTimeTile: Omit<components["schemas"]["DashboardModuleUpdateTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "clock";
        };
        /**
         * Day Weather Tile
         * @description A dashboard tile displaying the weather for a specific day.
         */
        TilesWeatherPluginDayWeatherTile: Omit<components["schemas"]["DashboardModuleTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "weather-day";
        };
        /**
         * Forecast Weather Tile
         * @description A dashboard tile displaying a weather forecast.
         */
        TilesWeatherPluginForecastWeatherTile: Omit<components["schemas"]["DashboardModuleTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "weather-forecast";
        };
        /**
         * Create Day Weather Tile
         * @description Schema for creating a dashboard tile representing day weather.
         */
        TilesWeatherPluginCreateDayWeatherTile: Omit<components["schemas"]["DashboardModuleCreateTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "weather-day";
        };
        /**
         * Create Forecast Weather Tile
         * @description Schema for creating a dashboard tile representing weather forecast.
         */
        TilesWeatherPluginCreateForecastWeatherTile: Omit<components["schemas"]["DashboardModuleCreateTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "weather-forecast";
        };
        /**
         * Update Day Weather Tile
         * @description Schema for updating a day weather tile in the dashboard.
         */
        TilesWeatherPluginUpdateDayWeatherTile: Omit<components["schemas"]["DashboardModuleUpdateTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "weather-day";
        };
        /**
         * Update Forecast Weather Tile
         * @description Schema for updating a forecast weather tile in the dashboard.
         */
        TilesWeatherPluginUpdateForecastWeatherTile: Omit<components["schemas"]["DashboardModuleUpdateTile"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "weather-forecast";
        };
        /**
         * Device Channel Data Source
         * @description A data source linked to a specific device channel and property.
         */
        DataSourcesDeviceChannelPluginDeviceChannelDataSource: Omit<components["schemas"]["DashboardModuleDataSource"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 234e5678-a89b-22d3-c456-426614174133
             */
            device: string;
            /**
             * Format: uuid
             * @description The unique identifier of the associated channel.
             * @example 345e6789-b89c-32d4-d567-526715184244
             */
            channel: string;
            /**
             * Format: uuid
             * @description The unique identifier of the associated channel property.
             * @example 456e7890-c89d-42d5-e678-626816194355
             */
            property: string;
            /**
             * @description The icon representing the data source.
             * @default null
             * @example icon-name
             */
            icon: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-channel";
        };
        /**
         * Create Device Channel Data Source
         * @description Schema for creating a data source linked to a device channel and property.
         */
        DataSourcesDeviceChannelPluginCreateDeviceChannelDataSource: Omit<components["schemas"]["DashboardModuleCreateDataSource"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device: string;
            /**
             * Format: uuid
             * @description The unique identifier of the associated channel within the device.
             * @example e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7
             */
            channel: string;
            /**
             * Format: uuid
             * @description The unique identifier of the associated property within the channel.
             * @example 3d988def-559f-498c-a804-5111aba2df66
             */
            property: string;
            /**
             * @description The icon representing the data source.
             * @example icon-name
             */
            icon?: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-channel";
        };
        /**
         * Update Device Channel Data Source
         * @description Schema for updating a device channel data source in the dashboard.
         */
        DataSourcesDeviceChannelPluginUpdateDeviceChannelDataSource: Omit<components["schemas"]["DashboardModuleUpdateDataSource"], "type"> & {
            /**
             * Format: uuid
             * @description The unique identifier of the associated device.
             * @example 4751ac17-9d97-4fb9-932b-dad617c3e66b
             */
            device?: string;
            /**
             * Format: uuid
             * @description The unique identifier of the associated channel within the device.
             * @example e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7
             */
            channel?: string;
            /**
             * Format: uuid
             * @description The unique identifier of the associated property within the channel.
             * @example 3d988def-559f-498c-a804-5111aba2df66
             */
            property?: string;
            /**
             * @description The icon representing the data source.
             * @example icon-name
             */
            icon?: string | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "device-channel";
        };
        /**
         * Cards Page
         * @description A cards page dashboard type, displaying an overview with associated cards.
         */
        PagesCardsPluginCardsPage: Omit<components["schemas"]["DashboardModulePage"], "type"> & {
            /** @description A list of cards associated with the page. */
            cards: components["schemas"]["PagesCardsPluginCard"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cards";
        };
        /**
         * Card
         * @description Represents a card in the dashboard page, with its associated tiles and data sources.
         */
        PagesCardsPluginCard: {
            /**
             * Format: uuid
             * @description A unique identifier for the dashboard card.
             * @example 7943c740-52b6-4e18-a136-cf39061ac869
             */
            readonly id: string;
            /**
             * @description The title displayed on the dashboard card.
             * @example Mood lights
             */
            title: string;
            /**
             * @description The icon representing the dashboard card.
             * @default null
             * @example icon-name
             */
            icon: string | null;
            /**
             * Format: int32
             * @description Defines the position of the card relative to others on the dashboard page.
             * @default 0
             * @example 1
             */
            order: number;
            /**
             * Format: uuid
             * @description The unique identifier of the page this card belongs to.
             * @example 602df00f-0cc9-45dd-a74f-3a28f0e8c8ee
             */
            page: string;
            /** @description A list of tiles associated with the dashboard card, representing widgets or functional components. */
            tiles: components["schemas"]["DashboardModuleTile"][];
            /** @description A list of data sources used by the card, typically for real-time updates. */
            data_source: components["schemas"]["DashboardModuleDataSource"][];
            /**
             * Format: date-time
             * @description The timestamp when the dashboard card was created.
             * @example 2025-01-25T12:00:00Z
             */
            readonly created_at: string;
            /**
             * Format: date-time
             * @description The timestamp when the dashboard card was last updated.
             * @default null
             * @example 2025-01-25T13:00:00Z
             */
            readonly updated_at: string | null;
        };
        /**
         * Create Cards Page
         * @description The schema for creating a cards dashboard page.
         */
        PagesCardsPluginCreateCardsPage: Omit<components["schemas"]["DashboardModuleCreatePage"], "type"> & {
            /** @description A list of cards associated with the page. */
            cards?: components["schemas"]["PagesCardsPluginCreateCard"][];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cards";
        };
        /**
         * Create Card
         * @description Schema for creating a dashboard card, containing attributes such as title and icon.
         */
        PagesCardsPluginCreateCard: {
            /**
             * Format: uuid
             * @description The unique identifier for the dashboard card (optional during creation).
             * @example 7943c740-52b6-4e18-a136-cf39061ac869
             */
            id?: string;
            /**
             * @description The title displayed on the dashboard card.
             * @example Mood lights
             */
            title: string;
            /**
             * @description The icon representing the dashboard card.
             * @default null
             * @example icon-name
             */
            icon?: string | null;
            /**
             * Format: int32
             * @description Defines the position of the card relative to others on the dashboard page.
             * @example 1
             */
            order?: number;
            /** @description A list of tiles associated with the dashboard card, representing widgets or functional components. */
            tiles?: components["schemas"]["DashboardModuleCreateTile"][];
            /** @description A list of data sources used by the card, typically for real-time updates. */
            data_source?: components["schemas"]["DashboardModuleCreateDataSource"][];
        };
        /**
         * Update Cards Page
         * @description Schema for updating a cards page in the dashboard.
         */
        PagesCardsPluginUpdateCardsPage: Omit<components["schemas"]["DashboardModuleUpdatePage"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cards";
        };
        /**
         * Update Card
         * @description Schema for updating a card in the dashboard.
         */
        PagesCardsPluginUpdateCard: {
            /**
             * @description The title displayed on the dashboard card.
             * @example Mood lights
             */
            title?: string;
            /**
             * @description The icon representing the dashboard card.
             * @default null
             * @example icon-name
             */
            icon?: string | null;
            /**
             * Format: int32
             * @description Defines the position of the card relative to others on the dashboard page.
             * @example 1
             */
            order?: number;
        };
        /**
         * Create Page Card Request
         * @description Request schema for creating new page card.
         */
        PagesCardsPluginReqCreateCard: {
            data: components["schemas"]["PagesCardsPluginCreateCard"] & {
                /**
                 * Format: uuid
                 * @description A unique parent page identifier.
                 * @example dbf838d6-5c5b-4c8e-b189-952038b9020c
                 */
                readonly page: string;
            };
        };
        /**
         * Update Card Request
         * @description Request schema for updating an existing card.
         */
        PagesCardsPluginReqUpdateCard: {
            data: components["schemas"]["PagesCardsPluginUpdateCard"];
        };
        /**
         * Page Card Response
         * @description Response schema containing a single page card.
         */
        PagesCardsPluginResCard: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["PagesCardsPluginCard"];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * Page Cards Response
         * @description Response schema containing a list of page cards.
         */
        PagesCardsPluginResCards: {
            /**
             * @description Indicates whether the API request was successful (`success`) or encountered an error (`error`).
             * @example success
             */
            readonly status: string;
            /**
             * Format: date-time
             * @description Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
             * @example 2025-01-18T12:00:00Z
             */
            readonly timestamp: string;
            /**
             * Format: uuid
             * @description A unique identifier assigned to this API request. Useful for debugging and tracking API calls.
             * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
             */
            readonly request_id: string;
            /**
             * @description The API endpoint that was requested, including any dynamic parameters.
             * @example /api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards
             */
            readonly path: string;
            /**
             * @description The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).
             * @example GET
             * @enum {string}
             */
            readonly method: "GET" | "POST" | "PATCH" | "DELETE";
            /** @description The actual data payload returned by the API. The structure depends on the specific endpoint response. */
            data: components["schemas"]["PagesCardsPluginCard"][];
            /** @description Additional metadata about the request and server performance metrics. */
            metadata: components["schemas"]["CommonResMetadata"];
        };
        /**
         * CommonResMetadata
         * @description Additional metadata about the request and server performance metrics.
         */
        CommonResMetadata: {
            /**
             * Format: float
             * @description The total time taken to process the request, in milliseconds.
             * @example 57
             */
            readonly request_duration_ms: number;
            /**
             * Format: date-time
             * @description The server's current timestamp when the response was generated, in ISO 8601 format.
             * @example 2025-01-18T12:00:00Z
             */
            readonly server_time: string;
            /**
             * Format: float
             * @description The CPU usage percentage at the time of processing the request. This can be useful for performance monitoring.
             * @example 25.28
             */
            readonly cpu_usage: number;
        };
    };
    responses: {
        /** @description An unexpected server error occurred. */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example error */
                    readonly status: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the error occurred in ISO 8601 format.
                     * @example 2025-01-18T12:00:00Z
                     */
                    readonly timestamp: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for this specific API request.
                     * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
                     */
                    readonly request_id: string;
                    /**
                     * @description The requested API endpoint.
                     * @example /api/v1/devices-module
                     */
                    readonly path: string;
                    /**
                     * @example GET
                     * @enum {string}
                     */
                    readonly method: "GET" | "POST" | "PATCH" | "DELETE";
                    error: {
                        /**
                         * @description Short error code indicating the type of error.
                         * @example InternalServerError
                         */
                        readonly code: string;
                        /**
                         * @description Detailed error message for debugging or client display.
                         * @example An unexpected error occurred.
                         */
                        readonly message: string;
                        /** @description Additional information about the error, if available. */
                        details?: {
                            /** @example name */
                            readonly field?: string;
                            /** @example Name cannot contain special characters. */
                            readonly reason?: string;
                        } | {
                            /** @example name */
                            readonly field?: string;
                            /** @example Name cannot contain special characters. */
                            readonly reason?: string;
                        }[];
                    };
                    metadata: {
                        /**
                         * Format: date-time
                         * @example 2025-01-18T12:00:00Z
                         */
                        readonly server_time: string;
                        /**
                         * Format: float
                         * @example 30.73
                         */
                        readonly cpu_usage: number;
                    };
                };
            };
        };
        /** @description The requested resource was not found. */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @default error
                     * @example error
                     */
                    readonly status: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the error occurred in ISO 8601 format.
                     * @example 2025-01-18T12:00:00Z
                     */
                    readonly timestamp: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for this specific API request.
                     * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
                     */
                    readonly request_id: string;
                    /**
                     * @description The requested API endpoint.
                     * @example /api/v1/devices-module
                     */
                    readonly path: string;
                    /**
                     * @example GET
                     * @enum {string}
                     */
                    readonly method: "GET" | "POST" | "PATCH" | "DELETE";
                    error: {
                        /**
                         * @description Short error code indicating the type of error.
                         * @example NotFoundError
                         */
                        readonly code: string;
                        /**
                         * @description Detailed error message for debugging or client display.
                         * @example The specified resource was not found.
                         */
                        readonly message: string;
                        /** @description Additional information about the error, if available. */
                        details?: {
                            /** @example id */
                            readonly field?: string;
                            /** @example resource not found */
                            readonly reason?: string;
                        } | {
                            readonly field?: string;
                            readonly reason?: string;
                        }[];
                    };
                    metadata: {
                        /**
                         * Format: date-time
                         * @example 2025-01-18T12:00:00Z
                         */
                        readonly server_time: string;
                        /**
                         * Format: float
                         * @example 30.73
                         */
                        readonly cpu_usage: number;
                    };
                };
            };
        };
        /** @description The request parameters were invalid. */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @example error */
                    readonly status: string;
                    /**
                     * Format: date-time
                     * @description Timestamp when the error occurred in ISO 8601 format.
                     * @example 2025-01-18T12:00:00Z
                     */
                    readonly timestamp: string;
                    /**
                     * Format: uuid
                     * @description Unique identifier for this specific API request.
                     * @example b27b7c58-76f6-407a-bc78-4068e4cfd082
                     */
                    readonly request_id: string;
                    /**
                     * @description The requested API endpoint.
                     * @example /api/v1/devices-module
                     */
                    readonly path: string;
                    /**
                     * @example GET
                     * @enum {string}
                     */
                    readonly method: "GET" | "POST" | "PATCH" | "DELETE";
                    error: {
                        /**
                         * @description Short error code indicating the type of error.
                         * @example BadRequestError
                         */
                        readonly code: string;
                        /**
                         * @description Detailed error message for debugging or client display.
                         * @example The 'name' parameter is invalid.
                         */
                        readonly message: string;
                        /** @description Additional information about the error, if available. */
                        details?: {
                            /** @example name */
                            readonly field?: string;
                            /** @example Name cannot contain special characters. */
                            readonly reason?: string;
                        } | {
                            /** @example name */
                            readonly field?: string;
                            /** @example Name cannot contain special characters. */
                            readonly reason?: string;
                        }[];
                    };
                    metadata: {
                        /**
                         * Format: date-time
                         * @example 2025-01-18T12:00:00Z
                         */
                        readonly server_time: string;
                        /**
                         * Format: float
                         * @example 30.73
                         */
                        readonly cpu_usage: number;
                    };
                };
            };
        };
    };
    parameters: {
        /**
         * @description The ID of the resource to retrieve.
         * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
         */
        id: string;
        /**
         * @description The ID of the device to retrieve.
         * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
         */
        deviceId: string;
        /**
         * @description The ID of the channel to retrieve.
         * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
         */
        channelId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaAuthModuleRegister = components['schemas']['AuthModuleRegister'];
export type SchemaAuthModuleCheckUsername = components['schemas']['AuthModuleCheckUsername'];
export type SchemaAuthModuleCheckEmail = components['schemas']['AuthModuleCheckEmail'];
export type SchemaAuthModuleLogin = components['schemas']['AuthModuleLogin'];
export type SchemaAuthModuleRefreshToken = components['schemas']['AuthModuleRefreshToken'];
export type SchemaAuthModuleTokenPair = components['schemas']['AuthModuleTokenPair'];
export type SchemaAuthModuleValidation = components['schemas']['AuthModuleValidation'];
export type SchemaAuthModuleDisplaySecret = components['schemas']['AuthModuleDisplaySecret'];
export type SchemaAuthModuleReqRegister = components['schemas']['AuthModuleReqRegister'];
export type SchemaAuthModuleReqCheckUsername = components['schemas']['AuthModuleReqCheckUsername'];
export type SchemaAuthModuleReqCheckEmail = components['schemas']['AuthModuleReqCheckEmail'];
export type SchemaAuthModuleReqLogin = components['schemas']['AuthModuleReqLogin'];
export type SchemaAuthModuleReqRefreshToken = components['schemas']['AuthModuleReqRefreshToken'];
export type SchemaAuthModuleResCheckUsername = components['schemas']['AuthModuleResCheckUsername'];
export type SchemaAuthModuleResCheckEmail = components['schemas']['AuthModuleResCheckEmail'];
export type SchemaAuthModuleResLogin = components['schemas']['AuthModuleResLogin'];
export type SchemaAuthModuleResRefresh = components['schemas']['AuthModuleResRefresh'];
export type SchemaAuthModuleResRegisterDisplay = components['schemas']['AuthModuleResRegisterDisplay'];
export type SchemaAuthModuleResProfile = components['schemas']['AuthModuleResProfile'];
export type SchemaUsersModuleUser = components['schemas']['UsersModuleUser'];
export type SchemaUsersModuleCreateUser = components['schemas']['UsersModuleCreateUser'];
export type SchemaUsersModuleUpdateUser = components['schemas']['UsersModuleUpdateUser'];
export type SchemaUsersModuleReqCreateUser = components['schemas']['UsersModuleReqCreateUser'];
export type SchemaUsersModuleReqUpdateUser = components['schemas']['UsersModuleReqUpdateUser'];
export type SchemaUsersModuleResUser = components['schemas']['UsersModuleResUser'];
export type SchemaUsersModuleResUsers = components['schemas']['UsersModuleResUsers'];
export type SchemaConfigModuleAudio = components['schemas']['ConfigModuleAudio'];
export type SchemaConfigModuleDisplay = components['schemas']['ConfigModuleDisplay'];
export type SchemaConfigModuleLanguage = components['schemas']['ConfigModuleLanguage'];
export type SchemaConfigModuleWeather = components['schemas']['ConfigModuleWeather'];
export type SchemaConfigModulePlugin = components['schemas']['ConfigModulePlugin'];
export type SchemaConfigModuleApp = components['schemas']['ConfigModuleApp'];
export type SchemaConfigModuleUpdateAudio = components['schemas']['ConfigModuleUpdateAudio'];
export type SchemaConfigModuleUpdateDisplay = components['schemas']['ConfigModuleUpdateDisplay'];
export type SchemaConfigModuleUpdateLanguage = components['schemas']['ConfigModuleUpdateLanguage'];
export type SchemaConfigModuleUpdateWeather = components['schemas']['ConfigModuleUpdateWeather'];
export type SchemaConfigModuleUpdatePlugin = components['schemas']['ConfigModuleUpdatePlugin'];
export type SchemaConfigModuleReqUpdateSection = components['schemas']['ConfigModuleReqUpdateSection'];
export type SchemaConfigModuleReqUpdatePlugin = components['schemas']['ConfigModuleReqUpdatePlugin'];
export type SchemaConfigModuleResApp = components['schemas']['ConfigModuleResApp'];
export type SchemaConfigModuleResSection = components['schemas']['ConfigModuleResSection'];
export type SchemaConfigModuleResPlugin = components['schemas']['ConfigModuleResPlugin'];
export type SchemaDevicesModuleDevice = components['schemas']['DevicesModuleDevice'];
export type SchemaDevicesModuleDeviceControl = components['schemas']['DevicesModuleDeviceControl'];
export type SchemaDevicesModuleChannel = components['schemas']['DevicesModuleChannel'];
export type SchemaDevicesModuleChannelControl = components['schemas']['DevicesModuleChannelControl'];
export type SchemaDevicesModuleChannelProperty = components['schemas']['DevicesModuleChannelProperty'];
export type SchemaDevicesModuleCreateDevice = components['schemas']['DevicesModuleCreateDevice'];
export type SchemaDevicesModuleCreateDeviceControl = components['schemas']['DevicesModuleCreateDeviceControl'];
export type SchemaDevicesModuleCreateDeviceChannel = components['schemas']['DevicesModuleCreateDeviceChannel'];
export type SchemaDevicesModuleCreateChannel = components['schemas']['DevicesModuleCreateChannel'];
export type SchemaDevicesModuleCreateChannelControl = components['schemas']['DevicesModuleCreateChannelControl'];
export type SchemaDevicesModuleCreateChannelProperty = components['schemas']['DevicesModuleCreateChannelProperty'];
export type SchemaDevicesModuleUpdateDevice = components['schemas']['DevicesModuleUpdateDevice'];
export type SchemaDevicesModuleUpdateChannel = components['schemas']['DevicesModuleUpdateChannel'];
export type SchemaDevicesModuleUpdateChannelProperty = components['schemas']['DevicesModuleUpdateChannelProperty'];
export type SchemaDevicesModuleReqCreateDevice = components['schemas']['DevicesModuleReqCreateDevice'];
export type SchemaDevicesModuleReqCreateDeviceControl = components['schemas']['DevicesModuleReqCreateDeviceControl'];
export type SchemaDevicesModuleReqCreateDeviceChannel = components['schemas']['DevicesModuleReqCreateDeviceChannel'];
export type SchemaDevicesModuleReqCreateChannel = components['schemas']['DevicesModuleReqCreateChannel'];
export type SchemaDevicesModuleReqCreateChannelControl = components['schemas']['DevicesModuleReqCreateChannelControl'];
export type SchemaDevicesModuleReqCreateChannelProperty = components['schemas']['DevicesModuleReqCreateChannelProperty'];
export type SchemaDevicesModuleReqUpdateDevice = components['schemas']['DevicesModuleReqUpdateDevice'];
export type SchemaDevicesModuleReqUpdateChannel = components['schemas']['DevicesModuleReqUpdateChannel'];
export type SchemaDevicesModuleReqUpdateChannelProperty = components['schemas']['DevicesModuleReqUpdateChannelProperty'];
export type SchemaDevicesModuleResDevice = components['schemas']['DevicesModuleResDevice'];
export type SchemaDevicesModuleResDevices = components['schemas']['DevicesModuleResDevices'];
export type SchemaDevicesModuleResDeviceControl = components['schemas']['DevicesModuleResDeviceControl'];
export type SchemaDevicesModuleResDeviceControls = components['schemas']['DevicesModuleResDeviceControls'];
export type SchemaDevicesModuleResDeviceChannel = components['schemas']['DevicesModuleResDeviceChannel'];
export type SchemaDevicesModuleResDeviceChannels = components['schemas']['DevicesModuleResDeviceChannels'];
export type SchemaDevicesModuleResChannel = components['schemas']['DevicesModuleResChannel'];
export type SchemaDevicesModuleResChannels = components['schemas']['DevicesModuleResChannels'];
export type SchemaDevicesModuleResChannelControl = components['schemas']['DevicesModuleResChannelControl'];
export type SchemaDevicesModuleResChannelControls = components['schemas']['DevicesModuleResChannelControls'];
export type SchemaDevicesModuleResChannelProperty = components['schemas']['DevicesModuleResChannelProperty'];
export type SchemaDevicesModuleResChannelProperties = components['schemas']['DevicesModuleResChannelProperties'];
export type SchemaDevicesModuleDeviceCategory = components['schemas']['DevicesModuleDeviceCategory'];
export type SchemaDevicesModuleChannelCategory = components['schemas']['DevicesModuleChannelCategory'];
export type SchemaDevicesModuleChannelPropertyCategory = components['schemas']['DevicesModuleChannelPropertyCategory'];
export type SchemaDashboardModulePage = components['schemas']['DashboardModulePage'];
export type SchemaDashboardModuleTile = components['schemas']['DashboardModuleTile'];
export type SchemaDashboardModuleDataSource = components['schemas']['DashboardModuleDataSource'];
export type SchemaDashboardModuleCreatePage = components['schemas']['DashboardModuleCreatePage'];
export type SchemaDashboardModuleCreateTile = components['schemas']['DashboardModuleCreateTile'];
export type SchemaDashboardModuleCreateDataSource = components['schemas']['DashboardModuleCreateDataSource'];
export type SchemaDashboardModuleUpdatePage = components['schemas']['DashboardModuleUpdatePage'];
export type SchemaDashboardModuleUpdateTile = components['schemas']['DashboardModuleUpdateTile'];
export type SchemaDashboardModuleUpdateDataSource = components['schemas']['DashboardModuleUpdateDataSource'];
export type SchemaDashboardModuleReqCreatePage = components['schemas']['DashboardModuleReqCreatePage'];
export type SchemaDashboardModuleReqCreateTile = components['schemas']['DashboardModuleReqCreateTile'];
export type SchemaDashboardModuleReqCreateTileWithParent = components['schemas']['DashboardModuleReqCreateTileWithParent'];
export type SchemaDashboardModuleReqCreateDataSource = components['schemas']['DashboardModuleReqCreateDataSource'];
export type SchemaDashboardModuleReqCreateDataSourceWithParent = components['schemas']['DashboardModuleReqCreateDataSourceWithParent'];
export type SchemaDashboardModuleReqUpdatePage = components['schemas']['DashboardModuleReqUpdatePage'];
export type SchemaDashboardModuleReqUpdateTile = components['schemas']['DashboardModuleReqUpdateTile'];
export type SchemaDashboardModuleReqUpdateDataSource = components['schemas']['DashboardModuleReqUpdateDataSource'];
export type SchemaDashboardModuleResPage = components['schemas']['DashboardModuleResPage'];
export type SchemaDashboardModuleResPages = components['schemas']['DashboardModuleResPages'];
export type SchemaDashboardModuleResTile = components['schemas']['DashboardModuleResTile'];
export type SchemaDashboardModuleResTiles = components['schemas']['DashboardModuleResTiles'];
export type SchemaDashboardModuleResDataSource = components['schemas']['DashboardModuleResDataSource'];
export type SchemaDashboardModuleResDataSources = components['schemas']['DashboardModuleResDataSources'];
export type SchemaSystemModuleMemoryInfo = components['schemas']['SystemModuleMemoryInfo'];
export type SchemaSystemModuleStorageInfo = components['schemas']['SystemModuleStorageInfo'];
export type SchemaSystemModuleTemperatureInfo = components['schemas']['SystemModuleTemperatureInfo'];
export type SchemaSystemModuleOperatingSystemInfo = components['schemas']['SystemModuleOperatingSystemInfo'];
export type SchemaSystemModuleDisplayInfo = components['schemas']['SystemModuleDisplayInfo'];
export type SchemaSystemModuleNetworkStats = components['schemas']['SystemModuleNetworkStats'];
export type SchemaSystemModuleDefaultNetwork = components['schemas']['SystemModuleDefaultNetwork'];
export type SchemaSystemModuleSystemInfo = components['schemas']['SystemModuleSystemInfo'];
export type SchemaSystemModuleThrottleStatus = components['schemas']['SystemModuleThrottleStatus'];
export type SchemaSystemModuleResSystemInfo = components['schemas']['SystemModuleResSystemInfo'];
export type SchemaSystemModuleResThrottleStatus = components['schemas']['SystemModuleResThrottleStatus'];
export type SchemaWeatherModuleWeather = components['schemas']['WeatherModuleWeather'];
export type SchemaWeatherModuleWind = components['schemas']['WeatherModuleWind'];
export type SchemaWeatherModuleLocation = components['schemas']['WeatherModuleLocation'];
export type SchemaWeatherModuleCurrentDay = components['schemas']['WeatherModuleCurrentDay'];
export type SchemaWeatherModuleForecastDay = components['schemas']['WeatherModuleForecastDay'];
export type SchemaWeatherModuleLocationWeather = components['schemas']['WeatherModuleLocationWeather'];
export type SchemaWeatherModuleGeolocation = components['schemas']['WeatherModuleGeolocation'];
export type SchemaWeatherModuleResLocationWeather = components['schemas']['WeatherModuleResLocationWeather'];
export type SchemaWeatherModuleResLocationCurrent = components['schemas']['WeatherModuleResLocationCurrent'];
export type SchemaWeatherModuleResLocationForecast = components['schemas']['WeatherModuleResLocationForecast'];
export type SchemaWeatherModuleResGeolocationCityToCoordinates = components['schemas']['WeatherModuleResGeolocationCityToCoordinates'];
export type SchemaWeatherModuleResGeolocationCoordinatesToCity = components['schemas']['WeatherModuleResGeolocationCoordinatesToCity'];
export type SchemaDevicesThirdPartyPluginThirdPartyDevice = components['schemas']['DevicesThirdPartyPluginThirdPartyDevice'];
export type SchemaDevicesThirdPartyPluginCreateThirdPartyDevice = components['schemas']['DevicesThirdPartyPluginCreateThirdPartyDevice'];
export type SchemaDevicesThirdPartyPluginUpdateThirdPartyDevice = components['schemas']['DevicesThirdPartyPluginUpdateThirdPartyDevice'];
export type SchemaDevicesThirdPartyPluginThirdPartyChannel = components['schemas']['DevicesThirdPartyPluginThirdPartyChannel'];
export type SchemaDevicesThirdPartyPluginCreateThirdPartyChannel = components['schemas']['DevicesThirdPartyPluginCreateThirdPartyChannel'];
export type SchemaDevicesThirdPartyPluginUpdateThirdPartyChannel = components['schemas']['DevicesThirdPartyPluginUpdateThirdPartyChannel'];
export type SchemaDevicesThirdPartyPluginThirdPartyChannelProperty = components['schemas']['DevicesThirdPartyPluginThirdPartyChannelProperty'];
export type SchemaDevicesThirdPartyPluginCreateThirdPartyChannelProperty = components['schemas']['DevicesThirdPartyPluginCreateThirdPartyChannelProperty'];
export type SchemaDevicesThirdPartyPluginUpdateThirdPartyChannelProperty = components['schemas']['DevicesThirdPartyPluginUpdateThirdPartyChannelProperty'];
export type SchemaDevicesThirdPartyPluginPropertyUpdateRequest = components['schemas']['DevicesThirdPartyPluginPropertyUpdateRequest'];
export type SchemaDevicesThirdPartyPluginPropertiesUpdateRequest = components['schemas']['DevicesThirdPartyPluginPropertiesUpdateRequest'];
export type SchemaDevicesThirdPartyPluginPropertyUpdateResult = components['schemas']['DevicesThirdPartyPluginPropertyUpdateResult'];
export type SchemaDevicesThirdPartyPluginPropertiesUpdateResult = components['schemas']['DevicesThirdPartyPluginPropertiesUpdateResult'];
export type SchemaDevicesThirdPartyPluginErrorCode = components['schemas']['DevicesThirdPartyPluginErrorCode'];
export type SchemaDevicesHomeAssistantPluginHomeAssistantDevice = components['schemas']['DevicesHomeAssistantPluginHomeAssistantDevice'];
export type SchemaDevicesHomeAssistantPluginCreateHomeAssistantDevice = components['schemas']['DevicesHomeAssistantPluginCreateHomeAssistantDevice'];
export type SchemaDevicesHomeAssistantPluginUpdateHomeAssistantDevice = components['schemas']['DevicesHomeAssistantPluginUpdateHomeAssistantDevice'];
export type SchemaDevicesHomeAssistantPluginHomeAssistantChannel = components['schemas']['DevicesHomeAssistantPluginHomeAssistantChannel'];
export type SchemaDevicesHomeAssistantPluginCreateHomeAssistantChannel = components['schemas']['DevicesHomeAssistantPluginCreateHomeAssistantChannel'];
export type SchemaDevicesHomeAssistantPluginUpdateHomeAssistantChannel = components['schemas']['DevicesHomeAssistantPluginUpdateHomeAssistantChannel'];
export type SchemaDevicesHomeAssistantPluginHomeAssistantChannelProperty = components['schemas']['DevicesHomeAssistantPluginHomeAssistantChannelProperty'];
export type SchemaDevicesHomeAssistantPluginCreateHomeAssistantChannelProperty = components['schemas']['DevicesHomeAssistantPluginCreateHomeAssistantChannelProperty'];
export type SchemaDevicesHomeAssistantPluginUpdateHomeAssistantChannelProperty = components['schemas']['DevicesHomeAssistantPluginUpdateHomeAssistantChannelProperty'];
export type SchemaDevicesHomeAssistantPluginDiscoveredDevice = components['schemas']['DevicesHomeAssistantPluginDiscoveredDevice'];
export type SchemaDevicesHomeAssistantPluginState = components['schemas']['DevicesHomeAssistantPluginState'];
export type SchemaDevicesHomeAssistantPluginResDiscoveredDevice = components['schemas']['DevicesHomeAssistantPluginResDiscoveredDevice'];
export type SchemaDevicesHomeAssistantPluginResDiscoveredDevices = components['schemas']['DevicesHomeAssistantPluginResDiscoveredDevices'];
export type SchemaDevicesHomeAssistantPluginResState = components['schemas']['DevicesHomeAssistantPluginResState'];
export type SchemaDevicesHomeAssistantPluginResStates = components['schemas']['DevicesHomeAssistantPluginResStates'];
export type SchemaPagesTilesPluginTilesPage = components['schemas']['PagesTilesPluginTilesPage'];
export type SchemaPagesTilesPluginCreateTilesPage = components['schemas']['PagesTilesPluginCreateTilesPage'];
export type SchemaPagesTilesPluginUpdateTilesPage = components['schemas']['PagesTilesPluginUpdateTilesPage'];
export type SchemaPagesDeviceDetailPluginDeviceDetailPage = components['schemas']['PagesDeviceDetailPluginDeviceDetailPage'];
export type SchemaPagesDeviceDetailPluginCreateDeviceDetailPage = components['schemas']['PagesDeviceDetailPluginCreateDeviceDetailPage'];
export type SchemaPagesDeviceDetailPluginUpdateDeviceDetailPage = components['schemas']['PagesDeviceDetailPluginUpdateDeviceDetailPage'];
export type SchemaTilesDevicePreviewPluginDevicePreviewTile = components['schemas']['TilesDevicePreviewPluginDevicePreviewTile'];
export type SchemaTilesDevicePreviewPluginCreateDevicePreviewTile = components['schemas']['TilesDevicePreviewPluginCreateDevicePreviewTile'];
export type SchemaTilesDevicePreviewPluginUpdateDevicePreviewTile = components['schemas']['TilesDevicePreviewPluginUpdateDevicePreviewTile'];
export type SchemaTilesTimePluginTimeTile = components['schemas']['TilesTimePluginTimeTile'];
export type SchemaTilesTimePluginCreateTimeTile = components['schemas']['TilesTimePluginCreateTimeTile'];
export type SchemaTilesTimePluginUpdateTimeTile = components['schemas']['TilesTimePluginUpdateTimeTile'];
export type SchemaTilesWeatherPluginDayWeatherTile = components['schemas']['TilesWeatherPluginDayWeatherTile'];
export type SchemaTilesWeatherPluginForecastWeatherTile = components['schemas']['TilesWeatherPluginForecastWeatherTile'];
export type SchemaTilesWeatherPluginCreateDayWeatherTile = components['schemas']['TilesWeatherPluginCreateDayWeatherTile'];
export type SchemaTilesWeatherPluginCreateForecastWeatherTile = components['schemas']['TilesWeatherPluginCreateForecastWeatherTile'];
export type SchemaTilesWeatherPluginUpdateDayWeatherTile = components['schemas']['TilesWeatherPluginUpdateDayWeatherTile'];
export type SchemaTilesWeatherPluginUpdateForecastWeatherTile = components['schemas']['TilesWeatherPluginUpdateForecastWeatherTile'];
export type SchemaDataSourcesDeviceChannelPluginDeviceChannelDataSource = components['schemas']['DataSourcesDeviceChannelPluginDeviceChannelDataSource'];
export type SchemaDataSourcesDeviceChannelPluginCreateDeviceChannelDataSource = components['schemas']['DataSourcesDeviceChannelPluginCreateDeviceChannelDataSource'];
export type SchemaDataSourcesDeviceChannelPluginUpdateDeviceChannelDataSource = components['schemas']['DataSourcesDeviceChannelPluginUpdateDeviceChannelDataSource'];
export type SchemaPagesCardsPluginCardsPage = components['schemas']['PagesCardsPluginCardsPage'];
export type SchemaPagesCardsPluginCard = components['schemas']['PagesCardsPluginCard'];
export type SchemaPagesCardsPluginCreateCardsPage = components['schemas']['PagesCardsPluginCreateCardsPage'];
export type SchemaPagesCardsPluginCreateCard = components['schemas']['PagesCardsPluginCreateCard'];
export type SchemaPagesCardsPluginUpdateCardsPage = components['schemas']['PagesCardsPluginUpdateCardsPage'];
export type SchemaPagesCardsPluginUpdateCard = components['schemas']['PagesCardsPluginUpdateCard'];
export type SchemaPagesCardsPluginReqCreateCard = components['schemas']['PagesCardsPluginReqCreateCard'];
export type SchemaPagesCardsPluginReqUpdateCard = components['schemas']['PagesCardsPluginReqUpdateCard'];
export type SchemaPagesCardsPluginResCard = components['schemas']['PagesCardsPluginResCard'];
export type SchemaPagesCardsPluginResCards = components['schemas']['PagesCardsPluginResCards'];
export type SchemaCommonResMetadata = components['schemas']['CommonResMetadata'];
export type ResponseInternalServerError = components['responses']['InternalServerError'];
export type ResponseNotFoundError = components['responses']['NotFoundError'];
export type ResponseBadRequestError = components['responses']['BadRequestError'];
export type ParameterId = components['parameters']['id'];
export type ParameterDeviceId = components['parameters']['deviceId'];
export type ParameterChannelId = components['parameters']['channelId'];
export type $defs = Record<string, never>;
export interface operations {
    "create-auth-module-register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Schema for user registration. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthModuleReqRegister"];
            };
        };
        responses: {
            /** @description User registered successfully. No content returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-auth-module-register-display": {
        parameters: {
            query?: never;
            header: {
                /** @description A string identifying the requesting device. Required for registering display-only users. */
                "User-Agent": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response returned after successfully registering a display-only user. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthModuleResRegisterDisplay"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-auth-module-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Schema for user authentication. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthModuleReqLogin"];
            };
        };
        responses: {
            /** @description Response returned after successful user login. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthModuleResLogin"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "validate-auth-module-check-username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks whether a username is already in use. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthModuleReqCheckUsername"];
            };
        };
        responses: {
            /** @description Response returned when checking the username if is taken. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthModuleResCheckUsername"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "validate-auth-module-check-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Checks whether an email address is already in use. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthModuleReqCheckEmail"];
            };
        };
        responses: {
            /** @description Response returned when checking the e-mail address if is taken. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthModuleResCheckEmail"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-auth-module-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing the authenticated user's profile details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthModuleResProfile"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-auth-module-refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Schema for user access token refresh. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AuthModuleReqRefreshToken"];
            };
        };
        responses: {
            /** @description Response returned after successful user access token refresh. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthModuleResRefresh"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-users-module-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of users successfully retrieved. Each user includes its metadata (ID, username, role). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersModuleResUsers"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-users-module-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The data required to create a new user */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersModuleReqCreateUser"];
            };
        };
        responses: {
            /** @description Response returned after successfully creating a user. */
            201: {
                headers: {
                    /** @description The URI of the newly created user resource, which can be used to retrieve, update, or delete the user. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersModuleResUser"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-users-module-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user details were successfully retrieved. The response contains detailed information about the user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersModuleResUser"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-users-module-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-users-module-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The data required to update a existing user */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsersModuleReqUpdateUser"];
            };
        };
        responses: {
            /** @description Response returned after successfully updating a user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersModuleResUser"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of devices successfully retrieved. Each device includes its metadata (ID, name, category), associated channels, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDevices"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The data required to create a new device */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateDevice"];
            };
        };
        responses: {
            /** @description The device was successfully created. The response body contains the complete representation of the device, including its unique ID, category, name, channels, controls, and properties. A Location header is also returned, containing the URI of the created device resource for future operations. */
            201: {
                headers: {
                    /** @description The URI of the newly created device resource, which can be used to retrieve, update, or delete the device. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDevice"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The device was successfully retrieved. The response contains detailed information about the device, including its metadata, channels, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDevice"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The device was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-devices-module-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The data required to update a existing device */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqUpdateDevice"];
            };
        };
        responses: {
            /** @description The device was successfully updated. The response contains the updated device object, including its metadata, associated channels, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDevice"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-controls": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of controls was successfully retrieved. Each control includes metadata such as its ID, name, and timestamps. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceControls"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-device-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /** @description The data required to create a new device control */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateDeviceControl"];
            };
        };
        responses: {
            /** @description The control was successfully created. The response contains the details of the newly created control. */
            201: {
                headers: {
                    /** @description The URI of the newly created device control resource, which can be used to retrieve, update, or delete the control. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceControl"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The details of the control were successfully retrieved. The response contains information such as the control’s name, ID, associated device, and timestamps. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceControl"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-device-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No The control was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-channels": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of channels was successfully retrieved. The response includes metadata for each channel, including its ID, name, category, associated device, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceChannels"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-device-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
            };
            cookie?: never;
        };
        /** @description The data required to create a new device channel */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateDeviceChannel"];
            };
        };
        responses: {
            /** @description The channel was successfully created. The response contains the details of the newly created channel, including its metadata, associated controls, and properties. */
            201: {
                headers: {
                    /** @description The URI of the newly created channel resource, which can be used to retrieve, update, or delete the channel. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceChannel"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The channel details were successfully retrieved. The response contains detailed information about the channel, including its metadata, associated device, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceChannel"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-device-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The channel was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-devices-module-device-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The data required to update a existing channel */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqUpdateChannel"];
            };
        };
        responses: {
            /** @description The channel was successfully updated. The response contains the updated channel object, including its metadata, associated controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResDeviceChannel"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-channel-controls": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains an array of controls, each including details such as the control’s ID, name, associated channel, and metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelControls"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-device-channel-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /** @description The data required to create a new channel control */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateChannelControl"];
            };
        };
        responses: {
            /** @description The control was successfully created. The response includes the complete details of the newly created control, such as its unique identifier, name, associated channel, and timestamps. */
            201: {
                headers: {
                    /** @description The URI of the newly created channel control resource, which can be used to retrieve, update, or delete the control. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelControl"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-channel-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains the details of the requested control, including its ID, name, associated channel, and metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelControl"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-device-channel-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The control was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-channel-properties": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains an array of properties associated with the specified channel. Each property includes detailed metadata such as its unique identifier, category, permissions, data type, unit, and current value, along with timestamps for creation and updates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperties"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-device-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /** @description The data required to create a new channel property */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateChannelProperty"];
            };
        };
        responses: {
            /** @description The property was successfully created. The response body contains the complete representation of the created property, including its unique ID, associated channel, category, and metadata. The Location header provides the URI of the newly created property resource. */
            201: {
                headers: {
                    /** @description The URI of the newly created channel property resource, which can be used to retrieve, update, or delete the property. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperty"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-device-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains the full representation of the requested property, including its unique identifier, metadata, current value, and the associated channel. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperty"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-device-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The property was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-devices-module-device-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the device to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                deviceId: components["parameters"]["deviceId"];
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The data required to update a existing channel property */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqUpdateChannelProperty"];
            };
        };
        responses: {
            /** @description The property was successfully updated. The response contains the updated representation of the property, including its unique identifier, metadata, and current value. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperty"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of channels was successfully retrieved. The response includes metadata for each channel, including its ID, name, category, associated device, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannels"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-channel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The data required to create a new device channel */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateChannel"];
            };
        };
        responses: {
            /** @description The channel was successfully created. The response contains the details of the newly created channel, including its metadata, associated controls, and properties. */
            201: {
                headers: {
                    /** @description The URI of the newly created channel resource, which can be used to retrieve, update, or delete the channel. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannel"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The channel details were successfully retrieved. The response contains detailed information about the channel, including its metadata, associated device, controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannel"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The channel was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-devices-module-channel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The data required to update a existing channel */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqUpdateChannel"];
            };
        };
        responses: {
            /** @description The channel was successfully updated. The response contains the updated channel object, including its metadata, associated controls, and properties. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannel"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-channel-controls": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains an array of controls, each including details such as the control’s ID, name, associated channel, and metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelControls"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-channel-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /** @description The data required to create a new channel control */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateChannelControl"];
            };
        };
        responses: {
            /** @description The control was successfully created. The response includes the complete details of the newly created control, such as its unique identifier, name, associated channel, and timestamps. */
            201: {
                headers: {
                    /** @description The URI of the newly created channel control resource, which can be used to retrieve, update, or delete the control. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelControl"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-channel-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains the details of the requested control, including its ID, name, associated channel, and metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelControl"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-channel-control": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The control was successfully deleted. The response contains no additional content. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-channel-properties": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains an array of properties associated with the specified channel. Each property includes detailed metadata such as its unique identifier, category, permissions, data type, unit, and current value, along with timestamps for creation and updates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperties"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-devices-module-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
            };
            cookie?: never;
        };
        /** @description The data required to create a new channel property */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqCreateChannelProperty"];
            };
        };
        responses: {
            /** @description The property was successfully created. The response body contains the complete representation of the created property, including its unique ID, associated channel, category, and metadata. The Location header provides the URI of the newly created property resource. */
            201: {
                headers: {
                    /** @description The URI of the newly created channel property resource, which can be used to retrieve, update, or delete the property. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperty"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-module-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful. The response contains the full representation of the requested property, including its unique identifier, metadata, current value, and the associated channel. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperty"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-devices-module-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The property was successfully deleted. No response body is returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-devices-module-channel-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the channel to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                channelId: components["parameters"]["channelId"];
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The data required to update a existing channel property */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesModuleReqUpdateChannelProperty"];
            };
        };
        responses: {
            /** @description The property was successfully updated. The response contains the updated representation of the property, including its unique identifier, metadata, and current value. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesModuleResChannelProperty"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-dashboard-module-pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of pages successfully retrieved. Each page includes its metadata (ID and title), associated tiles and data sources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResPages"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-dashboard-module-page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The payload schema used for creating a new dashboard page. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DashboardModuleReqCreatePage"];
            };
        };
        responses: {
            /** @description The page was successfully created. The response body contains the complete representation of the page, including its unique ID, title, tiles and data sources. A Location header is also returned, containing the URI of the created page resource for future operations. */
            201: {
                headers: {
                    /** @description The URI of the newly created page resource, which can be used to retrieve, update, or delete the page. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResPage"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-dashboard-module-page": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The page was successfully retrieved. The response contains detailed information about the page, including its metadata, tiles and data sources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResPage"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-dashboard-module-page": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The page was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-dashboard-module-page": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The payload schema used for updating a existing dashboard page. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DashboardModuleReqUpdatePage"];
            };
        };
        responses: {
            /** @description The page was successfully updated. The response contains the updated page object, including its metadata, associated tiles and data sources. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResPage"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-dashboard-module-tiles": {
        parameters: {
            query?: {
                /** @description Filter tiles by the parent resource type (e.g., 'page', 'card') */
                parent_type?: string;
                /** @description Filter tiles by the parent resource ID */
                parent_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of tiles was successfully retrieved. Each tile includes metadata such as its ID, size, and position. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResTiles"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-dashboard-module-tile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The payload schema used for creating a new tile. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DashboardModuleReqCreateTileWithParent"];
            };
        };
        responses: {
            /** @description The tile was successfully created. The response contains the details of the newly created tile. */
            201: {
                headers: {
                    /** @description The URI of the newly created tile resource, which can be used to retrieve, update, or delete the tile. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResTile"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-dashboard-module-tile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The details of the tile were successfully retrieved. The response contains information such as the tile’s position, size, associated page, and timestamps. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResTile"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-dashboard-module-tile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The tile was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-dashboard-module-tile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The payload schema used for updating a existing tile. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DashboardModuleReqUpdateTile"];
            };
        };
        responses: {
            /** @description Partially updates the attributes of a specific tile using its unique ID. The update can modify metadata, such as the tile’s position or size, without requiring the full object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResTile"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-dashboard-module-data-sources": {
        parameters: {
            query?: {
                /** @description Filter data sources by the parent resource type (e.g., 'page', 'card') */
                parent_type?: string;
                /** @description Filter data sources by the parent resource ID */
                parent_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of data sources was successfully retrieved. Each data source includes details such as its ID, associated device, value, and metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResDataSources"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-dashboard-module-data-source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The payload schema used for creating a new data source. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DashboardModuleReqCreateDataSource"];
            };
        };
        responses: {
            /** @description The data source was successfully created. The response body contains the complete representation of the data source, including its unique identifier, associated device, associated channel, timezone and metadata. */
            201: {
                headers: {
                    /** @description The URI of the newly created data source resource, which can be used to retrieve, update, or delete the data source. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResDataSource"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-dashboard-module-data-source": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The details of the data source were successfully retrieved. The response contains information such as the data source’s associated device, channel, value, and associated tile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResDataSource"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["BadRequestError"];
        };
    };
    "delete-dashboard-module-data-source": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The data source was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-dashboard-module-data-source": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The payload schema used for updating a existing tile data source. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DashboardModuleReqUpdateDataSource"];
            };
        };
        responses: {
            /** @description The data source was successfully updated. The response contains the updated data source details, including its unique identifier, associated device, channel, value, and metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardModuleResDataSource"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-config-module-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing the full smart panel configuration, including audio, display, language, and weather settings. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigModuleResApp"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-config-module-config-section": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The configuration section name. */
                section: "audio" | "display" | "language" | "weather";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing the current configuration section. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigModuleResSection"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-config-module-config-section": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The configuration section name. */
                section: "audio" | "display" | "language" | "weather";
            };
            cookie?: never;
        };
        /** @description Request body for updating configuration section. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfigModuleReqUpdateSection"];
            };
        };
        responses: {
            /** @description Response containing the current configuration section. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigModuleResSection"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-config-module-config-plugin": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The configuration plugin name. */
                plugin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing the current plugin configuration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigModuleResPlugin"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-config-module-config-plugin": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The configuration plugin name. */
                plugin: string;
            };
            cookie?: never;
        };
        /** @description Request body for updating plugin configuration. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfigModuleReqUpdatePlugin"];
            };
        };
        responses: {
            /** @description Response containing the current plugin configuration. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigModuleResPlugin"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-system-module-system-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provides a detailed overview of the system’s current status, including CPU load, memory usage, storage details, temperature readings, operating system information, network statistics, and display settings. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemModuleResSystemInfo"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-system-module-system-throttle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provides the system’s throttling status, indicating whether any CPU or power-related limitations have been triggered. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemModuleResThrottleStatus"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-weather-module-weather": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing current weather conditions and forecast details for a specified location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherModuleResLocationWeather"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-weather-module-current": {
        parameters: {
            query?: {
                /** @description The location for weather updates, specified as a city name or coordinates (latitude, longitude). */
                location?: string;
                /** @description Specifies the method used to determine the location for weather updates. */
                location_type?: "lat_lon" | "city_name" | "city_id" | "zip_code";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing current weather conditions details for a specified location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherModuleResLocationCurrent"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-weather-module-forecast": {
        parameters: {
            query?: {
                /** @description The location for weather updates, specified as a city name or coordinates (latitude, longitude). */
                location?: string;
                /** @description Specifies the method used to determine the location for weather updates. */
                location_type?: "lat_lon" | "city_name" | "city_id" | "zip_code";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing current weather forecast details for a specified location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherModuleResLocationForecast"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-weather-module-geolocation": {
        parameters: {
            query: {
                /** @description The name of the city for which geographical coordinates are requested. */
                city: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing geographical information related to a specified location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherModuleResGeolocationCityToCoordinates"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-weather-module-geolocation-coordinates-to-city": {
        parameters: {
            query: {
                /** @description Latitude of the location for reverse geocoding. */
                lat: number;
                /** @description Longitude of the location for reverse geocoding. */
                lon: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response containing geographical information related to a specified location. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherModuleResGeolocationCoordinatesToCity"];
                };
            };
            400: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "put-third-party-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Represents a request to update properties on a third-party device. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DevicesThirdPartyPluginPropertiesUpdateRequest"];
            };
        };
        responses: {
            /** @description No Content. Indicates that the request was successfully processed and no further response is required. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Response from the third-party device after processing the update request. */
            207: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesThirdPartyPluginPropertiesUpdateResult"];
                };
            };
            /** @description Bad Request. Indicates that the request was invalid, possibly due to missing or malformed data. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error. Indicates a server-side error while processing the request. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-devices-home-assistant-plugin-devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the list of Home Assistant devices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesHomeAssistantPluginResDiscoveredDevices"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-home-assistant-plugin-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Home Assisant discovered device to retrieve. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested Home Assistant device. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesHomeAssistantPluginResDiscoveredDevice"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-home-assistant-plugin-states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the list of Home Assistant states. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesHomeAssistantPluginResStates"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-devices-home-assistant-plugin-state": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Home Assisant entity to retrieve state. */
                entityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the requested Home Assistant state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesHomeAssistantPluginResState"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-pages-cards-plugin-page-cards": {
        parameters: {
            query?: {
                /** @description Filter cards by the page resource ID */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of cards was successfully retrieved. Each card includes metadata such as its ID, title, and icon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagesCardsPluginResCards"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "create-pages-cards-plugin-page-card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The payload schema used for creating a new page card. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagesCardsPluginReqCreateCard"];
            };
        };
        responses: {
            /** @description The card was successfully created. The response contains the details of the newly created card. */
            201: {
                headers: {
                    /** @description The URI of the newly created page card resource, which can be used to retrieve, update, or delete the card. */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagesCardsPluginResCard"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["BadRequestError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "get-pages-cards-plugin-page-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The details of the card were successfully retrieved. The response contains information such as the card’s associated tiles, data sources and card details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagesCardsPluginResCard"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "delete-pages-cards-plugin-page-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The card was successfully deleted. No content is returned in the response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    "update-pages-cards-plugin-page-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the resource to retrieve.
                 * @example 9431cc2d-d447-44c1-b2d0-4398624e4921
                 */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** @description The payload schema used for updating a existing page card. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagesCardsPluginReqUpdateCard"];
            };
        };
        responses: {
            /** @description Partially updates the attributes of a specific card associated with a page using its unique ID. The update can modify metadata, such as the card’s title or icon, without requiring the full object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagesCardsPluginResCard"];
                };
            };
            400: components["responses"]["BadRequestError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
