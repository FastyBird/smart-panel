{
  "openapi": "3.1.0",
  "info": {
    "title": "üñ•Ô∏è FastyBird Smart Panel API üöÄ",
    "description": "Welcome to the **FastyBird Smart Panel API Documentation**! This API enables seamless integration between the **FastyBird Smart Panel** and connected devices, providing a local, real-time, and fully customizable **smart home experience**.\n\n---\n\n## **üåü What Does This API Provide?**\n\nThe **FastyBird Smart Panel API** allows you to:\n\n- üéõÔ∏è **Access Smart Devices** ‚Äì Retrieve device information, configurations, and states.  \n- üìä **Monitor Device Status in Real-Time** ‚Äì Stream live updates from sensors and switches.  \n- üîó **Integrate with External Systems** ‚Äì Connect third-party devices and services for a unified experience.  \n- üì° **Subscribe to Events** ‚Äì Use **WebSockets** to get instant updates on device changes.  \n- üöÄ **Control Locally** ‚Äì No cloud dependency, everything runs on your own **local hardware**.  \n\nüí° **Jump straight into the [API Reference](#explore-apis) for all available endpoints.**\n\n---\n\n## **üöÄ Getting Started**\n\n> **üí° This API is designed for local control‚Äîno cloud required.**\n\n### **1Ô∏è‚É£ Install the Smart Panel**\nSet up the **FastyBird Smart Panel** on your hardware.\n\n### **2Ô∏è‚É£ Connect Devices**\nEnsure compatible smart devices are available for the panel to manage.\n\n### **3Ô∏è‚É£ Start Using the API**\nUse REST or WebSockets to **query device states, receive updates, and integrate external systems**.\n\n---\n\n## **üîé API Overview**\nExplore the available API endpoints for integration:\n\n<!--\ntype: tab\ntitle: Devices API\n-->\n\nüîπ **Query smart devices and retrieve metadata.**  \n- [List all devices](#)  \n- [Get device details](#)  \n- [Check device availability](#)  \n- [API Reference](#)  \n\n<!--\ntype: tab\ntitle: Status & Monitoring API\n-->\n\nüîπ **Retrieve sensor readings and real-time device states.**  \n- [Get temperature sensor data](#)  \n- [Monitor smart switch states](#)  \n- [Track energy consumption](#)  \n- [API Reference](#)  \n\n<!--\ntype: tab\ntitle: WebSocket API\n-->\n\nüîπ **Subscribe to live updates for devices & events.**  \n- [Receive real-time device status changes](#)  \n- [Subscribe to WebSocket event streams](#)  \n- [API Reference](#)  \n\n<!-- type: tab-end -->\n\n---\n\n## **üìö API Usage Guides**\nDetailed documentation to help developers integrate the API:\n\nüîπ **[Understanding Device States](#)** ‚Äì Learn how to interpret API responses.  \nüîπ **[Using WebSockets for Real-Time Monitoring](#)** ‚Äì Get instant updates from the panel.  \nüîπ **[Integrating Third-Party Devices](#)** ‚Äì Extend your setup with custom integrations.  \n\nüí° **Need something specific?** Let us know how we can improve the documentation.\n\n---\n\n## **üí° FAQs**\n> **üîç Common API-related questions:**\n\n**Does this API require the cloud?**  \nNo, everything runs **locally** on your **own hardware**.\n\n**How do I authenticate API requests?**  \nUse **API tokens** for secure access. See [Authentication Guide](#).\n\n**Can I get real-time updates from the panel?**  \nYes! The **WebSocket API** provides instant status updates.\n\n**Does the API support third-party integrations?**  \nYes, you can connect external IoT systems via API endpoints.\n\n---\n\n## **üí¨ Need Help?**\nüíå **[Join our Developer Community](#)** ‚Äì Discuss API integrations with others.  \nüìß **[Contact Support](#)** ‚Äì Reach out for technical assistance.  \n\n---\n\nüî• **Built with ‚ù§Ô∏è by FastyBird** | API-first smart panel integration üöÄ",
    "version": "1.0",
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/FastyBird/smart-panel/blob/main/LICENSE.md"
    },
    "contact": {
      "name": "Adam Kadlec",
      "url": "https://fastybird.com",
      "email": "info@fastybird.com"
    },
    "termsOfService": "http://smart-panel.fastybird.com",
    "summary": "The FastyBird Smart Panel API provides a local, real-time interface for retrieving device data, monitoring statuses, and integrating third-party IoT systems. It enables seamless communication between the smart panel and connected devices, ensuring fast, private, and reliable interactions without cloud dependencies."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1"
    }
  ],
  "paths": {
    "/auth-module/auth/register": {
      "post": {
        "tags": [
          "Auth module"
        ],
        "summary": "Register a new user",
        "description": "Endpoint to register a new user by providing username, password, and optional profile information.",
        "operationId": "create-auth-module-register",
        "requestBody": {
          "description": "Schema for user registration.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthReqRegister"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "username": "johndoe",
                      "password": "superstrongpassword",
                      "email": "john@doe.com",
                      "first_name": "John",
                      "last_name": "Doe"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User registered successfully. No content returned."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth-module/auth/register-display": {
      "post": {
        "tags": [
          "Auth module"
        ],
        "summary": "Register a display-only user",
        "description": "Endpoint to register a user with limited permissions, designed for display-only functionalities.",
        "operationId": "create-auth-module-register-display",
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "description": "A string identifying the requesting device. Required for registering display-only users.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "FastyBird-Display/1.0"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response returned after successfully registering a display-only user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResRegisterDisplay"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/auth-module/auth/register-display",
                      "method": "POST",
                      "data": {
                        "secret": "IwMj3jfHdRVIxCck6DBgcQi3zXDNAHUu"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth-module/auth/login": {
      "post": {
        "tags": [
          "Auth module"
        ],
        "summary": "User login",
        "description": "Endpoint for user login, requiring username and password to generate an authentication token.",
        "operationId": "create-auth-module-login",
        "requestBody": {
          "description": "Schema for user authentication.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthReqLogin"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "username": "johndoe",
                      "password": "superstrongpassword"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response returned after successful user login.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResLogin"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/auth-module/auth/login",
                      "method": "POST",
                      "data": {
                        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                        "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw",
                        "type": "Bearer",
                        "expiration": "2025-01-18T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth-module/auth/check/username": {
      "post": {
        "tags": [
          "Auth module"
        ],
        "summary": "Check username availability",
        "description": "Endpoint to check whether a given username is already in use in the system.",
        "operationId": "validate-auth-module-check-username",
        "requestBody": {
          "description": "Checks whether a username is already in use.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthReqCheckUsername"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "username": "johndoe"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response returned when checking the username if is taken.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResCheckUsername"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/auth-module/auth/check/username",
                      "method": "POST",
                      "data": {
                        "valid": true
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth-module/auth/check/email": {
      "post": {
        "tags": [
          "Auth module"
        ],
        "summary": "Check email availability",
        "description": "Endpoint to check whether a given email address is already in use in the system.",
        "operationId": "validate-auth-module-check-email",
        "requestBody": {
          "description": "Checks whether an email address is already in use.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthReqCheckEmail"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "email": "john@doe.com"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response returned when checking the e-mail address if is taken.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResCheckEmail"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/auth-module/auth/check/username",
                      "method": "POST",
                      "data": {
                        "valid": true
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/auth-module/auth/profile": {
      "get": {
        "tags": [
          "Auth module"
        ],
        "summary": "Retrieve authenticated user's profile",
        "description": "Endpoint to retrieve the profile information of the authenticated user, including username, email, and role.",
        "operationId": "get-auth-module-profile",
        "responses": {
          "200": {
            "description": "Response containing the authenticated user's profile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResProfile"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/auth-module/auth/register-display",
                      "method": "POST",
                      "data": {
                        "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                        "username": "johndoe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@doe.com",
                        "is_hidden": false,
                        "role": "user",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/auth-module/auth/refresh": {
      "post": {
        "tags": [
          "Auth module"
        ],
        "summary": "Refresh user access token",
        "description": "Endpoint for user access token refresh, requiring refresh token to generate an authentication token.",
        "operationId": "update-auth-module-refresh",
        "requestBody": {
          "description": "Schema for user access token refresh.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthReqRefreshToken"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response returned after successful user access token refresh.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResRefresh"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/auth-module/auth/refresh",
                      "method": "POST",
                      "data": {
                        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                        "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw",
                        "type": "Bearer",
                        "expiration": "2025-01-18T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users-module/users": {
      "get": {
        "tags": [
          "Users module"
        ],
        "summary": "Retrieve a list of users",
        "description": "Fetch a paginated list of users, including details such as usernames, emails, and roles.",
        "operationId": "get-users-module-users",
        "responses": {
          "200": {
            "description": "A list of users successfully retrieved. Each user includes its metadata (ID, username, role).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResUsers"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/users-module/users",
                      "method": "GET",
                      "data": [
                        {
                          "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                          "username": "johndoe",
                          "first_name": "John",
                          "last_name": "Doe",
                          "email": "john@doe.com",
                          "is_hidden": false,
                          "role": "user",
                          "created_at": "2025-01-25T12:00:00Z",
                          "updated_at": "2025-01-25T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users module"
        ],
        "summary": "Create a new user",
        "description": "Register a new user by providing necessary details such as username, password, and optional profile information.",
        "operationId": "create-users-module-user",
        "requestBody": {
          "description": "The data required to create a new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersReqCreateUser"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                      "username": "johndoe",
                      "password": "supersecret",
                      "email": "john@doe.com",
                      "first_name": "John",
                      "last_name": "Doe",
                      "role": "user"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response returned after successfully creating a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResUser"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/users-module/users/f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                      "method": "GET",
                      "data": {
                        "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                        "username": "johndoe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@doe.com",
                        "is_hidden": false,
                        "role": "user",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created user resource, which can be used to retrieve, update, or delete the user."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/users-module/users/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Users module"
        ],
        "summary": "Retrieve details of a specific user",
        "description": "Fetch detailed information about a specific user, including their profile, role, and associated data.",
        "operationId": "get-users-module-user",
        "responses": {
          "200": {
            "description": "The user details were successfully retrieved. The response contains detailed information about the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResUser"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/users-module/users/f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                      "method": "GET",
                      "data": {
                        "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                        "username": "johndoe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@doe.com",
                        "is_hidden": false,
                        "role": "user",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users module"
        ],
        "summary": "Update an existing user",
        "description": "Modify user details such as email, role, or profile information. Partial updates are supported.",
        "operationId": "update-users-module-user",
        "requestBody": {
          "description": "The data required to update a existing user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersReqUpdateUser"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "email": "john@doe.com",
                      "first_name": "John",
                      "last_name": "Doe",
                      "role": "user"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response returned after successfully updating a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResUser"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/users-module/users/f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                      "method": "GET",
                      "data": {
                        "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                        "username": "johndoe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@doe.com",
                        "is_hidden": false,
                        "role": "user",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users module"
        ],
        "summary": "Delete an existing user",
        "description": "Remove a user from the system. This action is irreversible.",
        "operationId": "delete-users-module-user",
        "responses": {
          "204": {
            "description": "The user was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices": {
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of available devices",
        "description": "Fetches a list of all devices currently registered in the system. Each device includes its metadata (e.g., ID, name, and category), along with associated channels, controls, and properties.",
        "operationId": "get-devices-module-devices",
        "responses": {
          "200": {
            "description": "A list of devices successfully retrieved. Each device includes its metadata (ID, name, category), associated channels, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDevices"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices",
                      "method": "GET",
                      "data": [
                        {
                          "id": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                          "type": "third-party",
                          "category": "generic",
                          "name": "Thermostat",
                          "description": "Living room thermostat",
                          "controls": [
                            {
                              "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                              "name": "reboot",
                              "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                              "created_at": "2024-12-11T12:00:00Z",
                              "updated_at": "2024-12-11T12:00:00Z"
                            }
                          ],
                          "channels": [
                            {
                              "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                              "category": "generic",
                              "name": "Temperature Sensor",
                              "description": "Living room temperature sensor",
                              "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                              "controls": [
                                {
                                  "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                                  "name": "reset",
                                  "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                  "created_at": "2024-12-11T12:00:00Z",
                                  "updated_at": "2024-12-11T12:00:00Z"
                                }
                              ],
                              "properties": [
                                {
                                  "id": "208f4790-21b0-4927-8835-7302d883a141",
                                  "category": "generic",
                                  "name": "Thermostat mode",
                                  "permissions": [
                                    "ro"
                                  ],
                                  "data_type": "string",
                                  "unit": "¬∞C",
                                  "format": [
                                    "heat",
                                    "auto"
                                  ],
                                  "invalid": -999,
                                  "step": 0.5,
                                  "value": 22.1,
                                  "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                  "created_at": "2024-12-11T12:00:00Z",
                                  "updated_at": "2024-12-11T12:00:00Z"
                                }
                              ],
                              "created_at": "2024-12-11T12:00:00Z",
                              "updated_at": "2024-12-11T12:00:00Z"
                            }
                          ],
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z",
                          "service_address": "http://192.168.1.100/webhook"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new device",
        "description": "Creates a new device resource in the system. The request requires device-specific attributes such as category and name. The response includes the full representation of the created device, including its associated channels, controls, and properties. Additionally, a Location header is provided with the URI of the newly created resource.",
        "operationId": "create-devices-module-device",
        "requestBody": {
          "description": "The data required to create a new device",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateDevice"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                      "type": "third-party",
                      "category": "generic",
                      "name": "Thermostat",
                      "description": "Living room thermostat",
                      "controls": [
                        {
                          "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                          "name": "reboot"
                        }
                      ],
                      "channels": [
                        {
                          "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "category": "generic",
                          "name": "Temperature Sensor",
                          "description": "Living room temperature sensor",
                          "controls": [
                            {
                              "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                              "name": "reset"
                            }
                          ],
                          "properties": [
                            {
                              "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                              "category": "generic",
                              "name": "Thermostat mode",
                              "permissions": [
                                "ro"
                              ],
                              "data_type": "string",
                              "unit": "¬∞C",
                              "format": [
                                "heat",
                                "auto"
                              ],
                              "invalid": -999,
                              "step": 0.5,
                              "value": 22.1
                            }
                          ],
                          "device": "332dda32-b7de-4557-956a-b6ed6c6799a4"
                        }
                      ],
                      "service_address": "http://192.168.1.100/webhook"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The device was successfully created. The response body contains the complete representation of the device, including its unique ID, category, name, channels, controls, and properties. A Location header is also returned, containing the URI of the created device resource for future operations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDevice"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4",
                      "method": "GET",
                      "data": {
                        "id": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "type": "third-party",
                        "category": "generic",
                        "name": "Thermostat",
                        "description": "Living room thermostat",
                        "controls": [
                          {
                            "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                            "name": "reboot",
                            "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "channels": [
                          {
                            "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "category": "generic",
                            "name": "Temperature Sensor",
                            "description": "Living room temperature sensor",
                            "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                            "controls": [
                              {
                                "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                                "name": "reset",
                                "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                "created_at": "2024-12-11T12:00:00Z",
                                "updated_at": "2024-12-11T12:00:00Z"
                              }
                            ],
                            "properties": [
                              {
                                "id": "208f4790-21b0-4927-8835-7302d883a141",
                                "category": "generic",
                                "name": "Thermostat mode",
                                "permissions": [
                                  "ro"
                                ],
                                "data_type": "string",
                                "unit": "¬∞C",
                                "format": [
                                  "heat",
                                  "auto"
                                ],
                                "invalid": -999,
                                "step": 0.5,
                                "value": 22.1,
                                "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                "created_at": "2024-12-11T12:00:00Z",
                                "updated_at": "2024-12-11T12:00:00Z"
                              }
                            ],
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z",
                        "service_address": "http://192.168.1.100/webhook"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created device resource, which can be used to retrieve, update, or delete the device."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific device",
        "description": "Fetches the details of a specific device using its unique ID. The response includes the device‚Äôs metadata (e.g., ID, name, and category), associated channels, controls, and properties.",
        "operationId": "get-devices-module-device",
        "responses": {
          "200": {
            "description": "The device was successfully retrieved. The response contains detailed information about the device, including its metadata, channels, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDevice"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4",
                      "method": "GET",
                      "data": {
                        "id": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "type": "third-party",
                        "category": "generic",
                        "name": "Thermostat",
                        "description": "Living room thermostat",
                        "controls": [
                          {
                            "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                            "name": "reboot",
                            "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "channels": [
                          {
                            "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "category": "generic",
                            "name": "Temperature Sensor",
                            "description": "Living room temperature sensor",
                            "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                            "controls": [
                              {
                                "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                                "name": "reset",
                                "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                "created_at": "2024-12-11T12:00:00Z",
                                "updated_at": "2024-12-11T12:00:00Z"
                              }
                            ],
                            "properties": [
                              {
                                "id": "208f4790-21b0-4927-8835-7302d883a141",
                                "category": "generic",
                                "name": "Thermostat mode",
                                "permissions": [
                                  "ro"
                                ],
                                "data_type": "string",
                                "unit": "¬∞C",
                                "format": [
                                  "heat",
                                  "auto"
                                ],
                                "invalid": -999,
                                "step": 0.5,
                                "value": 22.1,
                                "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                "created_at": "2024-12-11T12:00:00Z",
                                "updated_at": "2024-12-11T12:00:00Z"
                              }
                            ],
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z",
                        "service_address": "http://192.168.1.100/webhook"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices module"
        ],
        "summary": "Update an existing device",
        "description": "Partially updates the attributes of an existing device identified by its unique ID. The update can modify metadata, such as the device‚Äôs name, category, or description, without requiring the full object.",
        "operationId": "update-devices-module-device",
        "requestBody": {
          "description": "The data required to update a existing device",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqUpdateDevice"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "third-party",
                      "name": "Thermostat",
                      "description": "Living room thermostat",
                      "service_address": "http://192.168.1.100/webhook"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The device was successfully updated. The response contains the updated device object, including its metadata, associated channels, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDevice"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4",
                      "method": "GET",
                      "data": {
                        "id": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "type": "third-party",
                        "category": "generic",
                        "name": "Thermostat",
                        "description": "Living room thermostat",
                        "controls": [
                          {
                            "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                            "name": "reboot",
                            "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "channels": [
                          {
                            "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "category": "generic",
                            "name": "Temperature Sensor",
                            "description": "Living room temperature sensor",
                            "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                            "controls": [
                              {
                                "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                                "name": "reset",
                                "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                "created_at": "2024-12-11T12:00:00Z",
                                "updated_at": "2024-12-11T12:00:00Z"
                              }
                            ],
                            "properties": [
                              {
                                "id": "208f4790-21b0-4927-8835-7302d883a141",
                                "category": "generic",
                                "name": "Thermostat mode",
                                "permissions": [
                                  "ro"
                                ],
                                "data_type": "string",
                                "unit": "¬∞C",
                                "format": [
                                  "heat",
                                  "auto"
                                ],
                                "invalid": -999,
                                "step": 0.5,
                                "value": 22.1,
                                "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                                "created_at": "2024-12-11T12:00:00Z",
                                "updated_at": "2024-12-11T12:00:00Z"
                              }
                            ],
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z",
                        "service_address": "http://192.168.1.100/webhook"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete an existing device",
        "description": "Deletes a specific device identified by its unique ID from the system. This action is irreversible and will remove the device and its associated data from the system.",
        "operationId": "delete-devices-module-device",
        "responses": {
          "204": {
            "description": "The device was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/controls": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of all available device controls",
        "description": "Fetches a list of controls associated with a specific device. Controls represent actions that can be performed on the device, such as reboot or calibration.",
        "operationId": "get-devices-module-device-controls",
        "responses": {
          "200": {
            "description": "The list of controls was successfully retrieved. Each control includes metadata such as its ID, name, and timestamps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceControls"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls",
                      "method": "GET",
                      "data": [
                        {
                          "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                          "name": "reboot",
                          "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new control for a device",
        "description": "Creates a new control associated with a specific device. Controls represent actions or commands that can be executed on the device, such as reboot or factory reset.",
        "operationId": "create-devices-module-device-control",
        "requestBody": {
          "description": "The data required to create a new device control",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateDeviceControl"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                      "name": "reboot"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The control was successfully created. The response contains the details of the newly created control.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceControl"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls/227349b1-a2a7-439a-b296-59f002faa8ce",
                      "method": "GET",
                      "data": {
                        "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                        "name": "reboot",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created device control resource, which can be used to retrieve, update, or delete the control."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/controls/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific control for a device",
        "description": "Fetches detailed information about a specific control associated with a device using its unique ID. The response includes metadata such as the control‚Äôs name, ID, associated device, and timestamps.",
        "operationId": "get-devices-module-device-control",
        "responses": {
          "200": {
            "description": "The details of the control were successfully retrieved. The response contains information such as the control‚Äôs name, ID, associated device, and timestamps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceControl"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls/227349b1-a2a7-439a-b296-59f002faa8ce",
                      "method": "GET",
                      "data": {
                        "id": "227349b1-a2a7-439a-b296-59f002faa8ce",
                        "name": "reboot",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete an existing control for a device",
        "description": "Deletes a specific control associated with a device using its unique ID. This action is irreversible and removes the control from the system.",
        "operationId": "delete-devices-module-device-control",
        "responses": {
          "204": {
            "description": "No The control was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/channels": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of all available channels for a device",
        "description": "Fetches a list of channels associated with a specific device. Each channel includes metadata (e.g., ID, name, category), associated controls, and properties.",
        "operationId": "get-devices-module-device-channels",
        "responses": {
          "200": {
            "description": "The list of channels was successfully retrieved. The response includes metadata for each channel, including its ID, name, category, associated device, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceChannels"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels",
                      "method": "GET",
                      "data": [
                        {
                          "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "category": "generic",
                          "name": "Temperature Sensor",
                          "description": "Living room temperature sensor",
                          "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                          "controls": [
                            {
                              "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                              "name": "reset",
                              "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                              "created_at": "2024-12-11T12:00:00Z",
                              "updated_at": "2024-12-11T12:00:00Z"
                            }
                          ],
                          "properties": [
                            {
                              "id": "208f4790-21b0-4927-8835-7302d883a141",
                              "category": "generic",
                              "name": "Thermostat mode",
                              "permissions": [
                                "ro"
                              ],
                              "data_type": "string",
                              "unit": "¬∞C",
                              "format": [
                                "heat",
                                "auto"
                              ],
                              "invalid": -999,
                              "step": 0.5,
                              "value": 22.1,
                              "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                              "created_at": "2024-12-11T12:00:00Z",
                              "updated_at": "2024-12-11T12:00:00Z"
                            }
                          ],
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new channel for a device",
        "description": "Creates a new channel associated with a specific device. The channel can have attributes such as name, category, description, and optionally controls and properties.",
        "operationId": "create-devices-module-device-channel",
        "requestBody": {
          "description": "The data required to create a new device channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateDeviceChannel"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "category": "generic",
                      "name": "Temperature Sensor",
                      "description": "Living room temperature sensor",
                      "controls": [
                        {
                          "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                          "name": "reset"
                        }
                      ],
                      "properties": [
                        {
                          "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                          "category": "generic",
                          "name": "Thermostat mode",
                          "permissions": [
                            "ro"
                          ],
                          "data_type": "string",
                          "unit": "¬∞C",
                          "format": [
                            "heat",
                            "auto"
                          ],
                          "invalid": -999,
                          "step": 0.5,
                          "value": 22.1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The channel was successfully created. The response contains the details of the newly created channel, including its metadata, associated controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceChannel"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "method": "GET",
                      "data": {
                        "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "category": "generic",
                        "name": "Temperature Sensor",
                        "description": "Living room temperature sensor",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "controls": [
                          {
                            "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                            "name": "reset",
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "properties": [
                          {
                            "id": "208f4790-21b0-4927-8835-7302d883a141",
                            "category": "generic",
                            "name": "Thermostat mode",
                            "permissions": [
                              "ro"
                            ],
                            "data_type": "string",
                            "unit": "¬∞C",
                            "format": [
                              "heat",
                              "auto"
                            ],
                            "invalid": -999,
                            "step": 0.5,
                            "value": 22.1,
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created channel resource, which can be used to retrieve, update, or delete the channel."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/channels/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific channel for a device",
        "description": "Fetches detailed information about a specific channel associated with a device using its unique ID. The response includes metadata, category, associated controls, and properties for the channel.",
        "operationId": "get-devices-module-device-channel",
        "responses": {
          "200": {
            "description": "The channel details were successfully retrieved. The response contains detailed information about the channel, including its metadata, associated device, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceChannel"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "method": "GET",
                      "data": {
                        "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "category": "generic",
                        "name": "Temperature Sensor",
                        "description": "Living room temperature sensor",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "controls": [
                          {
                            "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                            "name": "reset",
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "properties": [
                          {
                            "id": "208f4790-21b0-4927-8835-7302d883a141",
                            "category": "generic",
                            "name": "Thermostat mode",
                            "permissions": [
                              "ro"
                            ],
                            "data_type": "string",
                            "unit": "¬∞C",
                            "format": [
                              "heat",
                              "auto"
                            ],
                            "invalid": -999,
                            "step": 0.5,
                            "value": 22.1,
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices module"
        ],
        "summary": "Update an existing channel for a device",
        "description": "Partially updates the attributes of a specific channel associated with a device using its unique ID. The update can modify metadata, such as the channel‚Äôs name, category, or description, without requiring the full object.",
        "operationId": "update-devices-module-device-channel",
        "requestBody": {
          "description": "The data required to update a existing channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqUpdateChannel"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "name": "Temperature Sensor",
                      "description": "Living room temperature sensor"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The channel was successfully updated. The response contains the updated channel object, including its metadata, associated controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResDeviceChannel"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "method": "GET",
                      "data": {
                        "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "category": "generic",
                        "name": "Temperature Sensor",
                        "description": "Living room temperature sensor",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "controls": [
                          {
                            "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                            "name": "reset",
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "properties": [
                          {
                            "id": "208f4790-21b0-4927-8835-7302d883a141",
                            "category": "generic",
                            "name": "Thermostat mode",
                            "permissions": [
                              "ro"
                            ],
                            "data_type": "string",
                            "unit": "¬∞C",
                            "format": [
                              "heat",
                              "auto"
                            ],
                            "invalid": -999,
                            "step": 0.5,
                            "value": 22.1,
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete a specific channel for a device",
        "description": "Deletes a specific channel associated with a device using its unique ID. This action is irreversible and will remove the channel and its associated data from the system.",
        "operationId": "delete-devices-module-device-channel",
        "responses": {
          "204": {
            "description": "The channel was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/channels/{channelId}/controls": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        },
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of all available controls for a device‚Äôs channel",
        "description": "Fetches a list of controls associated with a specific channel of a device. Controls represent actions or commands that can be executed on the channel, such as reset or calibration.",
        "operationId": "get-devices-module-device-channel-controls",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains an array of controls, each including details such as the control‚Äôs ID, name, associated channel, and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelControls"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls",
                      "method": "GET",
                      "data": [
                        {
                          "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                          "name": "reset",
                          "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new control for a specific device‚Äôs channel",
        "description": "Creates a new control associated with a specific device channel. Controls represent actions or commands that can be executed on the channel, such as reset or calibration.",
        "operationId": "create-devices-module-device-channel-control",
        "requestBody": {
          "description": "The data required to create a new channel control",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateChannelControl"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                      "name": "reset"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The control was successfully created. The response includes the complete details of the newly created control, such as its unique identifier, name, associated channel, and timestamps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelControl"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2",
                      "method": "GET",
                      "data": {
                        "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                        "name": "reset",
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created channel control resource, which can be used to retrieve, update, or delete the control."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/channels/{channelId}/controls/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        },
        {
          "$ref": "#/components/parameters/channelId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific control for a device‚Äôs channel",
        "description": "Fetches detailed information about a specific control associated with a device channel using its unique ID. The response includes metadata such as the control‚Äôs name, ID, associated channel, and timestamps.",
        "operationId": "get-devices-module-device-channel-control",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the details of the requested control, including its ID, name, associated channel, and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelControl"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2",
                      "method": "GET",
                      "data": {
                        "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                        "name": "reset",
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete a specific control from a device‚Äôs channel",
        "description": "Deletes a specific control associated with a device channel using its unique ID. This action is irreversible and removes the control from the system.",
        "operationId": "delete-devices-module-device-channel-control",
        "responses": {
          "204": {
            "description": "The control was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/channels/{channelId}/properties": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        },
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of all available properties for a device‚Äôs channel",
        "description": "Fetches a list of properties associated with a specific channel of a device. Properties represent attributes or measurements related to the channel, such as thermostat mode, temperature, or humidity.",
        "operationId": "get-devices-module-device-channel-properties",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains an array of properties associated with the specified channel. Each property includes detailed metadata such as its unique identifier, category, permissions, data type, unit, and current value, along with timestamps for creation and updates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperties"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties",
                      "method": "GET",
                      "data": [
                        {
                          "id": "208f4790-21b0-4927-8835-7302d883a141",
                          "category": "generic",
                          "name": "Thermostat mode",
                          "permissions": [
                            "ro"
                          ],
                          "data_type": "string",
                          "unit": "¬∞C",
                          "format": [
                            "heat",
                            "auto"
                          ],
                          "invalid": -999,
                          "step": 0.5,
                          "value": 22.1,
                          "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new property for a specific device‚Äôs channel",
        "description": "Creates a new property for a specific device channel. The property can include metadata such as category, permissions, data type, unit, and initial value. The response contains the full representation of the created property, including its unique identifier, associated channel, and metadata.",
        "operationId": "create-devices-module-device-channel-property",
        "requestBody": {
          "description": "The data required to create a new channel property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateChannelProperty"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                      "category": "generic",
                      "name": "Thermostat mode",
                      "permissions": [
                        "ro"
                      ],
                      "data_type": "string",
                      "unit": "¬∞C",
                      "format": [
                        "heat",
                        "auto"
                      ],
                      "invalid": -999,
                      "step": 0.5,
                      "value": 22.1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The property was successfully created. The response body contains the complete representation of the created property, including its unique ID, associated channel, category, and metadata. The Location header provides the URI of the newly created property resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperty"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
                      "method": "GET",
                      "data": {
                        "id": "208f4790-21b0-4927-8835-7302d883a141",
                        "category": "generic",
                        "name": "Thermostat mode",
                        "permissions": [
                          "ro"
                        ],
                        "data_type": "string",
                        "unit": "¬∞C",
                        "format": [
                          "heat",
                          "auto"
                        ],
                        "invalid": -999,
                        "step": 0.5,
                        "value": 22.1,
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created channel property resource, which can be used to retrieve, update, or delete the property."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/devices/{deviceId}/channels/{channelId}/properties/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deviceId"
        },
        {
          "$ref": "#/components/parameters/channelId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific property for a device‚Äôs channel",
        "description": "Fetches detailed information about a specific property associated with a device channel using its unique ID. The response includes metadata such as the property‚Äôs name, category, value, and associated channel.",
        "operationId": "get-devices-module-device-channel-property",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the full representation of the requested property, including its unique identifier, metadata, current value, and the associated channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperty"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
                      "method": "GET",
                      "data": {
                        "id": "208f4790-21b0-4927-8835-7302d883a141",
                        "category": "generic",
                        "name": "Thermostat mode",
                        "permissions": [
                          "ro"
                        ],
                        "data_type": "string",
                        "unit": "¬∞C",
                        "format": [
                          "heat",
                          "auto"
                        ],
                        "invalid": -999,
                        "step": 0.5,
                        "value": 22.1,
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices module"
        ],
        "summary": "Update and existing property for a specific device‚Äôs channel",
        "description": "Partially updates the details of a specific property associated with a device channel. This operation allows modifications to attributes such as the property‚Äôs name, value, or metadata, while preserving its unique identifier and association with the channel.",
        "operationId": "update-devices-module-device-channel-property",
        "requestBody": {
          "description": "The data required to update a existing channel property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqUpdateChannelProperty"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "name": "Thermostat mode",
                      "unit": "¬∞C",
                      "format": [
                        "heat",
                        "auto"
                      ],
                      "invalid": -999,
                      "step": 0.5,
                      "value": 22.1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The property was successfully updated. The response contains the updated representation of the property, including its unique identifier, metadata, and current value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperty"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
                      "method": "GET",
                      "data": {
                        "id": "208f4790-21b0-4927-8835-7302d883a141",
                        "category": "generic",
                        "name": "Thermostat mode",
                        "permissions": [
                          "ro"
                        ],
                        "data_type": "string",
                        "unit": "¬∞C",
                        "format": [
                          "heat",
                          "auto"
                        ],
                        "invalid": -999,
                        "step": 0.5,
                        "value": 22.1,
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete a specific property from a device‚Äôs channel.",
        "description": "Deletes a specific property associated with a device channel using its unique ID. This operation is irreversible and removes the property from the system.",
        "operationId": "delete-devices-module-device-channel-property",
        "responses": {
          "204": {
            "description": "The property was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/channels": {
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of available channels",
        "description": "Fetches a list of channels in the system. The response includes metadata for each channel, such as its ID, name, category, associated device, controls, and properties.",
        "operationId": "get-devices-module-channels",
        "responses": {
          "200": {
            "description": "The list of channels was successfully retrieved. The response includes metadata for each channel, including its ID, name, category, associated device, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannels"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels",
                      "method": "GET",
                      "data": [
                        {
                          "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "category": "generic",
                          "name": "Temperature Sensor",
                          "description": "Living room temperature sensor",
                          "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                          "controls": [
                            {
                              "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                              "name": "reset",
                              "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                              "created_at": "2024-12-11T12:00:00Z",
                              "updated_at": "2024-12-11T12:00:00Z"
                            }
                          ],
                          "properties": [
                            {
                              "id": "208f4790-21b0-4927-8835-7302d883a141",
                              "category": "generic",
                              "name": "Thermostat mode",
                              "permissions": [
                                "ro"
                              ],
                              "data_type": "string",
                              "unit": "¬∞C",
                              "format": [
                                "heat",
                                "auto"
                              ],
                              "invalid": -999,
                              "step": 0.5,
                              "value": 22.1,
                              "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                              "created_at": "2024-12-11T12:00:00Z",
                              "updated_at": "2024-12-11T12:00:00Z"
                            }
                          ],
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new channel",
        "description": "Creates a new channel in the system. The channel can have attributes such as name, category, description, and an associated device. Optionally, controls and properties can also be defined during creation.",
        "operationId": "create-devices-module-channel",
        "requestBody": {
          "description": "The data required to create a new device channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateChannel"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "category": "generic",
                      "name": "Temperature Sensor",
                      "description": "Living room temperature sensor",
                      "controls": [
                        {
                          "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                          "name": "reset"
                        }
                      ],
                      "properties": [
                        {
                          "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                          "category": "generic",
                          "name": "Thermostat mode",
                          "permissions": [
                            "ro"
                          ],
                          "data_type": "string",
                          "unit": "¬∞C",
                          "format": [
                            "heat",
                            "auto"
                          ],
                          "invalid": -999,
                          "step": 0.5,
                          "value": 22.1
                        }
                      ],
                      "device": "332dda32-b7de-4557-956a-b6ed6c6799a4"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The channel was successfully created. The response contains the details of the newly created channel, including its metadata, associated controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannel"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "method": "GET",
                      "data": {
                        "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "category": "generic",
                        "name": "Temperature Sensor",
                        "description": "Living room temperature sensor",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "controls": [
                          {
                            "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                            "name": "reset",
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "properties": [
                          {
                            "id": "208f4790-21b0-4927-8835-7302d883a141",
                            "category": "generic",
                            "name": "Thermostat mode",
                            "permissions": [
                              "ro"
                            ],
                            "data_type": "string",
                            "unit": "¬∞C",
                            "format": [
                              "heat",
                              "auto"
                            ],
                            "invalid": -999,
                            "step": 0.5,
                            "value": 22.1,
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created channel resource, which can be used to retrieve, update, or delete the channel."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/channels/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific channel",
        "description": "Fetches detailed information about a specific channel using its unique ID. The response includes metadata, associated device information, controls, and properties for the channel.",
        "operationId": "get-devices-module-channel",
        "responses": {
          "200": {
            "description": "The channel details were successfully retrieved. The response contains detailed information about the channel, including its metadata, associated device, controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannel"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "method": "GET",
                      "data": {
                        "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "category": "generic",
                        "name": "Temperature Sensor",
                        "description": "Living room temperature sensor",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "controls": [
                          {
                            "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                            "name": "reset",
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "properties": [
                          {
                            "id": "208f4790-21b0-4927-8835-7302d883a141",
                            "category": "generic",
                            "name": "Thermostat mode",
                            "permissions": [
                              "ro"
                            ],
                            "data_type": "string",
                            "unit": "¬∞C",
                            "format": [
                              "heat",
                              "auto"
                            ],
                            "invalid": -999,
                            "step": 0.5,
                            "value": 22.1,
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices module"
        ],
        "summary": "Update an existing channel",
        "description": "Partially updates the attributes of a specific channel using its unique ID. This allows modifications to properties such as the channel‚Äôs name, category, description, or associated controls and properties.",
        "operationId": "update-devices-module-channel",
        "requestBody": {
          "description": "The data required to update a existing channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqUpdateChannel"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "name": "Temperature Sensor",
                      "description": "Living room temperature sensor"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The channel was successfully updated. The response contains the updated channel object, including its metadata, associated controls, and properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannel"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                      "method": "GET",
                      "data": {
                        "id": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "category": "generic",
                        "name": "Temperature Sensor",
                        "description": "Living room temperature sensor",
                        "device": "332dda32-b7de-4557-956a-b6ed6c6799a4",
                        "controls": [
                          {
                            "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                            "name": "reset",
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "properties": [
                          {
                            "id": "208f4790-21b0-4927-8835-7302d883a141",
                            "category": "generic",
                            "name": "Thermostat mode",
                            "permissions": [
                              "ro"
                            ],
                            "data_type": "string",
                            "unit": "¬∞C",
                            "format": [
                              "heat",
                              "auto"
                            ],
                            "invalid": -999,
                            "step": 0.5,
                            "value": 22.1,
                            "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                            "created_at": "2024-12-11T12:00:00Z",
                            "updated_at": "2024-12-11T12:00:00Z"
                          }
                        ],
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete an existing channel",
        "description": "Deletes a specific channel using its unique ID. This action is irreversible and removes the channel and all associated data from the system.",
        "operationId": "delete-devices-module-channel",
        "responses": {
          "204": {
            "description": "The channel was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/channels/{channelId}/controls": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of all available channel controls",
        "description": "Fetches a list of all controls available for channels in the system. Each control represents an actionable operation associated with a channel. The response includes details such as the control‚Äôs ID, name, associated channel, and timestamps.",
        "operationId": "get-devices-module-channel-controls",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains an array of controls, each including details such as the control‚Äôs ID, name, associated channel, and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelControls"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls",
                      "method": "GET",
                      "data": [
                        {
                          "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                          "name": "reset",
                          "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new control for a channel",
        "description": "Allows the creation of a new control for a specific channel. A control represents an actionable operation or command associated with the channel. The response includes the complete details of the newly created control, including its ID, name, associated channel, and metadata.",
        "operationId": "create-devices-module-channel-control",
        "requestBody": {
          "description": "The data required to create a new channel control",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateChannelControl"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                      "name": "reset"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The control was successfully created. The response includes the complete details of the newly created control, such as its unique identifier, name, associated channel, and timestamps.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelControl"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2",
                      "method": "GET",
                      "data": {
                        "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                        "name": "reset",
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created channel control resource, which can be used to retrieve, update, or delete the control."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/channels/{channelId}/controls/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific control for a channel",
        "description": "Fetches the details of a specific control associated with a channel. The response includes the control‚Äôs unique identifier, name, associated channel, and metadata such as creation and update timestamps.",
        "operationId": "get-devices-module-channel-control",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the details of the requested control, including its ID, name, associated channel, and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelControl"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2",
                      "method": "GET",
                      "data": {
                        "id": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
                        "name": "reset",
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete an existing control for a channel",
        "description": "Deletes an existing control associated with a specific channel. This operation is irreversible and will remove the control permanently from the system.",
        "operationId": "delete-devices-module-channel-control",
        "responses": {
          "204": {
            "description": "The control was successfully deleted. The response contains no additional content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/channels/{channelId}/properties": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve a list of all available channel properties",
        "description": "Fetches all properties associated with a specific channel. The response includes metadata for each property, such as category, name, permissions, data type, unit, and current value, along with the associated channel‚Äôs unique identifier.",
        "operationId": "get-devices-module-channel-properties",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains an array of properties associated with the specified channel. Each property includes detailed metadata such as its unique identifier, category, permissions, data type, unit, and current value, along with timestamps for creation and updates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperties"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties",
                      "method": "GET",
                      "data": [
                        {
                          "id": "208f4790-21b0-4927-8835-7302d883a141",
                          "category": "generic",
                          "name": "Thermostat mode",
                          "permissions": [
                            "ro"
                          ],
                          "data_type": "string",
                          "unit": "¬∞C",
                          "format": [
                            "heat",
                            "auto"
                          ],
                          "invalid": -999,
                          "step": 0.5,
                          "value": 22.1,
                          "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                          "created_at": "2024-12-11T12:00:00Z",
                          "updated_at": "2024-12-11T12:00:00Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices module"
        ],
        "summary": "Create a new property for a channel",
        "description": "Creates a new property for a channel, such as thermostat mode or brightness level. The property includes metadata like category, permissions, data type, unit, and initial value. The response provides the full representation of the created property along with a Location header containing the URI for the new property resource.",
        "operationId": "create-devices-module-channel-property",
        "requestBody": {
          "description": "The data required to create a new channel property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqCreateChannelProperty"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "9431cc2d-d447-44c1-b2d0-4398624e4921",
                      "category": "generic",
                      "name": "Thermostat mode",
                      "permissions": [
                        "ro"
                      ],
                      "data_type": "string",
                      "unit": "¬∞C",
                      "format": [
                        "heat",
                        "auto"
                      ],
                      "invalid": -999,
                      "step": 0.5,
                      "value": 22.1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The property was successfully created. The response body contains the complete representation of the created property, including its unique ID, associated channel, category, and metadata. The Location header provides the URI of the newly created property resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperty"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
                      "method": "GET",
                      "data": {
                        "id": "208f4790-21b0-4927-8835-7302d883a141",
                        "category": "generic",
                        "name": "Thermostat mode",
                        "permissions": [
                          "ro"
                        ],
                        "data_type": "string",
                        "unit": "¬∞C",
                        "format": [
                          "heat",
                          "auto"
                        ],
                        "invalid": -999,
                        "step": 0.5,
                        "value": 22.1,
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created channel property resource, which can be used to retrieve, update, or delete the property."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/devices-module/channels/{channelId}/properties/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "tags": [
          "Devices module"
        ],
        "summary": "Retrieve details of a specific property for a channel",
        "description": "Fetches detailed information about a specific property associated with a channel. The response includes metadata such as the property‚Äôs unique ID, category, permissions, data type, unit, and current value, along with timestamps and the associated channel‚Äôs identifier.",
        "operationId": "get-devices-module-channel-property",
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the full representation of the requested property, including its unique identifier, metadata, current value, and the associated channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperty"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
                      "method": "GET",
                      "data": {
                        "id": "208f4790-21b0-4927-8835-7302d883a141",
                        "category": "generic",
                        "name": "Thermostat mode",
                        "permissions": [
                          "ro"
                        ],
                        "data_type": "string",
                        "unit": "¬∞C",
                        "format": [
                          "heat",
                          "auto"
                        ],
                        "invalid": -999,
                        "step": 0.5,
                        "value": 22.1,
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Devices module"
        ],
        "summary": "Update an existing property for a channel",
        "description": "Allows partial updates to an existing property associated with a channel. You can update specific attributes such as the name, category, permissions, data type, unit, or current value. The response includes the updated representation of the property.",
        "operationId": "update-devices-module-channel-property",
        "requestBody": {
          "description": "The data required to update a existing channel property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesReqUpdateChannelProperty"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "name": "Thermostat mode",
                      "unit": "¬∞C",
                      "format": [
                        "heat",
                        "auto"
                      ],
                      "invalid": -999,
                      "step": 0.5,
                      "value": 22.1
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The property was successfully updated. The response contains the updated representation of the property, including its unique identifier, metadata, and current value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesResChannelProperty"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
                      "method": "GET",
                      "data": {
                        "id": "208f4790-21b0-4927-8835-7302d883a141",
                        "category": "generic",
                        "name": "Thermostat mode",
                        "permissions": [
                          "ro"
                        ],
                        "data_type": "string",
                        "unit": "¬∞C",
                        "format": [
                          "heat",
                          "auto"
                        ],
                        "invalid": -999,
                        "step": 0.5,
                        "value": 22.1,
                        "channel": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
                        "created_at": "2024-12-11T12:00:00Z",
                        "updated_at": "2024-12-11T12:00:00Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices module"
        ],
        "summary": "Delete an existing property for a channel",
        "description": "Deletes an existing property associated with a channel. This operation is irreversible and permanently removes the property from the system.",
        "operationId": "delete-devices-module-channel-property",
        "responses": {
          "204": {
            "description": "The property was successfully deleted. No response body is returned."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages": {
      "get": {
        "summary": "Retrieve a list of available pages",
        "description": "Fetches a list of all pages currently registered in the system. Each pages includes its metadata (e.g., ID, title), along with associated tiles and data sources.",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPages"
                },
                "examples": {}
              }
            },
            "description": "A list of pages successfully retrieved. Each page includes its metadata (ID and title), associated tiles and data sources."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-pages",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "201": {
            "description": "The page was successfully created. The response body contains the complete representation of the page, including its unique ID, title, tiles and data sources. A Location header is also returned, containing the URI of the created page resource for future operations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPage"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created page resource, which can be used to retrieve, update, or delete the page."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreatePage"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                      "title": "My Dashboard",
                      "icon": "icon-name",
                      "order": 1,
                      "type": "cards",
                      "cards": [
                        {
                          "id": "7943c740-52b6-4e18-a136-cf39061ac869",
                          "title": "Mood lights",
                          "icon": "icon-name",
                          "order": 1,
                          "tiles": [
                            {
                              "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                              "row": 1,
                              "col": 2,
                              "row_span": 1,
                              "col_span": 2,
                              "data_source": [
                                {
                                  "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                                  "type": "device-channel",
                                  "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                                  "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                                  "property": "3d988def-559f-498c-a804-5111aba2df66",
                                  "icon": "icon-name"
                                }
                              ],
                              "type": "device",
                              "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                              "icon": "icon-name"
                            }
                          ],
                          "data_source": [
                            {
                              "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                              "type": "device-channel",
                              "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                              "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                              "property": "3d988def-559f-498c-a804-5111aba2df66",
                              "icon": "icon-name"
                            }
                          ]
                        }
                      ],
                      "data_source": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "type": "device-channel",
                          "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                          "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                          "property": "3d988def-559f-498c-a804-5111aba2df66",
                          "icon": "icon-name"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new dashboard page."
        },
        "description": "Creates a new page resource in the system. The request requires page-specific attributes such as title. The response includes the full representation of the created page, including its associated tiles and data sources. Additionally, a Location header is provided with the URI of the newly created resource.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPage"
                }
              }
            },
            "description": "The page was successfully retrieved. The response contains detailed information about the page, including its metadata, tiles and data sources."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page",
        "description": "Fetches the details of a specific page using its unique ID. The response includes the page‚Äôs metadata (e.g., ID and title), associated tiles and data sources.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update an existing page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPage"
                }
              }
            },
            "description": "The page was successfully updated. The response contains the updated page object, including its metadata, associated tiles and data sources."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdatePage"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "cards",
                      "title": "My Updated Dashboard",
                      "icon": "icon-name",
                      "order": 1
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing dashboard page."
        },
        "description": "Partially updates the attributes of an existing page identified by its unique ID. The update can modify metadata, such as the page‚Äôs title, without requiring the full object.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an existing page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The page was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page",
        "description": "Deletes a specific page identified by its unique ID from the system. This action is irreversible and will remove the page and its associated data from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/data-source": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available data sources for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageDataSources"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/data-source",
                      "method": "GET",
                      "data": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                          "created_at": "2025-01-25T12:00:00Z",
                          "updated_at": "2025-01-25T13:00:00Z",
                          "type": "device-channel",
                          "device": "234e5678-a89b-22d3-c456-426614174133",
                          "channel": "345e6789-b89c-32d4-d567-526715184244",
                          "property": "456e7890-c89d-42d5-e678-626816194355",
                          "icon": "icon-name"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The list of data sources associated with the tile was successfully retrieved. Each data source includes details such as its ID, associated device, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-data-sources",
        "description": "Fetches a list of data sources associated with a specific page. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new data source for a specific page",
        "responses": {
          "201": {
            "description": "The data source was successfully created. The response body contains the complete representation of the data source, including its unique identifier, associated device, associated channel, timezone and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "POST",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "The URI of the newly created page data source resource, which can be used to retrieve, update, or delete the data source."
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page-data-source",
        "tags": [
          "Dashboard module"
        ],
        "description": "Creates a new data source for a specific page. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreatePageDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "type": "device-channel",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new page data source."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/data-source/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific data source for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "GET",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The details of the data source were successfully retrieved. The response contains information such as the data source‚Äôs associated device, channel, value, and associated page."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-data-source",
        "description": "Fetches detailed information about a specific data source associated with a page using its unique ID. The response includes metadata such as the data source‚Äôs associated device, channel, value, and associated tile.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update and existing data source for a specific page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "description": "The data source was successfully updated. The response contains the updated data source details, including its unique identifier, associated device, channel, value, and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "PATCH",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-data-source",
        "description": "Partially updates the details of a specific data source associated with a page. This operation allows modifications to attributes such as the data source‚Äôs associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "device-channel",
                      "tile": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing page data source."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific data source from a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The data source was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-data-source",
        "description": "Deletes a specific data source associated with a page using its unique ID. This operation is irreversible and removes the property from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/tiles": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available page tiles",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTiles"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles",
                      "method": "GET",
                      "data": [
                        {
                          "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                          "row": 1,
                          "col": 1,
                          "row_span": 2,
                          "col_span": 2,
                          "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                          "data_source": [
                            {
                              "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                              "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                              "created_at": "2025-01-25T12:00:00Z",
                              "updated_at": "2025-01-25T13:00:00Z",
                              "type": "device-channel",
                              "device": "234e5678-a89b-22d3-c456-426614174133",
                              "channel": "345e6789-b89c-32d4-d567-526715184244",
                              "property": "456e7890-c89d-42d5-e678-626816194355",
                              "icon": "icon-name"
                            }
                          ],
                          "created_at": "2025-01-25T12:00:00Z",
                          "updated_at": "2025-01-25T13:00:00Z",
                          "type": "device",
                          "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                          "icon": "icon-name"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The list of tiles was successfully retrieved. Each tile includes metadata such as its ID, size, and position."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-tiles",
        "description": "Fetches a list of tiles associated with a specific page. Tiles represent widgets that can be used for displaying data, such as device state, actual clock.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new tile for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTile"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles",
                      "method": "POST",
                      "data": {
                        "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "row": 1,
                        "col": 1,
                        "row_span": 2,
                        "col_span": 2,
                        "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                        "data_source": [
                          {
                            "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                            "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                            "created_at": "2025-01-25T12:00:00Z",
                            "updated_at": "2025-01-25T13:00:00Z",
                            "type": "device-channel",
                            "device": "234e5678-a89b-22d3-c456-426614174133",
                            "channel": "345e6789-b89c-32d4-d567-526715184244",
                            "property": "456e7890-c89d-42d5-e678-626816194355",
                            "icon": "icon-name"
                          }
                        ],
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device",
                        "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created page tile resource, which can be used to retrieve, update, or delete the tile."
              }
            },
            "description": "The tile was successfully created. The response contains the details of the newly created tile."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page-tile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreatePageTile"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                      "row": 1,
                      "col": 2,
                      "row_span": 1,
                      "col_span": 2,
                      "data_source": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "type": "device-channel",
                          "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                          "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                          "property": "3d988def-559f-498c-a804-5111aba2df66",
                          "icon": "icon-name"
                        }
                      ],
                      "type": "device",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new page tile."
        },
        "description": "Creates a new tile associated with a specific page. Tiles represent widgets that can display device state or actual clock.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/tiles/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific tile for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTile"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                      "method": "GET",
                      "data": {
                        "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "row": 1,
                        "col": 1,
                        "row_span": 2,
                        "col_span": 2,
                        "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                        "data_source": [
                          {
                            "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                            "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                            "created_at": "2025-01-25T12:00:00Z",
                            "updated_at": "2025-01-25T13:00:00Z",
                            "type": "device-channel",
                            "device": "234e5678-a89b-22d3-c456-426614174133",
                            "channel": "345e6789-b89c-32d4-d567-526715184244",
                            "property": "456e7890-c89d-42d5-e678-626816194355",
                            "icon": "icon-name"
                          }
                        ],
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device",
                        "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The details of the tile were successfully retrieved. The response contains information such as the tile‚Äôs position, size, associated page, and timestamps."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-tile",
        "description": "Fetches detailed information about a specific tile associated with a page using its unique ID. The response includes metadata such as the tiles‚Äôs position, ID, associated page, and timestamps.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update an existing tile for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTile"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                      "method": "PATCH",
                      "data": {
                        "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "row": 1,
                        "col": 1,
                        "row_span": 2,
                        "col_span": 2,
                        "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                        "data_source": [
                          {
                            "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                            "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                            "created_at": "2025-01-25T12:00:00Z",
                            "updated_at": "2025-01-25T13:00:00Z",
                            "type": "device-channel",
                            "device": "234e5678-a89b-22d3-c456-426614174133",
                            "channel": "345e6789-b89c-32d4-d567-526715184244",
                            "property": "456e7890-c89d-42d5-e678-626816194355",
                            "icon": "icon-name"
                          }
                        ],
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device",
                        "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "Partially updates the attributes of a specific tile associated with a page using its unique ID. The update can modify metadata, such as the tile‚Äôs position or size, without requiring the full object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-tile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateTile"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "device",
                      "row": 1,
                      "col": 2,
                      "row_span": 1,
                      "col_span": 2,
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing page tile."
        },
        "description": "Partially updates the attributes of a specific tile associated with a page using its unique ID. The update can modify metadata, such as the tile‚Äôs position or size, without requiring the full object.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific tile for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The tile was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-tile",
        "description": "Deletes a specific tile associated with a page using its unique ID. This action is irreversible and will remove the tile and its associated data from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/tiles/{tileId}/data-source": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/tileId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available data sources for a page‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTileDataSources"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source",
                      "method": "GET",
                      "data": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                          "created_at": "2025-01-25T12:00:00Z",
                          "updated_at": "2025-01-25T13:00:00Z",
                          "type": "device-channel",
                          "device": "234e5678-a89b-22d3-c456-426614174133",
                          "channel": "345e6789-b89c-32d4-d567-526715184244",
                          "property": "456e7890-c89d-42d5-e678-626816194355",
                          "icon": "icon-name"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The list of data sources associated with the tile was successfully retrieved. Each data source includes details such as its ID, associated device, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-tile-data-sources",
        "description": "Fetches a list of data sources associated with a specific tile of a page. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new data source for a specific page‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created data tile data source resource, which can be used to retrieve, update, or delete the data source."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTileDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "POST",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The data source was successfully created. The response body contains the complete representation of the data source, including its unique identifier, associated device, associated channel, timezone and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page-tile-data-source",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreateTileDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "type": "device-channel",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new tile data source."
        },
        "description": "Creates a new data source for a specific page tile. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/tiles/{tileId}/data-source/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/tileId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific data source for a page‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTileDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "GET",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The details of the data source were successfully retrieved. The response contains information such as the data source‚Äôs associated device, channel, value, and associated tile."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/BadRequestError"
          }
        },
        "operationId": "get-dashboard-module-page-tile-data-source",
        "description": "Fetches detailed information about a specific data source associated with a page tile using its unique ID. The response includes metadata such as the data source‚Äôs associated device, channel, value, and associated tile.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update and existing data source for a specific page‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageTileDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "PATCH",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The data source was successfully updated. The response contains the updated data source details, including its unique identifier, associated device, channel, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-tile-data-source",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "device-channel",
                      "tile": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing tile data source."
        },
        "description": "Partially updates the details of a specific data source associated with a page tile. This operation allows modifications to attributes such as the data source‚Äôs associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific data source from a page‚Äôs tile.",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The data source was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-tile-data-source",
        "description": "Deletes a specific data source associated with a page tile using its unique ID. This operation is irreversible and removes the property from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available page cards",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCards"
                }
              }
            },
            "description": "The list of cards was successfully retrieved. Each card includes metadata such as its ID, title, and icon."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-cards",
        "description": "Fetches a list of cards associated with a specific page. Cards represent widgets that can be used for displaying data, such as device state, actual clock.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new card for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created page card resource, which can be used to retrieve, update, or delete the card."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCard"
                }
              }
            },
            "description": "The card was successfully created. The response contains the details of the newly created card."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page-card",
        "description": "Creates a new card associated with a specific page. Cards represent widgets that can display device state or actual clock.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreatePageCard"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "7943c740-52b6-4e18-a136-cf39061ac869",
                      "title": "Mood lights",
                      "icon": "icon-name",
                      "order": 1,
                      "tiles": [
                        {
                          "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                          "row": 1,
                          "col": 2,
                          "row_span": 1,
                          "col_span": 2,
                          "data_source": [
                            {
                              "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                              "type": "device-channel",
                              "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                              "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                              "property": "3d988def-559f-498c-a804-5111aba2df66",
                              "icon": "icon-name"
                            }
                          ],
                          "type": "device",
                          "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                          "icon": "icon-name"
                        }
                      ],
                      "data_source": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "type": "device-channel",
                          "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                          "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                          "property": "3d988def-559f-498c-a804-5111aba2df66",
                          "icon": "icon-name"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new page card."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific card for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCard"
                }
              }
            },
            "description": "The details of the card were successfully retrieved. The response contains information such as the card‚Äôs associated tiles, data sources and card details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card",
        "description": "Fetches detailed information about a specific card associated with a page using its unique ID. The response includes metadata such as the card‚Äôs position, ID, associated page, and tiles.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update an existing card for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCard"
                }
              }
            },
            "description": "Partially updates the attributes of a specific card associated with a page using its unique ID. The update can modify metadata, such as the card‚Äôs title or icon, without requiring the full object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-card",
        "description": "Partially updates the attributes of a specific card associated with a page using its unique ID. The update can modify metadata, such as the card‚Äôs position or title, without requiring the full object.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateCard"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "title": "Mood lights",
                      "icon": "icon-name",
                      "order": 1
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing page card."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific card for a page",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The card was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-card",
        "description": "Deletes a specific card associated with a page using its unique ID. This action is irreversible and will remove the card and its associated data from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{cardId}/tiles": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/cardId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available card tiles",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTiles"
                }
              }
            },
            "description": "The details of the tile were successfully retrieved. The response contains information such as the tile‚Äôs position, size, associated card, and timestamps."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card-tiles",
        "description": "Fetches a list of tiles associated with a specific card. Tiles represent widgets that can be used for displaying data, such as device state, actual clock.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new tile for a card",
        "tags": [
          "Dashboard module"
        ],
        "operationId": "create-dashboard-module-page-card-tile",
        "description": "Creates a new tile associated with a specific card. Tiles represent widgets that can display device state or actual clock.",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTile"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "The URI of the newly created card tile resource, which can be used to retrieve, update, or delete the tile."
              }
            },
            "description": "Partially updates the attributes of a specific tile associated with a card using its unique ID. The update can modify metadata, such as the tile‚Äôs position or size, without requiring the full object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreateCardTile"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                      "row": 1,
                      "col": 2,
                      "row_span": 1,
                      "col_span": 2,
                      "data_source": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "type": "device-channel",
                          "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                          "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                          "property": "3d988def-559f-498c-a804-5111aba2df66",
                          "icon": "icon-name"
                        }
                      ],
                      "type": "device",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing card tile."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{cardId}/tiles/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/cardId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific tile for a card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTile"
                }
              }
            },
            "description": "The details of the tile were successfully retrieved. The response contains information such as the tile‚Äôs position, size, associated card, and timestamps."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card-tile",
        "description": "Fetches detailed information about a specific tile associated with a card using its unique ID. The response includes metadata such as the tiles‚Äôs position, ID, associated page, and timestamps.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update an existing tile for a card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTile"
                }
              }
            },
            "description": "Partially updates the attributes of a specific tile associated with a card using its unique ID. The update can modify metadata, such as the tile‚Äôs position or size, without requiring the full object."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-card-tile",
        "description": "Partially updates the attributes of a specific tile associated with a card using its unique ID. The update can modify metadata, such as the tile‚Äôs position or size, without requiring the full object.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateTile"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "device",
                      "row": 1,
                      "col": 2,
                      "row_span": 1,
                      "col_span": 2,
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing card tile."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific tile for a card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The tile was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-card-tile",
        "description": "Deletes a specific tile associated with a card using its unique ID. This action is irreversible and will remove the tile and its associated data from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{cardId}/tiles/{tileId}/data-source": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/cardId"
        },
        {
          "$ref": "#/components/parameters/tileId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available data sources for a card‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTileDataSources"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source",
                      "method": "GET",
                      "data": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                          "created_at": "2025-01-25T12:00:00Z",
                          "updated_at": "2025-01-25T13:00:00Z",
                          "type": "device-channel",
                          "device": "234e5678-a89b-22d3-c456-426614174133",
                          "channel": "345e6789-b89c-32d4-d567-526715184244",
                          "property": "456e7890-c89d-42d5-e678-626816194355",
                          "icon": "icon-name"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The list of data sources associated with the tile was successfully retrieved. Each data source includes details such as its ID, associated device, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card-tile-data-sources",
        "description": "Fetches a list of data sources associated with a specific tile of a card. Data sources represent attributes or measurements related to the tile, such as device state, weather location, or timezone.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new data source for a specific card‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "The URI of the newly created tile data source resource, which can be used to retrieve, update, or delete the data source."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTileDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "POST",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The data source was successfully created. The response body contains the complete representation of the data source, including its unique identifier, associated device, associated channel, timezone and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page-card-tile-data-source",
        "description": "Creates a new data source for a specific card tile. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreateTileDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "type": "device-channel",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new card data source."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{cardId}/tiles/{tileId}/data-source/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/cardId"
        },
        {
          "$ref": "#/components/parameters/tileId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific data source for a card‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTileDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "GET",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The details of the data source were successfully retrieved. The response contains information such as the data source‚Äôs associated device, channel, value, and associated tile."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card-tile-data-source",
        "description": "Fetches detailed information about a specific data source associated with a card tile using its unique ID. The response includes metadata such as the data source‚Äôs associated device, channel, value, and associated tile.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update and existing data source for a specific card‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardTileDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "GET",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "tile": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The data source was successfully updated. The response contains the updated data source details, including its unique identifier, associated device, channel, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-card-tile-data-source",
        "description": "Partially updates the details of a specific data source associated with a card tile. This operation allows modifications to attributes such as the data source‚Äôs associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "device-channel",
                      "tile": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing card data source."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific data source from a card‚Äôs tile",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The data source was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-card-tile-data-source",
        "description": "Deletes a specific data source associated with a card tile using its unique ID. This operation is irreversible and removes the property from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{cardId}/data-source": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/cardId"
        }
      ],
      "get": {
        "summary": "Retrieve a list of all available data sources for a card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardDataSources"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/data-source",
                      "method": "GET",
                      "data": [
                        {
                          "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                          "card": "7943c740-52b6-4e18-a136-cf39061ac869",
                          "created_at": "2025-01-25T12:00:00Z",
                          "updated_at": "2025-01-25T13:00:00Z",
                          "type": "device-channel",
                          "device": "234e5678-a89b-22d3-c456-426614174133",
                          "channel": "345e6789-b89c-32d4-d567-526715184244",
                          "property": "456e7890-c89d-42d5-e678-626816194355",
                          "icon": "icon-name"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The list of data sources associated with the card was successfully retrieved. Each data source includes details such as its ID, associated device, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card-data-sources",
        "description": "Fetches a list of data sources associated with a specific card. Data sources represent attributes or measurements related to the card, such as device state, weather location, or timezone.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "post": {
        "summary": "Create a new data source for a specific card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "POST",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "card": "7943c740-52b6-4e18-a136-cf39061ac869",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "The URI of the newly created card data source resource, which can be used to retrieve, update, or delete the data source."
              }
            },
            "description": "The data source was successfully created. The response body contains the complete representation of the data source, including its unique identifier, associated device, associated channel, timezone and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "create-dashboard-module-page-card-data-source",
        "description": "Creates a new data source for a specific card. The data source can include metadata such as associated device, timezone and weather location. The response contains the full representation of the created data source, including its unique identifier, associated tile, and metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqCreateCardDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "type": "device-channel",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for creating a new card data source."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/dashboard-module/pages/{pageId}/cards/{cardId}/data-source/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/pageId"
        },
        {
          "$ref": "#/components/parameters/cardId"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "summary": "Retrieve details of a specific data source for a card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "GET",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "card": "7943c740-52b6-4e18-a136-cf39061ac869",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The details of the data source were successfully retrieved. The response contains information such as the data source‚Äôs associated device, channel, value, and associated card."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-dashboard-module-page-card-data-source",
        "description": "Fetches detailed information about a specific data source associated with a card using its unique ID. The response includes metadata such as the data source‚Äôs associated device, channel, value, and associated tile.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "summary": "Update and existing data source for a specific card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResPageCardDataSource"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "method": "POST",
                      "data": {
                        "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                        "card": "7943c740-52b6-4e18-a136-cf39061ac869",
                        "created_at": "2025-01-25T12:00:00Z",
                        "updated_at": "2025-01-25T13:00:00Z",
                        "type": "device-channel",
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "345e6789-b89c-32d4-d567-526715184244",
                        "property": "456e7890-c89d-42d5-e678-626816194355",
                        "icon": "icon-name"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            },
            "description": "The data source was successfully updated. The response contains the updated data source details, including its unique identifier, associated device, channel, value, and metadata."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "update-dashboard-module-page-card-data-source",
        "description": "Partially updates the details of a specific data source associated with a card. This operation allows modifications to attributes such as the data source‚Äôs associated device, channel, value, or metadata, while preserving its unique identifier and association with the tile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardReqUpdateDataSource"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "device-channel",
                      "tile": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                      "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                      "channel": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7",
                      "property": "3d988def-559f-498c-a804-5111aba2df66",
                      "icon": "icon-name"
                    }
                  }
                }
              }
            }
          },
          "description": "The payload schema used for updating a existing card data source."
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a specific data source from a card",
        "tags": [
          "Dashboard module"
        ],
        "responses": {
          "204": {
            "description": "The data source was successfully deleted. No content is returned in the response body."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "delete-dashboard-module-page-card-data-source",
        "description": "Deletes a specific data source associated with a card using its unique ID. This operation is irreversible and removes the property from the system.",
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/config-module/config": {
      "get": {
        "tags": [
          "Configuration module"
        ],
        "summary": "Retrieve full configuration",
        "description": "Retrieves the complete smart panel configuration, including audio, display, language, and weather settings.",
        "operationId": "get-config-module-config",
        "responses": {
          "200": {
            "description": "Response containing the full smart panel configuration, including audio, display, language, and weather settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResApp"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/config-module/config",
                      "method": "GET",
                      "data": {
                        "audio": {
                          "type": "audio",
                          "speaker": false,
                          "speaker_volume": 50,
                          "microphone": false,
                          "microphone_volume": 50
                        },
                        "display": {
                          "type": "display",
                          "dark_mode": false,
                          "brightness": 50,
                          "screen_lock_duration": 30,
                          "screen_saver": true
                        },
                        "language": {
                          "type": "language",
                          "language": "en_US",
                          "timezone": "Europe/Prague",
                          "time_format": "24h"
                        },
                        "weather": {
                          "type": "weather",
                          "location": "Prague",
                          "location_type": "city_name",
                          "unit": "celsius",
                          "open_weather_api_key": "string"
                        }
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/config-module/config/{section}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "audio",
              "display",
              "language",
              "weather"
            ],
            "example": "audio"
          },
          "name": "section",
          "in": "path",
          "required": true,
          "description": "The configuration section name."
        }
      ],
      "get": {
        "tags": [
          "Configuration module"
        ],
        "summary": "Retrieve specific configuration section",
        "description": "Retrieves a specific configuration section, such as audio, display, language, or weather.",
        "operationId": "get-config-module-config-section",
        "responses": {
          "200": {
            "description": "Response containing the current configuration section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResSection"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/config-module/config",
                      "method": "GET",
                      "data": {
                        "type": "audio",
                        "speaker": false,
                        "speaker_volume": 50,
                        "microphone": false,
                        "microphone_volume": 50
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Configuration module"
        ],
        "summary": "Update specific configuration section",
        "description": "Updates a specific configuration section, such as audio, display, language, or weather. Only the provided fields will be modified.",
        "operationId": "update-config-module-config-section",
        "requestBody": {
          "description": "Request body for updating audio configuration, allowing modifications to speaker and microphone settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigReqUpdateSection"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "data": {
                      "type": "audio",
                      "speaker": true,
                      "speaker_volume": 34,
                      "microphone": true,
                      "microphone_volume": 55
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response containing the current configuration section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResSection"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/config-module/config",
                      "method": "PATCH",
                      "data": {
                        "type": "audio",
                        "speaker": false,
                        "speaker_volume": 50,
                        "microphone": false,
                        "microphone_volume": 50
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/system-module/system/info": {
      "get": {
        "tags": [
          "System module"
        ],
        "summary": "Retrieve system information",
        "description": "Fetches detailed system information, including CPU load, memory usage, storage details, temperature readings, OS version, network statistics, and display settings.",
        "operationId": "get-system-module-system-info",
        "responses": {
          "200": {
            "description": "Provides a detailed overview of the system‚Äôs current status, including CPU load, memory usage, storage details, temperature readings, operating system information, network statistics, and display settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemResSystemInfo"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/system-module/system/info",
                      "method": "GET",
                      "data": {
                        "cpu_load": 15.3,
                        "memory": {
                          "total": 8388608000,
                          "used": 4200000000,
                          "free": 4188608000
                        },
                        "storage": [
                          {
                            "fs": "/dev/mmcblk0p1",
                            "used": 15000000000,
                            "size": 32000000000,
                            "available": 17000000000
                          }
                        ],
                        "temperature": {
                          "cpu": 55,
                          "gpu": 60
                        },
                        "os": {
                          "platform": "linux",
                          "distro": "Debian",
                          "release": "11 (bullseye)",
                          "uptime": 36000
                        },
                        "network": [
                          {
                            "interface": "eth0",
                            "rx_bytes": 123456789,
                            "tx_bytes": 98765432
                          }
                        ],
                        "default_network": {
                          "interface": "eth0",
                          "ip4": "192.168.1.5",
                          "ip6": "fe80::134a:1e43:abc5:d413",
                          "mac": "xx:xx:xx:xx:xx:xx"
                        },
                        "display": {
                          "resolution_x": 1920,
                          "resolution_y": 1080,
                          "current_res_x": 1280,
                          "current_res_y": 720
                        }
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/system-module/system/throttle": {
      "get": {
        "tags": [
          "System module"
        ],
        "summary": "Retrieve system throttling status",
        "description": "Checks the system‚Äôs throttling status to determine if any CPU, power, or thermal restrictions have been applied.",
        "operationId": "get-system-module-system-throttle",
        "responses": {
          "200": {
            "description": "Provides the system‚Äôs throttling status, indicating whether any CPU or power-related limitations have been triggered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemResThrottleStatus"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/system-module/system/throtle",
                      "method": "GET",
                      "data": {
                        "undervoltage": false,
                        "frequency_capping": false,
                        "throttling": false,
                        "soft_temp_limit": false
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/weather-module/weather": {
      "get": {
        "tags": [
          "Weather module"
        ],
        "summary": "Retrieve weather conditions",
        "description": "Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details for a specified location.",
        "operationId": "get-weather-module-weather",
        "responses": {
          "200": {
            "description": "Response containing current weather conditions and forecast details for a specified location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherResLocationWeather"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/weather-module/weather",
                      "method": "GET",
                      "data": {
                        "current": {
                          "temperature": 22.5,
                          "temperature_min": 18.2,
                          "temperature_max": 25.8,
                          "feels_like": 21.9,
                          "pressure": 1013,
                          "humidity": 55,
                          "weather": {
                            "code": 800,
                            "main": "Clear",
                            "description": "clear sky",
                            "icon": "01d"
                          },
                          "wind": {
                            "speed": 3.5,
                            "deg": 180,
                            "gust": 5.8
                          },
                          "clouds": 10,
                          "rain": 10,
                          "snow": 10,
                          "sunrise": "2025-02-06T06:45:00Z",
                          "sunset": "2025-02-06T17:30:00Z",
                          "day_time": "2019-08-24T14:15:22Z"
                        },
                        "forecast": [
                          {
                            "temperature": {
                              "morn": 22.5,
                              "day": 24.5,
                              "eve": 22.5,
                              "night": 20.5,
                              "min": 20.5,
                              "max": 24.5
                            },
                            "feels_like": {
                              "morn": 22.5,
                              "day": 24.5,
                              "eve": 22.5,
                              "night": 20.5
                            },
                            "pressure": 1013,
                            "humidity": 55,
                            "weather": {
                              "code": 800,
                              "main": "Clear",
                              "description": "clear sky",
                              "icon": "01d"
                            },
                            "wind": {
                              "speed": 3.5,
                              "deg": 180,
                              "gust": 5.8
                            },
                            "clouds": 10,
                            "rain": 10,
                            "snow": 10,
                            "sunrise": "2025-02-06T06:45:00Z",
                            "sunset": "2025-02-06T17:30:00Z",
                            "moonrise": "2025-02-06T17:30:00Z",
                            "moonset": "2025-02-06T17:30:00Z",
                            "day_time": "2019-08-24T14:15:22Z"
                          }
                        ],
                        "location": {
                          "name": "Prague",
                          "country": "CZ"
                        }
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/weather-module/weather/current": {
      "get": {
        "summary": "Retrieve current day conditions",
        "tags": [
          "Weather module"
        ],
        "responses": {
          "200": {
            "description": "Response containing current weather conditions details for a specified location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherResLocationCurrent"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/weather-module/weather/current",
                      "method": "GET",
                      "data": {
                        "temperature": 22.5,
                        "temperature_min": 18.2,
                        "temperature_max": 25.8,
                        "feels_like": 21.9,
                        "pressure": 1013,
                        "humidity": 55,
                        "weather": {
                          "code": 800,
                          "main": "Clear",
                          "description": "clear sky",
                          "icon": "01d"
                        },
                        "wind": {
                          "speed": 3.5,
                          "deg": 180,
                          "gust": 5.8
                        },
                        "clouds": 10,
                        "rain": 10,
                        "snow": 10,
                        "sunrise": "2025-02-06T06:45:00Z",
                        "sunset": "2025-02-06T17:30:00Z",
                        "day_time": "2019-08-24T14:15:22Z"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-weather-module-current",
        "description": "Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details for a current day and for a specified location.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "location",
            "description": "The location for weather updates, specified as a city name or coordinates (latitude, longitude)."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "lat_lon",
                "city_name",
                "city_id",
                "zip_code"
              ],
              "default": "city_name"
            },
            "in": "query",
            "name": "location_type",
            "description": "Specifies the method used to determine the location for weather updates."
          }
        ],
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/weather-module/weather/forecast": {
      "get": {
        "summary": "Retrieve forecast conditions",
        "tags": [
          "Weather module"
        ],
        "responses": {
          "200": {
            "description": "Response containing current weather forecast details for a specified location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherResLocationForecast"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/weather-module/weather/forecast",
                      "method": "GET",
                      "data": [
                        {
                          "temperature": {
                            "morn": 22.5,
                            "day": 24.5,
                            "eve": 22.5,
                            "night": 20.5,
                            "min": 20.5,
                            "max": 24.5
                          },
                          "feels_like": {
                            "morn": 22.5,
                            "day": 24.5,
                            "eve": 22.5,
                            "night": 20.5
                          },
                          "pressure": 1013,
                          "humidity": 55,
                          "weather": {
                            "code": 800,
                            "main": "Clear",
                            "description": "clear sky",
                            "icon": "01d"
                          },
                          "wind": {
                            "speed": 3.5,
                            "deg": 180,
                            "gust": 5.8
                          },
                          "clouds": 10,
                          "rain": 10,
                          "snow": 10,
                          "sunrise": "2025-02-06T06:45:00Z",
                          "sunset": "2025-02-06T17:30:00Z",
                          "moonrise": "2025-02-06T17:30:00Z",
                          "moonset": "2025-02-06T17:30:00Z",
                          "day_time": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "operationId": "get-weather-module-forecast",
        "description": "Fetches real-time weather data, including temperature, humidity, wind speed, and other meteorological details forecast for a specified location.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "location",
            "description": "The location for weather updates, specified as a city name or coordinates (latitude, longitude)."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "lat_lon",
                "city_name",
                "city_id",
                "zip_code"
              ],
              "default": "city_name"
            },
            "in": "query",
            "name": "location_type",
            "description": "Specifies the method used to determine the location for weather updates."
          }
        ],
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/weather-module/geolocation/city-to-coordinates": {
      "get": {
        "tags": [
          "Weather module"
        ],
        "summary": "Convert city name to geographical coordinates",
        "description": "Retrieves latitude and longitude based on a given city name. Useful for mapping and location-based services.",
        "operationId": "get-weather-module-geolocation",
        "parameters": [
          {
            "name": "city",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the city for which geographical coordinates are requested."
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing geographical information related to a specified location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherResGeolocationCityToCoordinates"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/weather-module/geolocation/city-to-coordinates",
                      "method": "GET",
                      "data": {
                        "name": "Prague",
                        "local_names": {
                          "property1": "Prague",
                          "property2": "Prague"
                        },
                        "lat": "50.0755",
                        "lon": "14.4378",
                        "country": "CZ",
                        "state": "Prague Region"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/weather-module/geolocation/coordinates-to-city": {
      "get": {
        "tags": [
          "Weather module"
        ],
        "summary": "Convert coordinates to city name",
        "description": "Returns the city name based on provided latitude and longitude values. Useful for reverse geocoding applications.",
        "operationId": "get-weather-module-geolocation-coordinates-to-city",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Latitude of the location for reverse geocoding."
          },
          {
            "name": "lon",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Longitude of the location for reverse geocoding."
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing geographical information related to a specified location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherResGeolocationCoordinatesToCity"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": "success",
                      "timestamp": "2025-01-18T12:00:00Z",
                      "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                      "path": "/api/v1/weather-module/geolocation/coordinates-to-city",
                      "method": "GET",
                      "data": {
                        "name": "Prague",
                        "local_names": {
                          "property1": "Prague",
                          "property2": "Prague"
                        },
                        "lat": "50.0755",
                        "lon": "14.4378",
                        "country": "CZ",
                        "state": "Prague Region"
                      },
                      "metadata": {
                        "request_duration_ms": 57,
                        "server_time": "2025-01-18T12:00:00Z",
                        "cpu_usage": 25.28
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "authentication": []
          },
          {
            "x-display-secret": []
          }
        ]
      }
    },
    "/third-party/webhook": {
      "servers": [
        {
          "url": "http://third-party.device.local",
          "description": "Dummy local URL for third-party device webhook"
        }
      ],
      "put": {
        "tags": [
          "Devices module"
        ],
        "summary": "Send command to third-party device",
        "description": "This endpoint is used to send property update commands to a third-party device. The backend calls this webhook with one or more property updates. The third-party device should process the updates and return a status response.\n\n**The actual webhook path must be defined on the third-party device level**, and the backend must be configured accordingly to call the correct endpoint.",
        "operationId": "put-third-party-webhook",
        "requestBody": {
          "description": "Represents a request to update properties on a third-party device.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicesThirdPartyDevicePropertiesUpdateRequest"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "properties": [
                      {
                        "device": "234e5678-a89b-22d3-c456-426614174133",
                        "channel": "456e7890-c89d-42d5-e678-626816194355",
                        "property": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                        "value": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content. Indicates that the request was successfully processed and no further response is required.",
            "content": {}
          },
          "207": {
            "description": "Response from the third-party device after processing the update request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesThirdPartyDevicePropertiesUpdateResult"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "properties": [
                        {
                          "device": "234e5678-a89b-22d3-c456-426614174133",
                          "channel": "456e7890-c89d-42d5-e678-626816194355",
                          "property": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                          "status": -80003
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Indicates that the request was invalid, possibly due to missing or malformed data."
          },
          "500": {
            "description": "Internal Server Error. Indicates a server-side error while processing the request."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRegister": {
        "title": "Register",
        "description": "Schema for user registration.",
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique identifier for the user.",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password. Must be at least 6 characters long.",
            "example": "superstrongpassword"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Optional user's email address.",
            "example": "john@doe.com"
          },
          "first_name": {
            "type": "string",
            "description": "Optional user's first name.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Optional user's last name.",
            "example": "Doe"
          }
        },
        "examples": [
          {
            "username": "johndoe",
            "password": "superstrongpassword",
            "email": "john@doe.com",
            "first_name": "John",
            "last_name": "Doe"
          }
        ]
      },
      "AuthCheckUsername": {
        "title": "Check Username",
        "description": "Schema for checking username availability.",
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username to check for availability.",
            "example": "johndoe"
          }
        },
        "examples": [
          {
            "username": "johndoe"
          }
        ]
      },
      "AuthCheckEmail": {
        "title": "Check Email",
        "description": "Schema for checking email availability.",
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address to check for availability.",
            "example": "john@doe.com"
          }
        },
        "examples": [
          {
            "email": "john@doe.com"
          }
        ]
      },
      "AuthLogin": {
        "title": "Login",
        "description": "Schema for user authentication.",
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user.",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The user's password.",
            "example": "superstrongpassword"
          }
        },
        "examples": [
          {
            "username": "johndoe",
            "password": "superstrongpassword"
          }
        ]
      },
      "AuthRefreshToken": {
        "title": "Refresh Access Token",
        "description": "Schema for refreshing user access token.",
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT refresh access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw"
          }
        },
        "examples": [
          {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw"
          }
        ]
      },
      "AuthTokenPair": {
        "title": "Token Pair",
        "description": "Schema for access and refresh tokens for an authenticated session.",
        "type": "object",
        "required": [
          "access_token",
          "refresh_token",
          "type",
          "expiration"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The JWT access token for authenticated sessions.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          },
          "refresh_token": {
            "type": "string",
            "description": "The JWT refresh token for authenticated sessions.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw"
          },
          "type": {
            "type": "string",
            "description": "Token type",
            "default": "Bearer",
            "example": "Bearer"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "The JWT access token expiration date.",
            "example": "2025-01-18T12:00:00Z"
          }
        },
        "examples": [
          {
            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
            "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw",
            "type": "Bearer",
            "expiration": "2025-01-18T12:00:00Z"
          }
        ]
      },
      "AuthValidation": {
        "title": "Validation",
        "description": "Schema for validation result.",
        "type": "object",
        "required": [
          "valid"
        ],
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the provided validation field is valid.",
            "example": true
          }
        },
        "examples": [
          {
            "valid": true
          }
        ]
      },
      "AuthDisplaySecret": {
        "title": "Display Secret",
        "description": "Schema for display registration result.",
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string",
            "description": "Display account secret",
            "example": "IwMj3jfHdRVIxCck6DBgcQi3zXDNAHUu"
          }
        },
        "examples": [
          {
            "secret": "IwMj3jfHdRVIxCck6DBgcQi3zXDNAHUu"
          }
        ]
      },
      "AuthReqRegister": {
        "title": "Register Request",
        "description": "Request schema for user registration.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AuthRegister"
          }
        },
        "examples": [
          {
            "data": {
              "username": "johndoe",
              "password": "superstrongpassword",
              "email": "john@doe.com",
              "first_name": "John",
              "last_name": "Doe"
            }
          }
        ]
      },
      "AuthReqCheckUsername": {
        "title": "Check Username Request",
        "description": "Request schema for username validation.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AuthCheckUsername"
          }
        },
        "examples": [
          {
            "data": {
              "username": "johndoe"
            }
          }
        ]
      },
      "AuthReqCheckEmail": {
        "title": "Check Email Request",
        "description": "Request schema for email validation.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AuthCheckEmail"
          }
        },
        "examples": [
          {
            "data": {
              "email": "john@doe.com"
            }
          }
        ]
      },
      "AuthReqLogin": {
        "title": "Login Request",
        "description": "Request schema for user authentication.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AuthLogin"
          }
        },
        "examples": [
          {
            "data": {
              "username": "johndoe",
              "password": "superstrongpassword"
            }
          }
        ]
      },
      "AuthReqRefreshToken": {
        "title": "Refresh Access Token Request",
        "description": "Request schema for user access token refresh.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AuthRefreshToken"
          }
        },
        "examples": [
          {
            "data": {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw"
            }
          }
        ]
      },
      "AuthResCheckUsername": {
        "title": "Validation Response",
        "description": "Response schema indicating the result of a username validation request.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/auth-module/auth/check/username",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "POST",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/AuthValidation",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/auth-module/auth/check/username",
            "method": "POST",
            "data": {
              "valid": true
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "AuthResCheckEmail": {
        "title": "Validation Response",
        "description": "Response schema indicating the result of a email validation request.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/auth-module/auth/check/email",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "POST",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/AuthValidation",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/auth-module/auth/check/email",
            "method": "POST",
            "data": {
              "valid": true
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "AuthResLogin": {
        "title": "Login Response",
        "description": "Response schema returned after successful user authentication.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/auth-module/auth/login",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "POST",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/AuthTokenPair",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/auth-module/auth/login",
            "method": "POST",
            "data": {
              "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
              "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw",
              "type": "Bearer",
              "expiration": "2025-01-18T12:00:00Z"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "AuthResRefresh": {
        "title": "Refresh Access Token Response",
        "description": "Response schema returned after successful user access token refresh.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/auth-module/auth/refresh",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "POST",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/AuthTokenPair",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/auth-module/auth/refresh",
            "method": "POST",
            "data": {
              "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
              "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDMyfQ.ysGR_iIUp1O2wrUaKzIlr0eKufYUhdNFV156bA_FoFw",
              "type": "Bearer",
              "expiration": "2025-01-18T12:00:00Z"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "AuthResRegisterDisplay": {
        "title": "Register Display Response",
        "description": "Response returned after successfully registering a display.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/auth-module/auth/register-display",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "POST",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/AuthDisplaySecret",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/auth-module/auth/register-display",
            "method": "POST",
            "data": {
              "secret": "IwMj3jfHdRVIxCck6DBgcQi3zXDNAHUu"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "AuthResProfile": {
        "title": "Profile Response",
        "description": "Response schema containing details about the authenticated user's profile.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/auth-module/auth/profile",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UsersUser",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/auth-module/auth/profile",
            "method": "GET",
            "data": {
              "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
              "username": "johndoe",
              "first_name": "John",
              "last_name": "Doe",
              "email": "john@doe.com",
              "is_hidden": false,
              "role": "user",
              "created_at": "2025-01-25T12:00:00Z",
              "updated_at": "2025-01-25T12:00:00Z"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "UsersUser": {
        "title": "User",
        "description": "Schema for a registered user within the system.",
        "type": "object",
        "required": [
          "id",
          "username",
          "first_name",
          "last_name",
          "email",
          "is_hidden",
          "role",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user.",
            "example": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6"
          },
          "username": {
            "type": "string",
            "description": "Unique username of the user.",
            "example": "johndoe"
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "description": "First name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "Last name of the user.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "Email address of the user.",
            "example": "john@doe.com"
          },
          "is_hidden": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the user is hidden from general visibility."
          },
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user",
              "display"
            ],
            "description": "User role: 'owner' has full access, 'admin' can manage users, 'user' has limited access, 'display' is read-only.",
            "default": "user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the user was created.",
            "example": "2025-01-25T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The timestamp when the user was updated.",
            "example": "2025-01-25T12:00:00Z"
          }
        },
        "examples": [
          {
            "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
            "username": "johndoe",
            "first_name": "John",
            "last_name": "Doe",
            "email": "john@doe.com",
            "is_hidden": false,
            "role": "user",
            "created_at": "2025-01-25T12:00:00Z",
            "updated_at": "2025-01-25T12:00:00Z"
          }
        ]
      },
      "UsersCreateUser": {
        "title": "Create User",
        "description": "Schema for creating a new user account.",
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user.",
            "example": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6"
          },
          "username": {
            "type": "string",
            "description": "Unique username for the new user.",
            "example": "johndoe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for the new user. Must be at least 6 characters long.",
            "example": "superstrongpassword",
            "writeOnly": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "Optional email address for the user.",
            "example": "john@doe.com"
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "description": "Optional first name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "Optional last name of the user.",
            "example": "Doe"
          },
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user",
              "display"
            ],
            "description": "Role of the user. Defaults to 'user' if not provided.",
            "default": "user",
            "example": "user"
          }
        },
        "examples": [
          {
            "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
            "username": "johndoe",
            "password": "superstrongpassword",
            "email": "john@doe.com",
            "first_name": "John",
            "last_name": "Doe",
            "role": "user"
          }
        ]
      },
      "UsersUpdateUser": {
        "title": "Update User",
        "description": "Schema for modifying an existing user account.",
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "format": "password",
            "description": "New password for the user.",
            "example": "superstrongpassword",
            "writeOnly": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "Updated email address of the user.",
            "example": "john@doe.com"
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "description": "Updated first name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "Updated last name of the user.",
            "example": "Doe"
          },
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user",
              "display"
            ],
            "description": "Updated role of the user.",
            "example": "user"
          }
        },
        "examples": [
          {
            "email": "john@doe.com",
            "first_name": "John",
            "last_name": "Doe",
            "role": "user"
          }
        ]
      },
      "UsersReqCreateUser": {
        "title": "Create User Request",
        "description": "Request schema for creating new user.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UsersCreateUser"
          }
        },
        "examples": [
          {
            "data": {
              "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
              "username": "johndoe",
              "password": "superstrongpassword",
              "email": "john@doe.com",
              "first_name": "John",
              "last_name": "Doe",
              "role": "user"
            }
          }
        ]
      },
      "UsersReqUpdateUser": {
        "title": "Update User Request",
        "description": "Request schema for updating an existing user.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UsersUpdateUser"
          }
        },
        "examples": [
          {
            "data": {
              "email": "john@doe.com",
              "first_name": "John",
              "last_name": "Doe",
              "role": "user"
            }
          }
        ]
      },
      "UsersResUser": {
        "title": "User Response",
        "description": "Response schema containing a single user.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/users-module/users/f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UsersUser",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/users-module/users/f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
            "method": "GET",
            "data": {
              "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
              "username": "johndoe",
              "first_name": "John",
              "last_name": "Doe",
              "email": "john@doe.com",
              "is_hidden": false,
              "role": "user",
              "created_at": "2025-01-25T12:00:00Z",
              "updated_at": "2025-01-25T12:00:00Z"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "UsersResUsers": {
        "title": "User Response",
        "description": "Response schema containing a list of users.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/users-module/users",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsersUser"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/users-module/users",
            "method": "GET",
            "data": [
              {
                "id": "f1e09ba1-429f-4c6a-a2fd-aca6a7c4a8c6",
                "username": "johndoe",
                "first_name": "John",
                "last_name": "Doe",
                "email": "john@doe.com",
                "is_hidden": false,
                "role": "user",
                "created_at": "2025-01-25T12:00:00Z",
                "updated_at": "2025-01-25T12:00:00Z"
              }
            ],
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "ConfigAudio": {
        "title": "Audio",
        "description": "Schema for audio configuration, including speaker and microphone controls.",
        "type": "object",
        "required": [
          "type",
          "speaker",
          "speaker_volume",
          "microphone",
          "microphone_volume"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "audio"
            ],
            "description": "Configuration section type",
            "default": "audio"
          },
          "speaker": {
            "type": "boolean",
            "description": "Indicates whether the speaker is enabled.",
            "default": false
          },
          "speaker_volume": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 1,
            "description": "The volume level of the speaker, ranging from 0 to 100.",
            "default": 0,
            "example": 50
          },
          "microphone": {
            "type": "boolean",
            "description": "Indicates whether the microphone is enabled.",
            "default": false
          },
          "microphone_volume": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 1,
            "description": "The volume level of the microphone, ranging from 0 to 100.",
            "default": 0,
            "example": 50
          }
        },
        "examples": [
          {
            "type": "audio",
            "speaker": false,
            "speaker_volume": 50,
            "microphone": false,
            "microphone_volume": 50
          }
        ]
      },
      "ConfigDisplay": {
        "title": "Display",
        "description": "Schema for display configuration, including brightness, dark mode, and screen lock behavior.",
        "type": "object",
        "required": [
          "type",
          "dark_mode",
          "brightness",
          "screen_lock_duration",
          "screen_saver"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "display"
            ],
            "description": "Configuration section type",
            "default": "display"
          },
          "dark_mode": {
            "type": "boolean",
            "description": "Enables dark mode for the display.",
            "default": false
          },
          "brightness": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 1,
            "description": "Sets the brightness level of the display (0-100).",
            "default": 0,
            "example": 50
          },
          "screen_lock_duration": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 3600,
            "multipleOf": 1,
            "description": "Time in seconds before the screen automatically locks.",
            "default": 30,
            "example": 30
          },
          "screen_saver": {
            "type": "boolean",
            "description": "Enables the screen saver when the device is idle. Value is in seconds.",
            "default": true
          }
        },
        "examples": [
          {
            "type": "display",
            "dark_mode": false,
            "brightness": 50,
            "screen_lock_duration": 30,
            "screen_saver": true
          }
        ]
      },
      "ConfigLanguage": {
        "title": "Language",
        "description": "Schema for language configuration, time zone, and time format on the smart panel.",
        "type": "object",
        "required": [
          "type",
          "language",
          "timezone",
          "time_format"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "language"
            ],
            "description": "Configuration section type",
            "default": "language"
          },
          "language": {
            "type": "string",
            "enum": [
              "en_US",
              "cs_CZ"
            ],
            "description": "Defines the language and region format. Uses standard locale codes (ISO 639-1).",
            "default": "en_US"
          },
          "timezone": {
            "type": "string",
            "description": "Sets the time format for displaying time on the panel.",
            "default": "Europe/Prague",
            "example": "Europe/Prague"
          },
          "time_format": {
            "type": "string",
            "enum": [
              "12h",
              "24h"
            ],
            "description": "Defines the time zone of the smart panel. Uses the IANA time zone format.",
            "default": "24h"
          }
        },
        "examples": [
          {
            "type": "language",
            "language": "en_US",
            "timezone": "Europe/Prague",
            "time_format": "24h"
          }
        ]
      },
      "ConfigWeather": {
        "title": "Weather",
        "description": "Schema for weather configuration, including location, temperature unit, and API integration.",
        "type": "object",
        "required": [
          "type",
          "location",
          "location_type",
          "unit",
          "open_weather_api_key"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "weather"
            ],
            "description": "Configuration section type",
            "default": "weather"
          },
          "location": {
            "type": "string",
            "nullable": true,
            "description": "The location for weather updates, specified as a city name or coordinates (latitude, longitude).",
            "example": "Prague"
          },
          "location_type": {
            "type": "string",
            "enum": [
              "lat_lon",
              "city_name",
              "city_id",
              "zip_code"
            ],
            "description": "Specifies the method used to determine the location for weather updates.",
            "default": "city_name",
            "example": "city_name"
          },
          "unit": {
            "type": "string",
            "enum": [
              "celsius",
              "fahrenheit"
            ],
            "description": "Defines the temperature unit for weather data.",
            "default": "celsius",
            "example": "celsius"
          },
          "open_weather_api_key": {
            "type": "string",
            "nullable": true,
            "description": "API key for OpenWeatherMap. Required only if using OpenWeatherMap as a data source."
          }
        },
        "examples": [
          {
            "type": "weather",
            "location": "Prague",
            "location_type": "city_name",
            "unit": "celsius",
            "open_weather_api_key": "string"
          }
        ]
      },
      "ConfigApp": {
        "title": "Configuration",
        "type": "object",
        "required": [
          "audio",
          "display",
          "language",
          "weather"
        ],
        "properties": {
          "audio": {
            "$ref": "#/components/schemas/ConfigAudio",
            "description": "Audio configuration settings, including speaker and microphone options."
          },
          "display": {
            "$ref": "#/components/schemas/ConfigDisplay",
            "description": "Display settings, including brightness, dark mode, and screen lock duration."
          },
          "language": {
            "$ref": "#/components/schemas/ConfigLanguage",
            "description": "Language and localization settings, including time zone and time format."
          },
          "weather": {
            "$ref": "#/components/schemas/ConfigWeather",
            "description": "Weather settings, including location, unit preferences, and API integration."
          }
        },
        "description": "Schema for the complete configuration settings for the smart panel, including audio, display, language, and weather settings.",
        "examples": [
          {
            "audio": {
              "type": "audio",
              "speaker": false,
              "speaker_volume": 50,
              "microphone": false,
              "microphone_volume": 50
            },
            "display": {
              "type": "display",
              "dark_mode": false,
              "brightness": 50,
              "screen_lock_duration": 30,
              "screen_saver": true
            },
            "language": {
              "type": "language",
              "language": "en_US",
              "timezone": "Europe/Prague",
              "time_format": "24h"
            },
            "weather": {
              "type": "weather",
              "location": "Prague",
              "location_type": "city_name",
              "unit": "celsius",
              "open_weather_api_key": "string"
            }
          }
        ]
      },
      "ConfigUpdateAudio": {
        "title": "Update Audio",
        "description": "Schema for partial update settings for audio configuration, allowing changes to speaker and microphone settings.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "audio"
            ],
            "description": "Configuration section type"
          },
          "speaker": {
            "type": "boolean",
            "description": "Enables or disables the speaker.",
            "example": true
          },
          "speaker_volume": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 1,
            "description": "Sets the speaker volume (0-100).",
            "example": 34
          },
          "microphone": {
            "type": "boolean",
            "description": "Enables or disables the microphone.",
            "example": true
          },
          "microphone_volume": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 1,
            "description": "Sets the microphone volume (0-100).",
            "example": 55
          }
        },
        "examples": [
          {
            "type": "audio",
            "speaker": true,
            "speaker_volume": 34,
            "microphone": true,
            "microphone_volume": 55
          }
        ]
      },
      "ConfigUpdateDisplay": {
        "title": "Update Display",
        "description": "Schema for partial update settings for display configuration, allowing changes to brightness, dark mode, and screen lock duration.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "display"
            ],
            "description": "Configuration section type"
          },
          "dark_mode": {
            "type": "boolean",
            "description": "Enables or disables dark mode.",
            "example": false
          },
          "brightness": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 1,
            "description": "Sets the brightness level (0-100).",
            "example": 55
          },
          "screen_lock_duration": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 3600,
            "multipleOf": 1,
            "description": "Time in seconds before the screen automatically locks.",
            "example": 120
          },
          "screen_saver": {
            "type": "boolean",
            "description": "Enables or disables the screen saver.",
            "example": true
          }
        },
        "examples": [
          {
            "type": "display",
            "dark_mode": false,
            "brightness": 55,
            "screen_lock_duration": 120,
            "screen_saver": true
          }
        ]
      },
      "ConfigUpdateLanguage": {
        "title": "Update Language",
        "description": "Schema for partial update settings for language and localization configuration.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "language"
            ],
            "description": "Configuration section type"
          },
          "language": {
            "type": "string",
            "enum": [
              "en_US",
              "cs_CZ"
            ],
            "description": "Defines the language and region format.",
            "example": "en_US"
          },
          "timezone": {
            "type": "string",
            "description": "Defines the time zone using the IANA time zone format.",
            "example": "Europe/Prague"
          },
          "time_format": {
            "type": "string",
            "enum": [
              "12h",
              "24h"
            ],
            "description": "Sets the time format (12-hour or 24-hour).",
            "example": "24h"
          }
        },
        "examples": [
          {
            "type": "language",
            "language": "en_US",
            "timezone": "Europe/Prague",
            "time_format": "24h"
          }
        ]
      },
      "ConfigUpdateWeather": {
        "title": "Update Weather",
        "description": "Schema for partial update settings for weather configuration, allowing changes to location, temperature unit, and API key.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "weather"
            ],
            "description": "Configuration section type"
          },
          "location": {
            "type": "string",
            "nullable": true,
            "description": "The location for weather updates, specified as a city name or coordinates (latitude, longitude).",
            "example": "Prague"
          },
          "location_type": {
            "type": "string",
            "enum": [
              "lat_lon",
              "city_name",
              "city_id",
              "zip_code"
            ],
            "description": "Specifies the method used to determine the location for weather updates.",
            "example": "city_name"
          },
          "unit": {
            "type": "string",
            "enum": [
              "celsius",
              "fahrenheit"
            ],
            "description": "Defines the temperature unit for weather data.",
            "example": "celsius"
          },
          "open_weather_api_key": {
            "type": "string",
            "nullable": true,
            "description": "API key for OpenWeatherMap. Required only if using OpenWeatherMap as a data source."
          }
        },
        "examples": [
          {
            "type": "weather",
            "location": "Prague",
            "location_type": "city_name",
            "unit": "celsius",
            "open_weather_api_key": "string"
          }
        ]
      },
      "ConfigReqUpdateSection": {
        "title": "Update Section",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfigUpdateAudio"
              },
              {
                "$ref": "#/components/schemas/ConfigUpdateDisplay"
              },
              {
                "$ref": "#/components/schemas/ConfigUpdateLanguage"
              },
              {
                "$ref": "#/components/schemas/ConfigUpdateWeather"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "audio": "#/components/schemas/ConfigUpdateAudio",
                "display": "#/components/schemas/ConfigUpdateDisplay",
                "language": "#/components/schemas/ConfigUpdateLanguage",
                "weather": "#/components/schemas/ConfigUpdateWeather"
              }
            }
          }
        },
        "description": "Request schema for partial updating a configuration section.",
        "examples": [
          {
            "data": {
              "type": "audio",
              "speaker": true,
              "speaker_volume": 34,
              "microphone": true,
              "microphone_volume": 55
            }
          }
        ]
      },
      "ConfigResApp": {
        "title": "Configuration Response",
        "description": "Response schema containing complete configuration settings for the smart panel, including audio, display, language, and weather settings.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/config-module/config",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ConfigApp",
            "description": "The configuration data for the smart panel, containing various settings."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/config-module/config",
            "method": "GET",
            "data": {
              "audio": {
                "type": "audio",
                "speaker": false,
                "speaker_volume": 50,
                "microphone": false,
                "microphone_volume": 50
              },
              "display": {
                "type": "display",
                "dark_mode": false,
                "brightness": 50,
                "screen_lock_duration": 30,
                "screen_saver": true
              },
              "language": {
                "type": "language",
                "language": "en_US",
                "timezone": "Europe/Prague",
                "time_format": "24h"
              },
              "weather": {
                "type": "weather",
                "location": "Prague",
                "location_type": "city_name",
                "unit": "celsius",
                "open_weather_api_key": "string"
              }
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "ConfigResSection": {
        "title": "Configuration Section Response",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/config-module/config/audio",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConfigAudio"
              },
              {
                "$ref": "#/components/schemas/ConfigDisplay"
              },
              {
                "$ref": "#/components/schemas/ConfigLanguage"
              },
              {
                "$ref": "#/components/schemas/ConfigWeather"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "audio": "#/components/schemas/ConfigAudio",
                "display": "#/components/schemas/ConfigDisplay",
                "language": "#/components/schemas/ConfigLanguage",
                "weather": "#/components/schemas/ConfigWeather"
              }
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "description": "Response containing a specific section of the smart panel configuration, such as audio, display, language, or weather settings.",
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/config-module/config/audio",
            "method": "GET",
            "data": {
              "type": "audio",
              "speaker": false,
              "speaker_volume": 50,
              "microphone": false,
              "microphone_volume": 50
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "DevicesDevice": {
        "title": "Device",
        "description": "Represents the core attributes of a device, including its unique identifier, name, and category. This model forms the foundation for more detailed device representations, such as those including related entities (e.g., channels, properties, or controls).",
        "type": "object",
        "required": [
          "id",
          "type",
          "category",
          "name",
          "description",
          "controls",
          "channels",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "System-generated unique identifier for the device.",
            "example": "332dda32-b7de-4557-956a-b6ed6c6799a4",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of device.",
            "example": "third-party",
            "readOnly": true
          },
          "category": {
            "$ref": "#/components/schemas/DevicesDeviceCategory",
            "description": "Type of the device, defining its purpose or category (e.g., thermostat, lighting).",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the device.",
            "example": "Thermostat"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional detailed description of the device.",
            "default": null,
            "example": "Living room thermostat"
          },
          "controls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesDeviceControl"
            },
            "description": "A list of controls associated with the device. Controls represent actions or commands that can be executed on the device."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannel"
            },
            "description": "A list of channels associated with the device. Each channel represents a functional unit of the device, such as a sensor, actuator, or logical grouping of properties."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating when the device was created.",
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp indicating when the device was last updated, if applicable.",
            "default": null,
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          }
        }
      },
      "DevicesDeviceControl": {
        "title": "Device Control",
        "description": "A Device control is an action that can be executed at the device level. It provides operational commands like restarting a device or updating its firmware.",
        "type": "object",
        "required": [
          "id",
          "name",
          "device",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "System-generated unique identifier for the control.",
            "example": "227349b1-a2a7-439a-b296-59f002faa8ce",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the control, representing the action it performs.",
            "example": "reboot"
          },
          "device": {
            "type": "string",
            "format": "uuid",
            "description": "The device to which this control belongs.",
            "example": "332dda32-b7de-4557-956a-b6ed6c6799a4",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the control was created.",
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp when the control was last updated, if applicable.",
            "default": null,
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          }
        }
      },
      "DevicesChannel": {
        "title": "Channel",
        "description": "Defines a functional unit of a device, such as a sensor, actuator, or informational component. Channels group related properties and controls for modular device functionality.",
        "type": "object",
        "required": [
          "id",
          "category",
          "name",
          "description",
          "device",
          "controls",
          "properties",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "System-generated unique identifier for the channel.",
            "example": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
            "readOnly": true
          },
          "category": {
            "$ref": "#/components/schemas/DevicesChannelCategory",
            "description": "Type of the channel, indicating its functional category (e.g., temperature, light)."
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the channel.",
            "example": "Temperature Sensor"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description of the channel‚Äôs purpose or functionality.",
            "default": null,
            "example": "Living room temperature sensor"
          },
          "device": {
            "type": "string",
            "format": "uuid",
            "description": "The parent device to which this channel belongs.",
            "example": "332dda32-b7de-4557-956a-b6ed6c6799a4",
            "readOnly": true
          },
          "controls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannelControl"
            },
            "description": "A list of controls associated with the device channel. Controls represent actions or commands that can be executed on the channel."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannelProperty"
            },
            "description": "A list of properties associated with the device channel. Properties represent the state or attributes of the channel."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the channel was created.",
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp when the channel was last updated, if applicable.",
            "default": null,
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          }
        }
      },
      "DevicesChannelControl": {
        "title": "Channel Control",
        "description": "A Channel control defines a specific action or command that can be executed for a channel. Examples include resetting a sensor or changing its operational mode.",
        "type": "object",
        "required": [
          "id",
          "name",
          "channel",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "System-generated unique identifier for the channel control.",
            "example": "4b76637f-a8a6-45ba-965b-4819f4b57df2",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the control, representing the action it performs.",
            "example": "reset"
          },
          "channel": {
            "type": "string",
            "format": "uuid",
            "description": "The channel to which this control belongs.",
            "example": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the control was created.",
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp when the control was last updated, if applicable.",
            "default": null,
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          }
        }
      },
      "DevicesChannelProperty": {
        "title": "Channel Property",
        "description": "A Channel property describes an individual attribute or measurable value associated with a channel. This includes parameters like brightness, temperature, or energy consumption, reflecting the channel‚Äôs current state or configuration.",
        "type": "object",
        "required": [
          "id",
          "category",
          "name",
          "permissions",
          "data_type",
          "unit",
          "format",
          "invalid",
          "step",
          "value",
          "channel",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "System-generated unique identifier for the channel property.",
            "example": "208f4790-21b0-4927-8835-7302d883a141",
            "readOnly": true
          },
          "category": {
            "$ref": "#/components/schemas/DevicesChannelPropertyCategory",
            "description": "Defines the category of the property, representing its functionality or characteristic.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Optional name of the property for easier identification.",
            "default": null,
            "example": "Thermostat mode"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ro",
                "rw",
                "wo",
                "ev"
              ]
            },
            "description": "Access level for the property: read-only (ro), read-write (rw), write-only (wo), or event-only (ev).",
            "example": [
              "ro"
            ],
            "readOnly": true
          },
          "data_type": {
            "type": "string",
            "enum": [
              "char",
              "uchar",
              "short",
              "ushort",
              "int",
              "uint",
              "float",
              "bool",
              "string",
              "enum",
              "unknown"
            ],
            "description": "Data type of the property‚Äôs value, e.g., string, integer, or boolean.",
            "default": "unknown",
            "example": "string"
          },
          "unit": {
            "type": "string",
            "nullable": true,
            "description": "Measurement unit associated with the property‚Äôs value, if applicable.",
            "default": null,
            "example": "¬∞C"
          },
          "format": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": [
                "string",
                "number"
              ]
            },
            "description": "List of valid values or states for the property, where applicable.",
            "default": null,
            "example": [
              "heat",
              "auto"
            ]
          },
          "invalid": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ],
            "nullable": true,
            "description": "Value to represent an invalid state for the property.",
            "default": null,
            "example": -999
          },
          "step": {
            "type": "number",
            "nullable": true,
            "description": "Step value indicating the smallest increment for the property.",
            "default": null,
            "example": 0.5
          },
          "value": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ],
            "nullable": true,
            "description": "Current value of the property.",
            "default": null,
            "example": 22.1
          },
          "channel": {
            "type": "string",
            "format": "uuid",
            "description": "Reference to the channel that this property belongs to.",
            "example": "568e43e9-c9da-4a4e-ac7c-9904b42730c6",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the control was created.",
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp when the control was last updated, if applicable.",
            "default": null,
            "example": "2024-12-11T12:00:00Z",
            "readOnly": true
          }
        }
      },
      "DevicesCreateDevice": {
        "title": "Create Device",
        "description": "Schema for creating a new device. This includes essential attributes like type, category, and name, along with optional details such as a description.",
        "type": "object",
        "required": [
          "type",
          "category",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the device. Optional during creation and system-generated if not provided.",
            "example": "332dda32-b7de-4557-956a-b6ed6c6799a4"
          },
          "type": {
            "type": "string",
            "description": "Specifies the type of device.",
            "default": "third-party",
            "example": "third-party"
          },
          "category": {
            "$ref": "#/components/schemas/DevicesDeviceCategory",
            "description": "Type of the device, defining its purpose or category (e.g., thermostat, lighting)."
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the device.",
            "example": "Thermostat"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional detailed description of the device.",
            "example": "Living room thermostat"
          },
          "controls": {
            "type": "array",
            "description": "A list of controls associated with the device. Controls represent actions or commands that can be executed on the device.",
            "items": {
              "$ref": "#/components/schemas/DevicesCreateDeviceControl"
            }
          },
          "channels": {
            "type": "array",
            "description": "A list of channels associated with the device. Each channel represents a functional unit of the device, such as a sensor, actuator, or logical grouping of properties.",
            "items": {
              "$ref": "#/components/schemas/DevicesCreateDeviceChannel"
            }
          }
        }
      },
      "DevicesCreateDeviceControl": {
        "title": "Create Device Control",
        "description": "Schema for creating a new device control, which represents an action the device can perform.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the control. Optional during creation and system-generated if not provided.",
            "example": "227349b1-a2a7-439a-b296-59f002faa8ce"
          },
          "name": {
            "type": "string",
            "description": "The name of the control, representing the action it performs.",
            "example": "reboot"
          }
        }
      },
      "DevicesCreateDeviceChannel": {
        "title": "Create Channel",
        "description": "Schema for creating a new channel, representing a functional category of a device such as temperature, light, or motion.",
        "type": "object",
        "required": [
          "category",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the channel. Optional during creation and system-generated if not provided.",
            "example": "568e43e9-c9da-4a4e-ac7c-9904b42730c6"
          },
          "category": {
            "$ref": "#/components/schemas/DevicesChannelCategory",
            "description": "Type of the channel, indicating its functional category (e.g., temperature, light)."
          },
          "name": {
            "type": "string",
            "description": "Human-readable name of the channel.",
            "example": "Temperature Sensor"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description of the channel‚Äôs purpose or functionality.",
            "example": "Living room temperature sensor"
          },
          "controls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesCreateChannelControl"
            },
            "description": "A list of controls associated with the device channel. Controls represent actions or commands that can be executed on the channel."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesCreateChannelProperty"
            },
            "description": "A list of properties associated with the device channel. Properties represent the state or attributes of the channel."
          }
        }
      },
      "DevicesCreateChannel": {
        "title": "Create Device Channel",
        "description": "Schema representing a request to create a new channel for a device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DevicesCreateDeviceChannel"
          },
          {
            "type": "object",
            "required": [
              "device"
            ],
            "properties": {
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The parent device to which this channel belongs.",
                "example": "332dda32-b7de-4557-956a-b6ed6c6799a4"
              }
            }
          }
        ]
      },
      "DevicesCreateChannelControl": {
        "title": "Create Channel Control",
        "description": "Schema for creating a new control within a channel, representing a specific action or command that can be performed.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the control. Optional during creation and system-generated if not provided.",
            "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
          },
          "name": {
            "type": "string",
            "description": "The name of the control, representing the action it performs.",
            "example": "reset"
          }
        }
      },
      "DevicesCreateChannelProperty": {
        "title": "Create Channel Property",
        "description": "Schema for creating a new property within a channel, representing a specific characteristic or functional value.",
        "type": "object",
        "required": [
          "category",
          "permissions",
          "data_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the property. Optional during creation and system-generated if not provided.",
            "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
          },
          "category": {
            "$ref": "#/components/schemas/DevicesChannelPropertyCategory",
            "description": "Defines the category of the property, representing its functionality or characteristic."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Optional name of the property for easier identification.",
            "example": "Thermostat mode"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ro",
                "rw",
                "wo",
                "ev"
              ]
            },
            "description": "Access level for the property: read-only (ro), read-write (rw), write-only (wo), or event-only (ev).",
            "example": [
              "ro"
            ]
          },
          "data_type": {
            "type": "string",
            "enum": [
              "char",
              "uchar",
              "short",
              "ushort",
              "int",
              "uint",
              "float",
              "bool",
              "string",
              "enum",
              "unknown"
            ],
            "description": "Data type of the property‚Äôs value, e.g., string, integer, or boolean.",
            "example": "string"
          },
          "unit": {
            "type": "string",
            "nullable": true,
            "description": "Measurement unit associated with the property‚Äôs value, if applicable.",
            "example": "¬∞C"
          },
          "format": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": [
                "string",
                "number"
              ]
            },
            "description": "List of valid values or states for the property, where applicable.",
            "example": [
              "heat",
              "auto"
            ]
          },
          "invalid": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ],
            "nullable": true,
            "description": "Value to represent an invalid state for the property.",
            "example": -999
          },
          "step": {
            "type": "number",
            "nullable": true,
            "description": "Step value indicating the smallest increment for the property.",
            "example": 0.5
          },
          "value": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ],
            "nullable": true,
            "description": "Current value of the property.",
            "example": 22.1
          }
        }
      },
      "DevicesUpdateDevice": {
        "title": "Update Device",
        "description": "Schema for updating basic details of a device, including its name and description.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name of the device.",
            "example": "Thermostat"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional detailed description of the device.",
            "example": "Living room thermostat"
          }
        }
      },
      "DevicesUpdateChannel": {
        "title": "Update Channel",
        "description": "Schema for updating a channel, including optional updates to its name and description.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name of the channel.",
            "example": "Temperature Sensor"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description of the channel‚Äôs purpose or functionality.",
            "example": "Living room temperature sensor"
          }
        }
      },
      "DevicesUpdateChannelProperty": {
        "title": "Update Channel Property",
        "description": "Schema for updating a channel property, allowing updates to its name, unit, format, invalid state, step, and value.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Optional name of the property for easier identification.",
            "example": "Thermostat mode"
          },
          "unit": {
            "type": "string",
            "nullable": true,
            "description": "Measurement unit associated with the property‚Äôs value, if applicable.",
            "example": "¬∞C"
          },
          "format": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": [
                "string",
                "number"
              ]
            },
            "description": "List of valid values or states for the property, where applicable.",
            "example": [
              "heat",
              "auto"
            ]
          },
          "invalid": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ],
            "nullable": true,
            "description": "Value to represent an invalid state for the property.",
            "example": -999
          },
          "step": {
            "type": "number",
            "nullable": true,
            "description": "Step value indicating the smallest increment for the property.",
            "example": 0.5
          },
          "value": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ],
            "nullable": true,
            "description": "Current value of the property.",
            "example": 22.1
          }
        }
      },
      "DevicesReqCreateDevice": {
        "title": "Create Device Request",
        "description": "Request schema for creating new device.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesCreateDevice"
          }
        }
      },
      "DevicesReqCreateDeviceControl": {
        "title": "Create Device Control Request",
        "description": "Request schema for creating new device control.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesCreateDeviceControl"
          }
        }
      },
      "DevicesReqCreateDeviceChannel": {
        "title": "Create Device Channel Request",
        "description": "Request schema for creating new device channel.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesCreateDeviceChannel"
          }
        }
      },
      "DevicesReqCreateChannel": {
        "title": "Create Channel Request",
        "description": "Request schema for creating new channel.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesCreateChannel"
          }
        }
      },
      "DevicesReqCreateChannelControl": {
        "title": "Create Channel Control Request",
        "description": "Request schema for creating new channel control.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesCreateChannelControl"
          }
        }
      },
      "DevicesReqCreateChannelProperty": {
        "title": "Create Channel Property Request",
        "description": "Request schema for creating new channel property.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesCreateChannelProperty"
          }
        }
      },
      "DevicesReqUpdateDevice": {
        "title": "Update Device Request",
        "description": "Request schema for updating an existing device.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesUpdateDevice"
          }
        }
      },
      "DevicesReqUpdateChannel": {
        "title": "Update Channel Request",
        "description": "Request schema for updating an existing channel.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesUpdateChannel"
          }
        }
      },
      "DevicesReqUpdateChannelProperty": {
        "title": "Update Channel Property Request",
        "description": "Request schema for updating an existing channel property.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevicesUpdateChannelProperty"
          }
        }
      },
      "DevicesResDevice": {
        "title": "Device Response",
        "description": "Response schema containing a single device.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DevicesDevice"
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResDevices": {
        "title": "Device Response",
        "description": "Response schema containing a list of devices.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/devices",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesDevice"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResDeviceControl": {
        "title": "Device Control Response",
        "description": "Response schema containing a single device control.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls/227349b1-a2a7-439a-b296-59f002faa8ce",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DevicesDeviceControl",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResDeviceControls": {
        "title": "Device Controls Response",
        "description": "Response schema containing a list of device controls.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/controls",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesDeviceControl"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResDeviceChannel": {
        "title": "Device Channel Response",
        "description": "Response schema containing a single device channel.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DevicesChannel",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResDeviceChannels": {
        "title": "Device Channels Response",
        "description": "Response schema containing a list of device channels.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/devices/332dda32-b7de-4557-956a-b6ed6c6799a4/channels",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannel"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResChannel": {
        "title": "Device Channel Response",
        "description": "Response schema containing a single channel.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DevicesChannel",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResChannels": {
        "title": "Device Channels Response",
        "description": "Response schema containing a list of channels.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/channels",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannel"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResChannelControl": {
        "title": "Device Channel Control Response",
        "description": "Response schema containing a single channel control.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls/4b76637f-a8a6-45ba-965b-4819f4b57df2",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DevicesChannelControl",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResChannelControls": {
        "title": "Device Channel Controls Response",
        "description": "Response schema containing a list of channel controls.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/controls",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannelControl"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResChannelProperty": {
        "title": "Device Channel Property Response",
        "description": "Response schema containing a single channel property.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties/208f4790-21b0-4927-8835-7302d883a141",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DevicesChannelProperty",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesResChannelProperties": {
        "title": "Device Channel Properties Response",
        "description": "Response schema containing a list of channel properties.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/devices-module/channels/568e43e9-c9da-4a4e-ac7c-9904b42730c6/properties",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesChannelProperty"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DevicesDeviceCategory": {
        "title": "Device Category",
        "type": "string",
        "enum": [
          "generic",
          "air_conditioner",
          "air_dehumidifier",
          "air_humidifier",
          "air_purifier",
          "alarm",
          "camera",
          "door",
          "doorbell",
          "fan",
          "heater",
          "lighting",
          "lock",
          "media",
          "outlet",
          "pump",
          "robot_vacuum",
          "sensor",
          "speaker",
          "sprinkler",
          "switcher",
          "television",
          "thermostat",
          "valve",
          "window_covering"
        ],
        "description": "Defines the type of device, categorizing it by its primary function."
      },
      "DevicesChannelCategory": {
        "title": "Channel Category",
        "type": "string",
        "enum": [
          "generic",
          "air_particulate",
          "alarm",
          "battery",
          "camera",
          "carbon_dioxide",
          "carbon_monoxide",
          "contact",
          "cooler",
          "device_information",
          "door",
          "doorbell",
          "electrical_energy",
          "electrical_power",
          "fan",
          "flow",
          "heater",
          "humidity",
          "illuminance",
          "leak",
          "light",
          "lock",
          "media_input",
          "media_playback",
          "microphone",
          "motion",
          "nitrogen_dioxide",
          "occupancy",
          "outlet",
          "ozone",
          "pressure",
          "robot_vacuum",
          "smoke",
          "speaker",
          "sulphur_dioxide",
          "switcher",
          "television",
          "temperature",
          "thermostat",
          "valve",
          "volatile_organic_compounds",
          "window_covering"
        ],
        "description": "Represents a functional channel inside a device, responsible for a specific type of data or control."
      },
      "DevicesChannelPropertyCategory": {
        "title": "Channel Property Category",
        "type": "string",
        "enum": [
          "generic",
          "active",
          "angle",
          "brightness",
          "color_blue",
          "color_green",
          "color_red",
          "color_temperature",
          "color_white",
          "connection_type",
          "consumption",
          "current",
          "density",
          "detected",
          "direction",
          "distance",
          "duration",
          "event",
          "fault",
          "firmware_revision",
          "frequency",
          "hardware_revision",
          "hue",
          "humidity",
          "in_use",
          "infrared",
          "input_source",
          "level",
          "link_quality",
          "locked",
          "manufacturer",
          "measured",
          "model",
          "mode",
          "obstruction",
          "on",
          "over_current",
          "over_voltage",
          "pan",
          "peak_level",
          "percentage",
          "position",
          "power",
          "rate",
          "remaining",
          "remote_key",
          "saturation",
          "serial_number",
          "source",
          "speed",
          "status",
          "swing",
          "tampered",
          "temperature",
          "tilt",
          "track",
          "type",
          "units",
          "voltage",
          "volume",
          "zoom"
        ],
        "description": "Defines specific properties of a device channel that can be measured, controlled, or reported."
      },
      "DevicesThirdPartyDevicePropertyUpdateRequest": {
        "title": "Third-Party Device Property Update",
        "description": "Represents a request to update a specific property on a third-party device.",
        "type": "object",
        "required": [
          "device",
          "channel",
          "property",
          "value"
        ],
        "properties": {
          "device": {
            "type": "string",
            "description": "Unique identifier of the target device.",
            "format": "uuid",
            "example": "234e5678-a89b-22d3-c456-426614174133"
          },
          "channel": {
            "type": "string",
            "description": "Unique identifier of the target device channel.",
            "format": "uuid",
            "example": "456e7890-c89d-42d5-e678-626816194355"
          },
          "property": {
            "type": "string",
            "description": "Unique identifier of the property being updated.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "format": "uuid"
          },
          "value": {
            "oneOf": [
              {
                "type": "string",
                "description": "String value for the property."
              },
              {
                "type": "number",
                "description": "Numeric value for the property."
              },
              {
                "type": "boolean",
                "description": "Boolean value for the property."
              }
            ],
            "description": "New value to be applied to the property."
          }
        }
      },
      "DevicesThirdPartyDevicePropertiesUpdateRequest": {
        "title": "Third-Party Device Property Update Request",
        "description": "Represents a request to update one or more properties on a third-party device.",
        "type": "object",
        "properties": {
          "properties": {
            "description": "Represents a single property update operation for a third-party device.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicesThirdPartyDevicePropertyUpdateRequest"
            }
          }
        }
      },
      "DevicesThirdPartyDevicePropertyUpdateResult": {
        "title": "Third-Party Device Property Update Result",
        "description": "Represents the result of an update operation for a specific property on a third-party device.",
        "type": "object",
        "required": [
          "device",
          "channel",
          "property",
          "status"
        ],
        "properties": {
          "device": {
            "type": "string",
            "format": "uuid",
            "example": "234e5678-a89b-22d3-c456-426614174133",
            "description": "Unique identifier of the device for which the update was requested.",
            "readOnly": true
          },
          "channel": {
            "type": "string",
            "format": "uuid",
            "example": "456e7890-c89d-42d5-e678-626816194355",
            "description": "Unique identifier of the channel that was updated.",
            "readOnly": true
          },
          "property": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the property that was updated.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082"
          },
          "status": {
            "$ref": "#/components/schemas/DevicesThirdPartyErrorCode",
            "description": "Status code indicating the outcome of the update request. A value of 0 indicates success, while negative values indicate errors."
          }
        }
      },
      "DevicesThirdPartyDevicePropertiesUpdateResult": {
        "title": "Third-Party Device Property Update Result",
        "description": "Represents the overall response from a third-party device after processing an update request.",
        "type": "object",
        "required": [
          "properties"
        ],
        "properties": {
          "properties": {
            "type": "array",
            "description": "List of processed properties and their update results.",
            "items": {
              "$ref": "#/components/schemas/DevicesThirdPartyDevicePropertyUpdateResult"
            },
            "readOnly": true
          }
        }
      },
      "DevicesThirdPartyErrorCode": {
        "title": "Third-Party Error Code",
        "description": "Error codes returned by third-party devices when processing requests.",
        "type": "number",
        "enum": [
          0,
          -80001,
          -80002,
          -80003,
          -80004,
          -80005,
          -80006,
          -80007,
          -80008,
          -80009,
          -80010,
          -80011
        ],
        "x-enum-descriptions": {
          "0": "Success. The request was processed successfully.",
          "-80001": "Request denied due to insufficient privileges.",
          "-80002": "Operation not supported in the current state (e.g., device is offline or locked).",
          "-80003": "Resource is busy, try again later.",
          "-80004": "Cannot write to a read-only property.",
          "-80005": "Cannot read from a write-only property.",
          "-80006": "Notification is not supported for this property.",
          "-80007": "Insufficient system resources to process the request.",
          "-80008": "Operation timed out.",
          "-80009": "Requested resource (e.g., device, channel, property) does not exist.",
          "-80010": "Invalid value provided for a property update request.",
          "-80011": "Insufficient authorization for the requested operation."
        }
      },
      "DashboardPageBase": {
        "title": "Page Base",
        "description": "The base schema for all dashboard pages, including common properties such as id, type, title, and timestamps.",
        "type": "object",
        "required": [
          "id",
          "title",
          "icon",
          "order",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the dashboard page.",
            "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "The title of the dashboard page, displayed in the UI.",
            "example": "Cards Dashboard"
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon representing the dashboard page.",
            "example": "icon-name"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The display order of the dashboard page in the navigation or list.",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the dashboard page was created.",
            "example": "2025-01-25T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The timestamp when the dashboard page was last updated.",
            "example": "2025-01-25T13:00:00Z",
            "readOnly": true
          }
        }
      },
      "DashboardCardsPage": {
        "title": "Cards Page",
        "description": "A cards page dashboard type, displaying an overview with associated cards.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardPageBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "cards",
              "data_source"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "cards",
                "description": "Indicates that this is a cards dashboard page.",
                "default": "cards",
                "example": "cards",
                "readOnly": true
              },
              "cards": {
                "type": "array",
                "description": "A list of cards associated with the page.",
                "items": {
                  "$ref": "#/components/schemas/DashboardCard"
                }
              },
              "data_source": {
                "type": "array",
                "description": "A list of data sources associated with the page.",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardPageDeviceChannelDataSource"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device-channel": "#/components/schemas/DashboardPageDeviceChannelDataSource"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "DashboardTilesPage": {
        "title": "Tiles Page",
        "description": "A tiles page dashboard type, displaying a grid of customizable tiles.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardPageBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "tiles",
              "data_source"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "tiles",
                "description": "Indicates that this is a tiles dashboard page.",
                "default": "tiles",
                "example": "tiles",
                "readOnly": true
              },
              "tiles": {
                "type": "array",
                "description": "A list of tiles associated with the tiles page.",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardPageDeviceTile"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardPageTimeTile"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardPageDayWeatherTile"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardPageForecastWeatherTile"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device": "#/components/schemas/DashboardPageDeviceTile",
                      "clock": "#/components/schemas/DashboardPageTimeTile",
                      "weather-day": "#/components/schemas/DashboardPageDayWeatherTile",
                      "weather-forecast": "#/components/schemas/DashboardPageForecastWeatherTile"
                    }
                  }
                }
              },
              "data_source": {
                "type": "array",
                "description": "A list of data sources associated with the tiles page.",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardPageDeviceChannelDataSource"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device-channel": "#/components/schemas/DashboardPageDeviceChannelDataSource"
                    }
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "id": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
            "title": "Cards Dashboard",
            "icon": "icon-name",
            "order": 1,
            "created_at": "2025-01-25T12:00:00Z",
            "updated_at": "2025-01-25T13:00:00Z",
            "type": "tiles",
            "tiles": [
              {
                "id": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                "row": 1,
                "col": 1,
                "row_span": 2,
                "col_span": 2,
                "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                "data_source": [
                  {
                    "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                    "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                    "created_at": "2025-01-25T12:00:00Z",
                    "updated_at": "2025-01-25T13:00:00Z",
                    "type": "device-channel",
                    "device": "234e5678-a89b-22d3-c456-426614174133",
                    "channel": "345e6789-b89c-32d4-d567-526715184244",
                    "property": "456e7890-c89d-42d5-e678-626816194355",
                    "icon": "icon-name"
                  }
                ],
                "created_at": "2025-01-25T12:00:00Z",
                "updated_at": "2025-01-25T13:00:00Z",
                "type": "device",
                "device": "4751ac17-9d97-4fb9-932b-dad617c3e66b",
                "icon": "icon-name"
              }
            ],
            "data_source": [
              {
                "id": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                "page": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
                "created_at": "2025-01-25T12:00:00Z",
                "updated_at": "2025-01-25T13:00:00Z",
                "type": "device-channel",
                "device": "234e5678-a89b-22d3-c456-426614174133",
                "channel": "345e6789-b89c-32d4-d567-526715184244",
                "property": "456e7890-c89d-42d5-e678-626816194355",
                "icon": "icon-name"
              }
            ]
          }
        ]
      },
      "DashboardDevicePage": {
        "title": "Device Page",
        "description": "A dashboard page type associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardPageBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "device"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device",
                "description": "Indicates that this is a device-specific dashboard page.",
                "default": "device",
                "example": "device",
                "readOnly": true
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              }
            }
          }
        ]
      },
      "DashboardCard": {
        "title": "Card",
        "description": "Represents a card in the dashboard page, with its associated tiles and data sources.",
        "type": "object",
        "required": [
          "id",
          "title",
          "icon",
          "order",
          "page",
          "tiles",
          "data_source",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the dashboard card.",
            "example": "7943c740-52b6-4e18-a136-cf39061ac869",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "The title displayed on the dashboard card.",
            "example": "Mood lights"
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon representing the dashboard card.",
            "default": null,
            "example": "icon-name"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "Defines the position of the card relative to others on the dashboard page.",
            "multipleOf": 1,
            "example": 1,
            "minimum": 0
          },
          "page": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the page this card belongs to.",
            "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
          },
          "tiles": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCardDeviceTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCardTimeTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCardDayWeatherTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCardForecastWeatherTile"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device": "#/components/schemas/DashboardCardDeviceTile",
                  "clock": "#/components/schemas/DashboardCardTimeTile",
                  "weather-day": "#/components/schemas/DashboardCardDayWeatherTile",
                  "weather-forecast": "#/components/schemas/DashboardCardForecastWeatherTile"
                }
              }
            },
            "description": "A list of tiles associated with the dashboard card, representing widgets or functional components."
          },
          "data_source": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCardDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardCardDeviceChannelDataSource"
                }
              }
            },
            "description": "A list of data sources used by the card, typically for real-time updates."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the dashboard card was created.",
            "example": "2025-01-25T12:00:00Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "The timestamp when the dashboard card was last updated.",
            "example": "2025-01-25T13:00:00Z",
            "readOnly": true
          }
        }
      },
      "DashboardTileBase": {
        "title": "Tile",
        "description": "The base schema for all dashboard tiles, containing common properties such as position, dimensions, and associated page and data sources.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id",
              "row",
              "col",
              "row_span",
              "col_span"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "A unique identifier for the dashboard tile.",
                "example": "9f807d44-bd0f-4f5e-b409-3d048efa03d8",
                "readOnly": true
              },
              "row": {
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "multipleOf": 1,
                "description": "The row position of the tile in the grid.",
                "example": 1
              },
              "col": {
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "multipleOf": 1,
                "description": "The column position of the tile in the grid.",
                "example": 1
              },
              "row_span": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "multipleOf": 1,
                "description": "The number of rows the tile spans.",
                "default": 0,
                "example": 2
              },
              "col_span": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "multipleOf": 1,
                "description": "The number of columns the tile spans.",
                "default": 0,
                "example": 2
              }
            }
          },
          {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "page"
                ],
                "properties": {
                  "page": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the page to which this tile belongs.",
                    "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "card"
                ],
                "properties": {
                  "card": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the card to which this tile belongs.",
                    "example": "7943c740-52b6-4e18-a136-cf39061ac869"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "data_source",
              "created_at",
              "updated_at"
            ],
            "properties": {
              "data_source": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardTileDeviceChannelDataSource"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device-channel": "#/components/schemas/DashboardTileDeviceChannelDataSource"
                    }
                  }
                },
                "description": "A list of data sources used by the tile, typically for real-time updates."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the dashboard tile was created.",
                "example": "2025-01-25T12:00:00Z",
                "readOnly": true
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "The timestamp when the dashboard tile was last updated.",
                "example": "2025-01-25T13:00:00Z",
                "readOnly": true
              }
            }
          }
        ]
      },
      "DashboardDeviceTile": {
        "title": "Device Tile",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardTileBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "device",
              "icon"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device",
                "description": "Indicates that this is a device-specific tile.",
                "default": "device",
                "example": "device",
                "readOnly": true
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              },
              "icon": {
                "type": "string",
                "nullable": true,
                "description": "The icon representing the device tile.",
                "example": "icon-name"
              }
            }
          }
        ]
      },
      "DashboardPageDeviceTile": {
        "title": "Device Tile On Page",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDeviceTile"
          },
          {
            "type": "object",
            "required": [
              "page"
            ],
            "properties": {
              "page": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated page.",
                "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
              }
            }
          }
        ]
      },
      "DashboardCardDeviceTile": {
        "title": "Device Tile On Card",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDeviceTile"
          },
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated card.",
                "example": "7943c740-52b6-4e18-a136-cf39061ac869"
              }
            }
          }
        ]
      },
      "DashboardTimeTile": {
        "title": "Time Tile",
        "description": "A dashboard tile displaying a clock.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "clock",
                "description": "Indicates that this is a clock tile.",
                "default": "clock",
                "example": "clock",
                "readOnly": true
              }
            }
          }
        ]
      },
      "DashboardPageTimeTile": {
        "title": "Device Tile On Page",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardTimeTile"
          },
          {
            "type": "object",
            "required": [
              "page"
            ],
            "properties": {
              "page": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated page.",
                "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
              }
            }
          }
        ]
      },
      "DashboardCardTimeTile": {
        "title": "Device Tile On Card",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardTimeTile"
          },
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated card.",
                "example": "7943c740-52b6-4e18-a136-cf39061ac869"
              }
            }
          }
        ]
      },
      "DashboardDayWeatherTile": {
        "title": "Day Weather Tile",
        "description": "A dashboard tile displaying the weather for a specific day.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "weather-day",
                "description": "Indicates that this is a day weather tile.",
                "default": "weather-day",
                "example": "weather-day",
                "readOnly": true
              }
            }
          }
        ]
      },
      "DashboardPageDayWeatherTile": {
        "title": "Device Tile On Page",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDayWeatherTile"
          },
          {
            "type": "object",
            "required": [
              "page"
            ],
            "properties": {
              "page": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated page.",
                "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
              }
            }
          }
        ]
      },
      "DashboardCardDayWeatherTile": {
        "title": "Device Tile On Card",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDayWeatherTile"
          },
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated card.",
                "example": "7943c740-52b6-4e18-a136-cf39061ac869"
              }
            }
          }
        ]
      },
      "DashboardForecastWeatherTile": {
        "title": "Forecast Weather Tile",
        "description": "A dashboard tile displaying a weather forecast.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "weather-forecast",
                "description": "Indicates that this is a weather forecast tile.",
                "default": "weather-forecast",
                "example": "weather-forecast",
                "readOnly": true
              }
            }
          }
        ]
      },
      "DashboardPageForecastWeatherTile": {
        "title": "Device Tile On Page",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardForecastWeatherTile"
          },
          {
            "type": "object",
            "required": [
              "page"
            ],
            "properties": {
              "page": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated page.",
                "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
              }
            }
          }
        ]
      },
      "DashboardCardForecastWeatherTile": {
        "title": "Device Tile On Card",
        "description": "A dashboard tile associated with a specific device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardForecastWeatherTile"
          },
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated card.",
                "example": "7943c740-52b6-4e18-a136-cf39061ac869"
              }
            }
          }
        ]
      },
      "DashboardDataSourceBase": {
        "title": "Data Source",
        "description": "The base schema for all dashboard data sources, containing common attributes such as the associated tile and timestamps.",
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "A unique identifier for the data source.",
                "example": "dbf838d6-5c5b-4c8e-b189-952038b9020c",
                "readOnly": true
              }
            }
          },
          {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "page"
                ],
                "properties": {
                  "page": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the page to which this data source belongs.",
                    "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "card"
                ],
                "properties": {
                  "card": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the card to which this data source belongs.",
                    "example": "7943c740-52b6-4e18-a136-cf39061ac869"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "tile"
                ],
                "properties": {
                  "tile": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the tile to which this data source belongs.",
                    "example": "9f807d44-bd0f-4f5e-b409-3d048efa03d8"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "created_at",
              "updated_at"
            ],
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the data source was created.",
                "example": "2025-01-25T12:00:00Z",
                "readOnly": true
              },
              "updated_at": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "The timestamp when the data source was last updated.",
                "example": "2025-01-25T13:00:00Z",
                "readOnly": true
              }
            }
          }
        ]
      },
      "DashboardDeviceChannelDataSource": {
        "title": "Device Channel Data Source",
        "description": "A data source linked to a specific device channel and property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDataSourceBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "device",
              "channel",
              "property",
              "icon"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device-channel",
                "description": "Indicates that this data source is linked to a device channel.",
                "default": "device-channel",
                "example": "device-channel",
                "readOnly": true
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "234e5678-a89b-22d3-c456-426614174133"
              },
              "channel": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated channel.",
                "example": "345e6789-b89c-32d4-d567-526715184244"
              },
              "property": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated channel property.",
                "example": "456e7890-c89d-42d5-e678-626816194355"
              },
              "icon": {
                "type": "string",
                "nullable": true,
                "default": null,
                "description": "The icon representing the data source.",
                "example": "icon-name"
              }
            }
          }
        ]
      },
      "DashboardPageDeviceChannelDataSource": {
        "title": "Device Channel Data Source",
        "description": "A data source linked to a specific device channel and property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDeviceChannelDataSource"
          },
          {
            "type": "object",
            "required": [
              "page"
            ],
            "properties": {
              "page": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated page.",
                "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
              }
            }
          }
        ]
      },
      "DashboardCardDeviceChannelDataSource": {
        "title": "Device Channel Data Source",
        "description": "A data source linked to a specific device channel and property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDeviceChannelDataSource"
          },
          {
            "type": "object",
            "required": [
              "card"
            ],
            "properties": {
              "card": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated card.",
                "example": "7943c740-52b6-4e18-a136-cf39061ac869"
              }
            }
          }
        ]
      },
      "DashboardTileDeviceChannelDataSource": {
        "title": "Device Channel Data Source",
        "description": "A data source linked to a specific device channel and property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardDeviceChannelDataSource"
          },
          {
            "type": "object",
            "required": [
              "tile"
            ],
            "properties": {
              "tile": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated card.",
                "example": "9f807d44-bd0f-4f5e-b409-3d048efa03d8"
              }
            }
          }
        ]
      },
      "DashboardCreatePageBase": {
        "title": "Create Page",
        "description": "The base schema for creating a new dashboard page, containing shared attributes like title and order.",
        "type": "object",
        "required": [
          "title",
          "order"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the dashboard page (optional during creation).",
            "example": "602df00f-0cc9-45dd-a74f-3a28f0e8c8ee"
          },
          "title": {
            "type": "string",
            "description": "The title of the dashboard page.",
            "example": "My Dashboard"
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon associated with the dashboard page.",
            "example": "icon-name"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The position of the page in the dashboard‚Äôs list.",
            "example": 1
          }
        }
      },
      "DashboardCreateCardsPage": {
        "title": "Create Cards Page",
        "description": "The schema for creating a cards dashboard page.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreatePageBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "cards",
                "description": "Indicates that this is a cards dashboard page.",
                "default": "cards",
                "example": "cards"
              },
              "cards": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardCreateCard"
                },
                "description": "A list of cards associated with the page."
              },
              "data_source": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                    }
                  }
                },
                "description": "A list of data sources associated with the page."
              }
            }
          }
        ]
      },
      "DashboardCreateTilesPage": {
        "title": "Create Tiles Page",
        "description": "The schema for creating a tiles dashboard page.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreatePageBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "tiles",
                "description": "Indicates that this is a tiles dashboard page.",
                "default": "tiles",
                "example": "tiles"
              },
              "tiles": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardCreateDeviceTile"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardCreateTimeTile"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardCreateDayWeatherTile"
                    },
                    {
                      "$ref": "#/components/schemas/DashboardCreateForecastWeatherTile"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device": "#/components/schemas/DashboardCreateDeviceTile",
                      "clock": "#/components/schemas/DashboardCreateTimeTile",
                      "weather-day": "#/components/schemas/DashboardCreateDayWeatherTile",
                      "weather-forecast": "#/components/schemas/DashboardCreateForecastWeatherTile"
                    }
                  }
                },
                "description": "A list of tiles associated with the tiles page."
              },
              "data_source": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                    }
                  }
                },
                "description": "A list of data sources associated with the tiles page."
              }
            }
          }
        ]
      },
      "DashboardCreateDevicePage": {
        "title": "Create Device Page",
        "description": "The schema for creating a device dashboard page.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreatePageBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "device"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device",
                "description": "Indicates that this is a device-specific dashboard page.",
                "default": "device",
                "example": "device"
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              }
            }
          }
        ]
      },
      "DashboardCreateCard": {
        "title": "Create Card",
        "description": "Schema for creating a dashboard card, containing attributes such as title and icon.",
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the dashboard card (optional during creation).",
            "example": "7943c740-52b6-4e18-a136-cf39061ac869"
          },
          "title": {
            "type": "string",
            "description": "The title displayed on the dashboard card.",
            "example": "Mood lights"
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon representing the dashboard card.",
            "default": null,
            "example": "icon-name"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "Defines the position of the card relative to others on the dashboard page.",
            "multipleOf": 1,
            "example": 1,
            "minimum": 0
          },
          "tiles": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCreateDeviceTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCreateTimeTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCreateDayWeatherTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCreateForecastWeatherTile"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device": "#/components/schemas/DashboardCreateDeviceTile",
                  "clock": "#/components/schemas/DashboardCreateTimeTile",
                  "weather-day": "#/components/schemas/DashboardCreateDayWeatherTile",
                  "weather-forecast": "#/components/schemas/DashboardCreateForecastWeatherTile"
                }
              }
            },
            "description": "A list of tiles associated with the dashboard card, representing widgets or functional components."
          },
          "data_source": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                }
              }
            },
            "description": "A list of data sources used by the card, typically for real-time updates."
          }
        }
      },
      "DashboardCreateTileBase": {
        "title": "Create Tile",
        "description": "Base schema for creating a dashboard tile, containing shared attributes such as position and size.",
        "type": "object",
        "required": [
          "row",
          "col"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the dashboard tile (optional during creation).",
            "example": "9f807d44-bd0f-4f5e-b409-3d048efa03d8"
          },
          "row": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "multipleOf": 1,
            "description": "The row position of the tile in the grid.",
            "example": 1
          },
          "col": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "multipleOf": 1,
            "description": "The column position of the tile in the grid.",
            "example": 2
          },
          "row_span": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The number of rows the tile spans in the grid.",
            "example": 1
          },
          "col_span": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The number of columns the tile spans in the grid.",
            "example": 2
          },
          "data_source": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
                }
              }
            },
            "description": "A list of data sources used by the tile, typically for real-time updates."
          }
        }
      },
      "DashboardCreateDeviceTile": {
        "title": "Create Device Tile",
        "description": "Schema for creating a dashboard tile representing a device.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "device"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device",
                "description": "Specifies the type of tile as a device-specific tile.",
                "default": "device",
                "example": "device"
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              },
              "icon": {
                "type": "string",
                "nullable": true,
                "description": "The icon representing the tile.",
                "example": "icon-name"
              }
            }
          }
        ]
      },
      "DashboardCreateTimeTile": {
        "title": "Create Time Tile",
        "description": "Schema for creating a dashboard tile representing a clock.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "clock",
                "description": "Specifies the type of tile as a clock.",
                "default": "clock",
                "example": "clock"
              }
            }
          }
        ]
      },
      "DashboardCreateDayWeatherTile": {
        "title": "Create Day Weather Tile",
        "description": "Schema for creating a dashboard tile representing day weather.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "weather-day",
                "description": "Specifies the type of tile as a day weather tile.",
                "default": "weather-day",
                "example": "weather-day"
              }
            }
          }
        ]
      },
      "DashboardCreateForecastWeatherTile": {
        "title": "Create Forecast Weather Tile",
        "description": "Schema for creating a dashboard tile representing weather forecast.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "weather-forecast",
                "description": "Specifies the type of tile as a weather forecast tile.",
                "default": "weather-forecast",
                "example": "weather-forecast"
              }
            }
          }
        ]
      },
      "DashboardCreateDataSourceBase": {
        "title": "Create Data Source",
        "description": "Base schema for creating a data source used in a dashboard tile.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the data source (optional during creation).",
            "example": "dbf838d6-5c5b-4c8e-b189-952038b9020c"
          }
        }
      },
      "DashboardCreateDeviceChannelDataSource": {
        "title": "Create Device Channel Data Source",
        "description": "Schema for creating a data source linked to a device channel and property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardCreateDataSourceBase"
          },
          {
            "type": "object",
            "required": [
              "type",
              "device",
              "channel",
              "property"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device-channel",
                "description": "Specifies the type of data source as linked to a device channel.",
                "default": "device-channel",
                "example": "device-channel"
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              },
              "channel": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated channel within the device.",
                "example": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7"
              },
              "property": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated property within the channel.",
                "example": "3d988def-559f-498c-a804-5111aba2df66"
              },
              "icon": {
                "type": "string",
                "nullable": true,
                "description": "The icon representing the data source.",
                "example": "icon-name"
              }
            }
          }
        ]
      },
      "DashboardUpdatePageBase": {
        "title": "Update Page",
        "description": "Base schema for updating a dashboard page.",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the page.",
            "example": "My Updated Dashboard"
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon associated with the page.",
            "example": "icon-name"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The display order of the page.",
            "example": 1
          }
        }
      },
      "DashboardUpdateCardsPage": {
        "title": "Update Cards Page",
        "description": "Schema for updating a cards page in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdatePageBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "cards",
                "description": "Indicates that this is a cards dashboard page.",
                "default": "cards",
                "example": "cards"
              }
            }
          }
        ]
      },
      "DashboardUpdateTilesPage": {
        "title": "Update Tiles Page",
        "description": "Schema for updating a tiles page in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdatePageBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "tiles",
                "description": "Indicates that this is a tiles dashboard page.",
                "default": "tiles",
                "example": "tiles"
              }
            }
          }
        ]
      },
      "DashboardUpdateDevicePage": {
        "title": "Update Device Page",
        "description": "Schema for updating a device page in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdatePageBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device",
                "description": "Indicates that this is a tiles dashboard page.",
                "default": "device",
                "example": "device"
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              }
            }
          }
        ]
      },
      "DashboardUpdateCard": {
        "title": "Update Card",
        "description": "Schema for updating a card in the dashboard.",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title displayed on the dashboard card.",
            "example": "Mood lights"
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "description": "The icon representing the dashboard card.",
            "default": null,
            "example": "icon-name"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "description": "Defines the position of the card relative to others on the dashboard page.",
            "multipleOf": 1,
            "example": 1,
            "minimum": 0
          }
        }
      },
      "DashboardUpdateTileBase": {
        "title": "Update Tile",
        "description": "Base schema for updating a tile in the dashboard.",
        "type": "object",
        "properties": {
          "row": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "multipleOf": 1,
            "description": "The row position of the tile in the grid.",
            "example": 1
          },
          "col": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "multipleOf": 1,
            "description": "The column position of the tile in the grid.",
            "example": 2
          },
          "row_span": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The number of rows the tile spans in the grid.",
            "example": 1
          },
          "col_span": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "multipleOf": 1,
            "description": "The number of columns the tile spans in the grid.",
            "example": 2
          }
        }
      },
      "DashboardUpdateDeviceTile": {
        "title": "Update Device Tile",
        "description": "Schema for updating a device tile in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device",
                "description": "Indicates that this is a device-specific dashboard tile.",
                "default": "device",
                "example": "device"
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              },
              "icon": {
                "type": "string",
                "nullable": true,
                "description": "The icon representing the tile.",
                "example": "icon-name"
              }
            }
          }
        ]
      },
      "DashboardUpdateTimeTile": {
        "title": "Update Time Tile",
        "description": "Schema for updating a time tile (clock) in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "clock",
                "description": "Specifies the type of tile as a clock.",
                "default": "clock",
                "example": "clock"
              }
            }
          }
        ]
      },
      "DashboardUpdateDayWeatherTile": {
        "title": "Update Day Weather Tile",
        "description": "Schema for updating a day weather tile in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "weather-day",
                "description": "Specifies the type of tile as a day weather tile.",
                "default": "weather-day",
                "example": "weather-day"
              }
            }
          }
        ]
      },
      "DashboardUpdateForecastWeatherTile": {
        "title": "Update Forecast Weather Tile",
        "description": "Schema for updating a forecast weather tile in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdateTileBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "weather-forecast",
                "description": "Specifies the type of tile as a weather forecast tile.",
                "default": "weather-forecast",
                "example": "weather-forecast"
              }
            }
          }
        ]
      },
      "DashboardUpdateDataSourceBase": {
        "title": "Update Data Source Base",
        "description": "Base schema for updating a data source in the dashboard.",
        "type": "object",
        "properties": {
          "tile": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the associated tile.",
            "example": "dbf838d6-5c5b-4c8e-b189-952038b9020c"
          }
        }
      },
      "DashboardUpdateDeviceChannelDataSource": {
        "title": "Update Device Channel Data Source",
        "description": "Schema for updating a device channel data source in the dashboard.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardUpdateDataSourceBase"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "const": "device-channel",
                "description": "Specifies the type of data source as linked to a device channel.",
                "default": "device-channel",
                "example": "device-channel"
              },
              "device": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated device.",
                "example": "4751ac17-9d97-4fb9-932b-dad617c3e66b"
              },
              "channel": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated channel within the device.",
                "example": "e6e21ca0-ab84-48d0-b229-9ba5ad19b2e7"
              },
              "property": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the associated property within the channel.",
                "example": "3d988def-559f-498c-a804-5111aba2df66"
              },
              "icon": {
                "type": "string",
                "nullable": true,
                "description": "The icon representing the data source.",
                "example": "icon-name"
              }
            }
          }
        ]
      },
      "DashboardReqCreatePage": {
        "title": "Create Page Request",
        "description": "Request schema for creating new page.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCreateCardsPage"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateTilesPage"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateDevicePage"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "cards": "#/components/schemas/DashboardCreateCardsPage",
                "tiles": "#/components/schemas/DashboardCreateTilesPage",
                "device": "#/components/schemas/DashboardCreateDevicePage"
              }
            }
          }
        }
      },
      "DashboardReqCreatePageCard": {
        "title": "Create Page Card Request",
        "description": "Request schema for creating new page card.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DashboardCreateCard"
          }
        }
      },
      "DashboardReqCreatePageTile": {
        "title": "Create Page Tile Request",
        "description": "Request schema for creating new page tile.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCreateDeviceTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateTimeTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateDayWeatherTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateForecastWeatherTile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device": "#/components/schemas/DashboardCreateDeviceTile",
                "clock": "#/components/schemas/DashboardCreateTimeTile",
                "weather-day": "#/components/schemas/DashboardCreateDayWeatherTile",
                "weather-forecast": "#/components/schemas/DashboardCreateForecastWeatherTile"
              }
            }
          }
        }
      },
      "DashboardReqCreateCardTile": {
        "title": "Create Card Tile Request",
        "description": "Request schema for creating new card tile.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCreateDeviceTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateTimeTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateDayWeatherTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCreateForecastWeatherTile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device": "#/components/schemas/DashboardCreateDeviceTile",
                "clock": "#/components/schemas/DashboardCreateTimeTile",
                "weather-day": "#/components/schemas/DashboardCreateDayWeatherTile",
                "weather-forecast": "#/components/schemas/DashboardCreateForecastWeatherTile"
              }
            }
          }
        }
      },
      "DashboardReqCreatePageDataSource": {
        "title": "Create Page Data Source Request",
        "description": "Request schema for creating new page data source.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
              }
            }
          }
        }
      },
      "DashboardReqCreateCardDataSource": {
        "title": "Create Card Data Source Request",
        "description": "Request schema for creating new card data source.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
              }
            }
          }
        }
      },
      "DashboardReqCreateTileDataSource": {
        "title": "Create Tile Data Source Request",
        "description": "Request schema for creating new tile data source.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardCreateDeviceChannelDataSource"
              }
            }
          }
        }
      },
      "DashboardReqUpdatePage": {
        "title": "Update Page Request",
        "description": "Request schema for updating an existing page.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardUpdateCardsPage"
              },
              {
                "$ref": "#/components/schemas/DashboardUpdateTilesPage"
              },
              {
                "$ref": "#/components/schemas/DashboardUpdateDevicePage"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "cards": "#/components/schemas/DashboardUpdateCardsPage",
                "tiles": "#/components/schemas/DashboardUpdateTilesPage",
                "device": "#/components/schemas/DashboardUpdateDevicePage"
              }
            }
          }
        }
      },
      "DashboardReqUpdateCard": {
        "title": "Update Card Request",
        "description": "Request schema for updating an existing card.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DashboardUpdateCard"
          }
        }
      },
      "DashboardReqUpdateTile": {
        "title": "Update Tile Request",
        "description": "Request schema for updating an existing tile.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardUpdateDeviceTile"
              },
              {
                "$ref": "#/components/schemas/DashboardUpdateTimeTile"
              },
              {
                "$ref": "#/components/schemas/DashboardUpdateDayWeatherTile"
              },
              {
                "$ref": "#/components/schemas/DashboardUpdateForecastWeatherTile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device": "#/components/schemas/DashboardUpdateDeviceTile",
                "clock": "#/components/schemas/DashboardUpdateTimeTile",
                "weather-day": "#/components/schemas/DashboardUpdateDayWeatherTile",
                "weather-forecast": "#/components/schemas/DashboardUpdateForecastWeatherTile"
              }
            }
          }
        }
      },
      "DashboardReqUpdateDataSource": {
        "title": "Update Data Source Request",
        "description": "Request schema for updating an existing data source.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardUpdateDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardUpdateDeviceChannelDataSource"
              }
            }
          }
        }
      },
      "DashboardResPage": {
        "title": "Page Response",
        "description": "Response schema containing a single page.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCardsPage"
              },
              {
                "$ref": "#/components/schemas/DashboardTilesPage"
              },
              {
                "$ref": "#/components/schemas/DashboardDevicePage"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "cards": "#/components/schemas/DashboardCardsPage",
                "tiles": "#/components/schemas/DashboardTilesPage",
                "device": "#/components/schemas/DashboardDevicePage"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPages": {
        "title": "Pages Response",
        "description": "Response schema containing a list of pages.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCardsPage"
                },
                {
                  "$ref": "#/components/schemas/DashboardTilesPage"
                },
                {
                  "$ref": "#/components/schemas/DashboardDevicePage"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "cards": "#/components/schemas/DashboardCardsPage",
                  "tiles": "#/components/schemas/DashboardTilesPage",
                  "device": "#/components/schemas/DashboardDevicePage"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCard": {
        "title": "Page Card Response",
        "description": "Response schema containing a single page card.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/DashboardCard",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCards": {
        "title": "Page Cards Response",
        "description": "Response schema containing a list of page cards.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardCard"
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCardTile": {
        "title": "Card Tile Response",
        "description": "Response schema containing a single card tile.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCardDeviceTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCardTimeTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCardDayWeatherTile"
              },
              {
                "$ref": "#/components/schemas/DashboardCardForecastWeatherTile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device": "#/components/schemas/DashboardCardDeviceTile",
                "clock": "#/components/schemas/DashboardCardTimeTile",
                "weather-day": "#/components/schemas/DashboardCardDayWeatherTile",
                "weather-forecast": "#/components/schemas/DashboardCardForecastWeatherTile"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCardTiles": {
        "title": "Card Tiles Response",
        "description": "Response schema containing a list of card tiles.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCardDeviceTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCardTimeTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCardDayWeatherTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardCardForecastWeatherTile"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device": "#/components/schemas/DashboardCardDeviceTile",
                  "clock": "#/components/schemas/DashboardCardTimeTile",
                  "weather-day": "#/components/schemas/DashboardCardDayWeatherTile",
                  "weather-forecast": "#/components/schemas/DashboardCardForecastWeatherTile"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCardTileDataSource": {
        "title": "Card Tile Data Source Response",
        "description": "Response schema containing a single tile data source.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardTileDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardTileDeviceChannelDataSource"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCardTileDataSources": {
        "title": "Card Tile Data Sources Response",
        "description": "Response schema containing a list of tile data sources.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardTileDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardTileDeviceChannelDataSource"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCardDataSource": {
        "title": "Card Data Source Response",
        "description": "Response schema containing a single card data source.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardCardDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardCardDeviceChannelDataSource"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageCardDataSources": {
        "title": "Card Data Sources Response",
        "description": "Response schema containing a list of card data sources.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/cards/7943c740-52b6-4e18-a136-cf39061ac869/data-source",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardCardDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardCardDeviceChannelDataSource"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageTile": {
        "title": "Page Tile Response",
        "description": "Response schema containing a single page tile.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardPageDeviceTile"
              },
              {
                "$ref": "#/components/schemas/DashboardPageTimeTile"
              },
              {
                "$ref": "#/components/schemas/DashboardPageDayWeatherTile"
              },
              {
                "$ref": "#/components/schemas/DashboardPageForecastWeatherTile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device": "#/components/schemas/DashboardPageDeviceTile",
                "clock": "#/components/schemas/DashboardPageTimeTile",
                "weather-day": "#/components/schemas/DashboardPageDayWeatherTile",
                "weather-forecast": "#/components/schemas/DashboardPageForecastWeatherTile"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageTiles": {
        "title": "Page Tiles Response",
        "description": "Response schema containing a list of page tiles.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardPageDeviceTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardPageTimeTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardPageDayWeatherTile"
                },
                {
                  "$ref": "#/components/schemas/DashboardPageForecastWeatherTile"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device": "#/components/schemas/DashboardPageDeviceTile",
                  "clock": "#/components/schemas/DashboardPageTimeTile",
                  "weather-day": "#/components/schemas/DashboardPageDayWeatherTile",
                  "weather-forecast": "#/components/schemas/DashboardPageForecastWeatherTile"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageTileDataSource": {
        "title": "Page Tile Data Source Response",
        "description": "Response schema containing a single tile data source.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardTileDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardTileDeviceChannelDataSource"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageTileDataSources": {
        "title": "Page Tile Data Sources Response",
        "description": "Response schema containing a list of tile data sources.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/tiles/9f807d44-bd0f-4f5e-b409-3d048efa03d8/data-source",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardTileDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardTileDeviceChannelDataSource"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageDataSource": {
        "title": "Page Data Source Response",
        "description": "Response schema containing a single page data source.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/data-source/dbf838d6-5c5b-4c8e-b189-952038b9020c",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DashboardPageDeviceChannelDataSource"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "device-channel": "#/components/schemas/DashboardPageDeviceChannelDataSource"
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "DashboardResPageDataSources": {
        "title": "Page Data Sources Response",
        "description": "Response schema containing a list of page data sources.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/dashboard-module/pages/602df00f-0cc9-45dd-a74f-3a28f0e8c8ee/data-source",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DashboardPageDeviceChannelDataSource"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "device-channel": "#/components/schemas/DashboardPageDeviceChannelDataSource"
                }
              }
            },
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        }
      },
      "SystemMemoryInfo": {
        "title": "Memory Info",
        "description": "Schema for a details about total, used, and free memory on the system.",
        "type": "object",
        "required": [
          "total",
          "used",
          "free"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total available system memory in bytes.",
            "example": 8388608000,
            "readOnly": true
          },
          "used": {
            "type": "integer",
            "description": "Used memory in bytes.",
            "example": 4200000000,
            "readOnly": true
          },
          "free": {
            "type": "integer",
            "description": "Free memory in bytes.",
            "example": 4188608000,
            "readOnly": true
          }
        },
        "examples": [
          {
            "total": 8388608000,
            "used": 4200000000,
            "free": 4188608000
          }
        ]
      },
      "SystemStorageInfo": {
        "title": "Storage Info",
        "description": "Schema for a details about system storage, including file system, usage, and available space.",
        "type": "object",
        "required": [
          "fs",
          "used",
          "size",
          "available"
        ],
        "properties": {
          "fs": {
            "type": "string",
            "description": "Filesystem type or mount point.",
            "example": "/dev/mmcblk0p1",
            "readOnly": true
          },
          "used": {
            "type": "integer",
            "description": "Used storage space in bytes.",
            "example": 15000000000,
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "description": "Total storage capacity in bytes.",
            "example": 32000000000,
            "readOnly": true
          },
          "available": {
            "type": "integer",
            "description": "Available free storage space in bytes.",
            "example": 17000000000,
            "readOnly": true
          }
        },
        "examples": [
          {
            "fs": "/dev/mmcblk0p1",
            "used": 15000000000,
            "size": 32000000000,
            "available": 17000000000
          }
        ]
      },
      "SystemTemperatureInfo": {
        "title": "Temperature Info",
        "description": "Schema for the current temperature of system components like CPU and GPU.",
        "type": "object",
        "properties": {
          "cpu": {
            "type": "integer",
            "nullable": true,
            "description": "CPU temperature in Celsius.",
            "example": 55,
            "readOnly": true
          },
          "gpu": {
            "type": "integer",
            "nullable": true,
            "description": "GPU temperature in Celsius.",
            "example": 60,
            "readOnly": true
          }
        },
        "examples": [
          {
            "cpu": 55,
            "gpu": 60
          }
        ]
      },
      "SystemOperatingSystemInfo": {
        "title": "Operating System Info",
        "description": "Schema for a information about the operating system, including distribution, version, and uptime.",
        "type": "object",
        "required": [
          "platform",
          "distro",
          "release",
          "uptime"
        ],
        "properties": {
          "platform": {
            "type": "string",
            "description": "Operating system platform.",
            "example": "linux",
            "readOnly": true
          },
          "distro": {
            "type": "string",
            "description": "Operating system distribution.",
            "example": "Debian",
            "readOnly": true
          },
          "release": {
            "type": "string",
            "description": "Operating system release version.",
            "example": "11 (bullseye)",
            "readOnly": true
          },
          "uptime": {
            "type": "integer",
            "description": "System uptime in seconds.",
            "example": 36000,
            "readOnly": true
          }
        },
        "examples": [
          {
            "platform": "linux",
            "distro": "Debian",
            "release": "11 (bullseye)",
            "uptime": 36000
          }
        ]
      },
      "SystemDisplayInfo": {
        "title": "Display Info",
        "description": "Schema for a information about the display resolution and current screen resolution.",
        "type": "object",
        "required": [
          "resolution_x",
          "resolution_y",
          "current_res_x",
          "current_res_y"
        ],
        "properties": {
          "resolution_x": {
            "type": "integer",
            "description": "Native horizontal screen resolution.",
            "example": 1920,
            "readOnly": true
          },
          "resolution_y": {
            "type": "integer",
            "description": "Native vertical screen resolution.",
            "example": 1080,
            "readOnly": true
          },
          "current_res_x": {
            "type": "integer",
            "description": "Current horizontal screen resolution.",
            "example": 1280,
            "readOnly": true
          },
          "current_res_y": {
            "type": "integer",
            "description": "Current vertical screen resolution.",
            "example": 720,
            "readOnly": true
          }
        },
        "examples": [
          {
            "resolution_x": 1920,
            "resolution_y": 1080,
            "current_res_x": 1280,
            "current_res_y": 720
          }
        ]
      },
      "SystemNetworkStats": {
        "title": "Network Stats",
        "description": "Schema for a network statistics, including interface, received/transmitted bytes, and speed.",
        "type": "object",
        "required": [
          "interface",
          "rx_bytes",
          "tx_bytes"
        ],
        "properties": {
          "interface": {
            "type": "string",
            "description": "Network interface name.",
            "example": "eth0",
            "readOnly": true
          },
          "rx_bytes": {
            "type": "integer",
            "description": "Total received bytes.",
            "example": 123456789,
            "readOnly": true
          },
          "tx_bytes": {
            "type": "integer",
            "description": "Total transmitted bytes.",
            "example": 98765432,
            "readOnly": true
          }
        }
      },
      "SystemDefaultNetwork": {
        "title": "Default Network Info",
        "description": "Schema for a default network info, including interface, ip addresses and mac address.",
        "type": "object",
        "required": [
          "interface",
          "ip4",
          "ip6",
          "mac"
        ],
        "properties": {
          "interface": {
            "type": "string",
            "description": "Network interface name.",
            "example": "eth0",
            "readOnly": true
          },
          "ip4": {
            "type": "string",
            "description": "IPv4 address.",
            "example": "192.168.1.5",
            "readOnly": true
          },
          "ip6": {
            "type": "string",
            "description": "IPv6 address.",
            "example": "fe80::134a:1e43:abc5:d413",
            "readOnly": true
          },
          "mac": {
            "type": "string",
            "description": "Default network interface physical address.",
            "example": "xx:xx:xx:xx:xx:xx",
            "readOnly": true
          }
        }
      },
      "SystemSystemInfo": {
        "title": "System Info",
        "description": "Schema for a detailed information about the system, including CPU load, memory, storage, temperature, operating system, network, and display.",
        "type": "object",
        "required": [
          "cpu_load",
          "memory",
          "storage",
          "temperature",
          "os",
          "network",
          "default_network",
          "display"
        ],
        "properties": {
          "cpu_load": {
            "type": "number",
            "format": "float",
            "description": "Current CPU load percentage (0-100%).",
            "example": 15.3,
            "readOnly": true
          },
          "memory": {
            "$ref": "#/components/schemas/SystemMemoryInfo"
          },
          "storage": {
            "type": "array",
            "description": "List of available storage devices and their usage details.",
            "items": {
              "$ref": "#/components/schemas/SystemStorageInfo"
            },
            "readOnly": true
          },
          "temperature": {
            "$ref": "#/components/schemas/SystemTemperatureInfo"
          },
          "os": {
            "$ref": "#/components/schemas/SystemOperatingSystemInfo",
            "description": "Operating system name and version."
          },
          "network": {
            "type": "array",
            "description": "List of network interfaces with statistics.",
            "items": {
              "$ref": "#/components/schemas/SystemNetworkStats"
            },
            "readOnly": true
          },
          "default_network": {
            "$ref": "#/components/schemas/SystemDefaultNetwork"
          },
          "display": {
            "$ref": "#/components/schemas/SystemDisplayInfo"
          }
        },
        "examples": [
          {
            "cpu_load": 15.3,
            "memory": {
              "total": 8388608000,
              "used": 4200000000,
              "free": 4188608000
            },
            "storage": [
              {
                "fs": "/dev/mmcblk0p1",
                "used": 15000000000,
                "size": 32000000000,
                "available": 17000000000
              }
            ],
            "temperature": {
              "cpu": 55,
              "gpu": 60
            },
            "os": {
              "platform": "linux",
              "distro": "Debian",
              "release": "11 (bullseye)",
              "uptime": 36000
            },
            "network": [
              {
                "interface": "eth0",
                "rx_bytes": 123456789,
                "tx_bytes": 98765432
              }
            ],
            "default_network": {
              "interface": "eth0",
              "ip4": "192.168.1.5",
              "ip6": "fe80::134a:1e43:abc5:d413",
              "mac": "xx:xx:xx:xx:xx:xx"
            },
            "display": {
              "resolution_x": 1920,
              "resolution_y": 1080,
              "current_res_x": 1280,
              "current_res_y": 720
            }
          }
        ]
      },
      "SystemThrottleStatus": {
        "title": "Throttle Status",
        "description": "Schema that indicates whether the system has encountered throttling, frequency capping, or undervoltage conditions.",
        "type": "object",
        "required": [
          "undervoltage",
          "frequency_capping",
          "throttling",
          "soft_temp_limit"
        ],
        "properties": {
          "undervoltage": {
            "type": "boolean",
            "description": "Indicates if the system has detected undervoltage conditions.",
            "default": false,
            "readOnly": true
          },
          "frequency_capping": {
            "type": "boolean",
            "description": "Indicates if the system is reducing CPU frequency due to power constraints.",
            "default": false,
            "readOnly": true
          },
          "throttling": {
            "type": "boolean",
            "description": "Indicates if the system has experienced CPU throttling due to high temperatures.",
            "default": false,
            "readOnly": true
          },
          "soft_temp_limit": {
            "type": "boolean",
            "description": "Indicates if the system has reached the soft temperature limit and is reducing performance.",
            "default": false,
            "readOnly": true
          }
        },
        "examples": [
          {
            "undervoltage": false,
            "frequency_capping": false,
            "throttling": false,
            "soft_temp_limit": false
          }
        ]
      },
      "SystemResSystemInfo": {
        "title": "System Info Response",
        "description": "Response containing detailed system information, including CPU load, memory usage, storage, temperature, OS, network, and display details.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/system-module/system/info",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/SystemSystemInfo",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/system-module/system/info",
            "method": "GET",
            "data": {
              "cpu_load": 15.3,
              "memory": {
                "total": 8388608000,
                "used": 4200000000,
                "free": 4188608000
              },
              "storage": [
                {
                  "fs": "/dev/mmcblk0p1",
                  "used": 15000000000,
                  "size": 32000000000,
                  "available": 17000000000
                }
              ],
              "temperature": {
                "cpu": 55,
                "gpu": 60
              },
              "os": {
                "platform": "linux",
                "distro": "Debian",
                "release": "11 (bullseye)",
                "uptime": 36000
              },
              "network": [
                {
                  "interface": "eth0",
                  "rx_bytes": 123456789,
                  "tx_bytes": 98765432
                }
              ],
              "default_network": {
                "interface": "eth0",
                "ip4": "192.168.1.5",
                "ip6": "fe80::134a:1e43:abc5:d413",
                "mac": "xx:xx:xx:xx:xx:xx"
              },
              "display": {
                "resolution_x": 1920,
                "resolution_y": 1080,
                "current_res_x": 1280,
                "current_res_y": 720
              }
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "SystemResThrottleStatus": {
        "title": "Throttle Status Response",
        "description": "Response indicating whether the system has experienced any throttling, frequency capping, or undervoltage conditions.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/system-module/system/throtle",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/SystemThrottleStatus",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/system-module/system/throtle",
            "method": "GET",
            "data": {
              "undervoltage": false,
              "frequency_capping": false,
              "throttling": false,
              "soft_temp_limit": false
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "WeatherWeather": {
        "title": "Weather Condition",
        "description": "Schema for the current weather condition, including description and icon.",
        "type": "object",
        "required": [
          "code",
          "main",
          "description",
          "icon"
        ],
        "properties": {
          "code": {
            "type": "number",
            "description": "Weather condition code.",
            "example": 800
          },
          "main": {
            "type": "string",
            "description": "Weather condition (e.g., Rain, Snow, Clear).",
            "example": "Clear"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the weather condition.",
            "example": "clear sky"
          },
          "icon": {
            "type": "string",
            "description": "Icon code representing the current weather condition.",
            "example": "01d"
          }
        },
        "examples": [
          {
            "code": 800,
            "main": "Clear",
            "description": "clear sky",
            "icon": "01d"
          }
        ]
      },
      "WeatherWind": {
        "title": "Wind Conditions",
        "description": "Schema for describing the wind conditions at the specified location.",
        "type": "object",
        "required": [
          "speed",
          "deg",
          "gust"
        ],
        "properties": {
          "speed": {
            "type": "number",
            "description": "Wind speed in meters per second.",
            "example": 3.5
          },
          "deg": {
            "type": "number",
            "description": "Wind direction in degrees (0¬∞ - 360¬∞).",
            "example": 180
          },
          "gust": {
            "type": "number",
            "nullable": true,
            "description": "Wind gust speed in meters per second.",
            "example": 5.8
          }
        },
        "examples": [
          {
            "speed": 3.5,
            "deg": 180,
            "gust": 5.8
          }
        ]
      },
      "WeatherLocation": {
        "title": "Location Details",
        "description": "Schema for the geographical location of the weather data.",
        "type": "object",
        "required": [
          "name",
          "country"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the city or region.",
            "example": "Prague"
          },
          "country": {
            "type": "string",
            "description": "Country code (ISO 3166-1 alpha-2) or full country name.",
            "example": "CZ"
          }
        },
        "examples": [
          {
            "name": "Prague",
            "country": "CZ"
          }
        ]
      },
      "WeatherCurrentDay": {
        "description": "Schema for a specific day, including temperature, wind, and precipitation.",
        "type": "object",
        "title": "Daily Weather Report",
        "required": [
          "temperature",
          "feels_like",
          "pressure",
          "humidity",
          "weather",
          "wind",
          "clouds",
          "rain",
          "snow",
          "sunrise",
          "sunset",
          "day_time"
        ],
        "properties": {
          "temperature": {
            "type": "number",
            "description": "Current temperature in degrees Celsius.",
            "example": 22.5
          },
          "temperature_min": {
            "type": "number",
            "nullable": true,
            "description": "Minimum recorded temperature for the day in degrees Celsius.",
            "default": null,
            "example": 18.2
          },
          "temperature_max": {
            "type": "number",
            "nullable": true,
            "description": "Maximum recorded temperature for the day in degrees Celsius.",
            "default": null,
            "example": 25.8
          },
          "feels_like": {
            "type": "number",
            "description": "Perceived temperature based on wind and humidity.",
            "example": 21.9
          },
          "pressure": {
            "type": "number",
            "description": "Atmospheric pressure in hPa.",
            "example": 1013
          },
          "humidity": {
            "type": "number",
            "description": "Humidity level as a percentage.",
            "example": 55
          },
          "weather": {
            "$ref": "#/components/schemas/WeatherWeather",
            "description": "Detailed weather status."
          },
          "wind": {
            "$ref": "#/components/schemas/WeatherWind",
            "description": "Wind conditions at the location."
          },
          "clouds": {
            "type": "number",
            "description": "Cloudiness percentage.",
            "example": 10
          },
          "rain": {
            "type": "number",
            "nullable": true,
            "description": "Rain volume in the last hour (mm).",
            "example": 10
          },
          "snow": {
            "type": "number",
            "nullable": true,
            "description": "Snow volume in the last hour (mm).",
            "example": 10
          },
          "sunrise": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for sunrise in ISO 8601 format.",
            "example": "2025-02-06T06:45:00Z"
          },
          "sunset": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for sunset in ISO 8601 format.",
            "example": "2025-02-06T17:30:00Z"
          },
          "day_time": {
            "type": "string",
            "format": "date-time",
            "description": "Time of data calculation"
          }
        },
        "examples": [
          {
            "temperature": 22.5,
            "temperature_min": 18.2,
            "temperature_max": 25.8,
            "feels_like": 21.9,
            "pressure": 1013,
            "humidity": 55,
            "weather": {
              "code": 800,
              "main": "Clear",
              "description": "clear sky",
              "icon": "01d"
            },
            "wind": {
              "speed": 3.5,
              "deg": 180,
              "gust": 5.8
            },
            "clouds": 10,
            "rain": 10,
            "snow": 10,
            "sunrise": "2025-02-06T06:45:00Z",
            "sunset": "2025-02-06T17:30:00Z",
            "day_time": "2019-08-24T14:15:22Z"
          }
        ]
      },
      "WeatherForecastDay": {
        "description": "Schema for a forecasted day, including temperature, wind, and precipitation.",
        "type": "object",
        "title": "Forecast Weather Report",
        "required": [
          "temperature",
          "feels_like",
          "pressure",
          "humidity",
          "weather",
          "wind",
          "clouds",
          "rain",
          "snow",
          "day_time"
        ],
        "properties": {
          "temperature": {
            "type": "object",
            "description": "Current temperatures during the day in degrees Celsius.",
            "properties": {
              "morn": {
                "type": "number",
                "nullable": true,
                "description": "Morning temperature.",
                "default": null,
                "example": 22.5
              },
              "day": {
                "type": "number",
                "nullable": true,
                "description": "Day temperature.",
                "default": null,
                "example": 24.5
              },
              "eve": {
                "type": "number",
                "nullable": true,
                "description": "Evening temperature.",
                "default": null,
                "example": 22.5
              },
              "night": {
                "type": "number",
                "nullable": true,
                "description": "Night temperature.",
                "default": null,
                "example": 20.5
              },
              "min": {
                "type": "number",
                "nullable": true,
                "description": "Min daily temperature.",
                "default": null,
                "example": 20.5
              },
              "max": {
                "type": "number",
                "nullable": true,
                "description": "Max daily temperature.",
                "default": null,
                "example": 24.5
              }
            }
          },
          "feels_like": {
            "type": "object",
            "description": "Perceived temperatures during the day based on wind and humidity.",
            "properties": {
              "morn": {
                "type": "number",
                "nullable": true,
                "description": "Morning temperature.",
                "default": null,
                "example": 22.5
              },
              "day": {
                "type": "number",
                "nullable": true,
                "description": "Day temperature.",
                "default": null,
                "example": 24.5
              },
              "eve": {
                "type": "number",
                "nullable": true,
                "description": "Evening temperature.",
                "default": null,
                "example": 22.5
              },
              "night": {
                "type": "number",
                "nullable": true,
                "description": "Night temperature.",
                "default": null,
                "example": 20.5
              }
            }
          },
          "pressure": {
            "type": "number",
            "description": "Atmospheric pressure in hPa.",
            "example": 1013
          },
          "humidity": {
            "type": "number",
            "description": "Humidity level as a percentage.",
            "example": 55
          },
          "weather": {
            "$ref": "#/components/schemas/WeatherWeather",
            "description": "Detailed weather status."
          },
          "wind": {
            "$ref": "#/components/schemas/WeatherWind",
            "description": "Wind conditions at the location."
          },
          "clouds": {
            "type": "number",
            "description": "Cloudiness percentage.",
            "example": 10
          },
          "rain": {
            "type": "number",
            "nullable": true,
            "description": "Rain volume in the last hour (mm).",
            "example": 10
          },
          "snow": {
            "type": "number",
            "nullable": true,
            "description": "Snow volume in the last hour (mm).",
            "example": 10
          },
          "sunrise": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp for sunrise in ISO 8601 format.",
            "default": null,
            "example": "2025-02-06T06:45:00Z"
          },
          "sunset": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp for sunset in ISO 8601 format.",
            "default": null,
            "example": "2025-02-06T17:30:00Z"
          },
          "moonrise": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp for moonrise in ISO 8601 format.",
            "default": null,
            "example": "2025-02-06T17:30:00Z"
          },
          "moonset": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "description": "Timestamp for moonset in ISO 8601 format.",
            "default": null,
            "example": "2025-02-06T17:30:00Z"
          },
          "day_time": {
            "type": "string",
            "format": "date-time",
            "description": "Time of data calculation"
          }
        },
        "examples": [
          {
            "temperature": {
              "morn": 22.5,
              "day": 24.5,
              "eve": 22.5,
              "night": 20.5,
              "min": 20.5,
              "max": 24.5
            },
            "feels_like": {
              "morn": 22.5,
              "day": 24.5,
              "eve": 22.5,
              "night": 20.5
            },
            "pressure": 1013,
            "humidity": 55,
            "weather": {
              "code": 800,
              "main": "Clear",
              "description": "clear sky",
              "icon": "01d"
            },
            "wind": {
              "speed": 3.5,
              "deg": 180,
              "gust": 5.8
            },
            "clouds": 10,
            "rain": 10,
            "snow": 10,
            "sunrise": "2025-02-06T06:45:00Z",
            "sunset": "2025-02-06T17:30:00Z",
            "moonrise": "2025-02-06T17:30:00Z",
            "moonset": "2025-02-06T17:30:00Z",
            "day_time": "2019-08-24T14:15:22Z"
          }
        ]
      },
      "WeatherLocationWeather": {
        "title": "Location Weather",
        "description": "Schema form current weather conditions and forecast details for a specific location.",
        "type": "object",
        "required": [
          "current",
          "forecast",
          "location"
        ],
        "properties": {
          "current": {
            "$ref": "#/components/schemas/WeatherCurrentDay",
            "description": "Current weather conditions at the specified location."
          },
          "forecast": {
            "type": "array",
            "description": "List of daily weather forecasts.",
            "items": {
              "$ref": "#/components/schemas/WeatherForecastDay"
            }
          },
          "location": {
            "$ref": "#/components/schemas/WeatherLocation",
            "description": "Details of the location where the weather data is recorded."
          }
        },
        "examples": [
          {
            "current": {
              "temperature": 22.5,
              "temperature_min": 18.2,
              "temperature_max": 25.8,
              "feels_like": 21.9,
              "pressure": 1013,
              "humidity": 55,
              "weather": {
                "code": 800,
                "main": "Clear",
                "description": "clear sky",
                "icon": "01d"
              },
              "wind": {
                "speed": 3.5,
                "deg": 180,
                "gust": 5.8
              },
              "clouds": 10,
              "rain": 10,
              "snow": 10,
              "sunrise": "2025-02-06T06:45:00Z",
              "sunset": "2025-02-06T17:30:00Z",
              "day_time": "2019-08-24T14:15:22Z"
            },
            "forecast": [
              {
                "temperature": {
                  "morn": 22.5,
                  "day": 24.5,
                  "eve": 22.5,
                  "night": 20.5,
                  "min": 20.5,
                  "max": 24.5
                },
                "feels_like": {
                  "morn": 22.5,
                  "day": 24.5,
                  "eve": 22.5,
                  "night": 20.5
                },
                "pressure": 1013,
                "humidity": 55,
                "weather": {
                  "code": 800,
                  "main": "Clear",
                  "description": "clear sky",
                  "icon": "01d"
                },
                "wind": {
                  "speed": 3.5,
                  "deg": 180,
                  "gust": 5.8
                },
                "clouds": 10,
                "rain": 10,
                "snow": 10,
                "sunrise": "2025-02-06T06:45:00Z",
                "sunset": "2025-02-06T17:30:00Z",
                "moonrise": "2025-02-06T17:30:00Z",
                "moonset": "2025-02-06T17:30:00Z",
                "day_time": "2019-08-24T14:15:22Z"
              }
            ],
            "location": {
              "name": "Prague",
              "country": "CZ"
            }
          }
        ]
      },
      "WeatherGeolocation": {
        "title": "Geolocation",
        "description": "Represents geographical location details, including city name, coordinates, and country information.",
        "type": "object",
        "required": [
          "name",
          "local_names",
          "lat",
          "lon",
          "country"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the city or location.",
            "example": "Prague"
          },
          "local_names": {
            "type": "object",
            "description": "Alternative names for the location in different languages.",
            "additionalProperties": {
              "type": "string",
              "description": "Localized name of the location in a specific language, where the key is the language code (ISO 639-1).",
              "example": "Prague"
            }
          },
          "lat": {
            "type": "string",
            "description": "Latitude coordinate of the location.",
            "example": "50.0755"
          },
          "lon": {
            "type": "string",
            "description": "Longitude coordinate of the location.",
            "example": "14.4378"
          },
          "country": {
            "type": "string",
            "description": "Country code (ISO 3166-1 alpha-2) or full country name.",
            "example": "CZ"
          },
          "state": {
            "type": "string",
            "description": "State or province where the location is situated, if applicable.",
            "example": "Prague Region"
          }
        },
        "examples": [
          {
            "name": "Prague",
            "local_names": {
              "property1": "Prague",
              "property2": "Prague"
            },
            "lat": "50.0755",
            "lon": "14.4378",
            "country": "CZ",
            "state": "Prague Region"
          }
        ]
      },
      "WeatherResLocationWeather": {
        "title": "Location Weather Response",
        "description": "Response containing detailed weather conditions and forecast for a specified location.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/weather-module/weather",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/WeatherLocationWeather",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/weather-module/weather",
            "method": "GET",
            "data": {
              "current": {
                "temperature": 22.5,
                "temperature_min": 18.2,
                "temperature_max": 25.8,
                "feels_like": 21.9,
                "pressure": 1013,
                "humidity": 55,
                "weather": {
                  "code": 800,
                  "main": "Clear",
                  "description": "clear sky",
                  "icon": "01d"
                },
                "wind": {
                  "speed": 3.5,
                  "deg": 180,
                  "gust": 5.8
                },
                "clouds": 10,
                "rain": 10,
                "snow": 10,
                "sunrise": "2025-02-06T06:45:00Z",
                "sunset": "2025-02-06T17:30:00Z",
                "day_time": "2019-08-24T14:15:22Z"
              },
              "forecast": [
                {
                  "temperature": {
                    "morn": 22.5,
                    "day": 24.5,
                    "eve": 22.5,
                    "night": 20.5,
                    "min": 20.5,
                    "max": 24.5
                  },
                  "feels_like": {
                    "morn": 22.5,
                    "day": 24.5,
                    "eve": 22.5,
                    "night": 20.5
                  },
                  "pressure": 1013,
                  "humidity": 55,
                  "weather": {
                    "code": 800,
                    "main": "Clear",
                    "description": "clear sky",
                    "icon": "01d"
                  },
                  "wind": {
                    "speed": 3.5,
                    "deg": 180,
                    "gust": 5.8
                  },
                  "clouds": 10,
                  "rain": 10,
                  "snow": 10,
                  "sunrise": "2025-02-06T06:45:00Z",
                  "sunset": "2025-02-06T17:30:00Z",
                  "moonrise": "2025-02-06T17:30:00Z",
                  "moonset": "2025-02-06T17:30:00Z",
                  "day_time": "2019-08-24T14:15:22Z"
                }
              ],
              "location": {
                "name": "Prague",
                "country": "CZ"
              }
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "WeatherResLocationCurrent": {
        "title": "Location Current Day Response",
        "type": "object",
        "description": "Response containing detailed weather conditions for a current day and for a specified location.",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/weather-module/weather/current",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/WeatherCurrentDay",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/weather-module/weather/current",
            "method": "GET",
            "data": {
              "temperature": 22.5,
              "temperature_min": 18.2,
              "temperature_max": 25.8,
              "feels_like": 21.9,
              "pressure": 1013,
              "humidity": 55,
              "weather": {
                "code": 800,
                "main": "Clear",
                "description": "clear sky",
                "icon": "01d"
              },
              "wind": {
                "speed": 3.5,
                "deg": 180,
                "gust": 5.8
              },
              "clouds": 10,
              "rain": 10,
              "snow": 10,
              "sunrise": "2025-02-06T06:45:00Z",
              "sunset": "2025-02-06T17:30:00Z",
              "day_time": "2019-08-24T14:15:22Z"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "WeatherResLocationForecast": {
        "title": "LocationForecast",
        "type": "object",
        "description": "Response containing detailed weather conditions forecast for a specified location.",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/weather-module/weather/forecast",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeatherForecastDay"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/weather-module/weather/forecast",
            "method": "GET",
            "data": [
              {
                "temperature": {
                  "morn": 22.5,
                  "day": 24.5,
                  "eve": 22.5,
                  "night": 20.5,
                  "min": 20.5,
                  "max": 24.5
                },
                "feels_like": {
                  "morn": 22.5,
                  "day": 24.5,
                  "eve": 22.5,
                  "night": 20.5
                },
                "pressure": 1013,
                "humidity": 55,
                "weather": {
                  "code": 800,
                  "main": "Clear",
                  "description": "clear sky",
                  "icon": "01d"
                },
                "wind": {
                  "speed": 3.5,
                  "deg": 180,
                  "gust": 5.8
                },
                "clouds": 10,
                "rain": 10,
                "snow": 10,
                "sunrise": "2025-02-06T06:45:00Z",
                "sunset": "2025-02-06T17:30:00Z",
                "moonrise": "2025-02-06T17:30:00Z",
                "moonset": "2025-02-06T17:30:00Z",
                "day_time": "2019-08-24T14:15:22Z"
              }
            ],
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "WeatherResGeolocationCityToCoordinates": {
        "title": "City to Coordinates Geolocation Response",
        "description": "Response providing latitude and longitude coordinates for a given city name.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/weather-module/geolocation/city-to-coordinates",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/WeatherGeolocation",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/weather-module/geolocation/city-to-coordinates",
            "method": "GET",
            "data": {
              "name": "Prague",
              "local_names": {
                "property1": "Prague",
                "property2": "Prague"
              },
              "lat": "50.0755",
              "lon": "14.4378",
              "country": "CZ",
              "state": "Prague Region"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "WeatherResGeolocationCoordinatesToCity": {
        "title": "Coordinates to City Geolocation Response",
        "description": "Response providing city details for a given latitude and longitude.",
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "request_id",
          "path",
          "method",
          "data",
          "metadata"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the API request was successful (`success`) or encountered an error (`error`).",
            "example": "success",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).",
            "example": "2025-01-18T12:00:00Z",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier assigned to this API request. Useful for debugging and tracking API calls.",
            "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "The API endpoint that was requested, including any dynamic parameters.",
            "example": "/api/v1/weather-module/geolocation/coordinates-to-city",
            "readOnly": true
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PATCH",
              "DELETE"
            ],
            "description": "The HTTP method used for the request (`GET`, `POST`, `PATCH`, `DELETE`).",
            "example": "GET",
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/WeatherGeolocation",
            "description": "The actual data payload returned by the API. The structure depends on the specific endpoint response."
          },
          "metadata": {
            "$ref": "#/components/schemas/CommonResMetadata",
            "description": "Additional metadata about the request and server performance metrics."
          }
        },
        "examples": [
          {
            "status": "success",
            "timestamp": "2025-01-18T12:00:00Z",
            "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
            "path": "/api/v1/weather-module/geolocation/coordinates-to-city",
            "method": "GET",
            "data": {
              "name": "Prague",
              "local_names": {
                "property1": "Prague",
                "property2": "Prague"
              },
              "lat": "50.0755",
              "lon": "14.4378",
              "country": "CZ",
              "state": "Prague Region"
            },
            "metadata": {
              "request_duration_ms": 57,
              "server_time": "2025-01-18T12:00:00Z",
              "cpu_usage": 25.28
            }
          }
        ]
      },
      "CommonResMetadata": {
        "title": "CommonResMetadata",
        "type": "object",
        "description": "Additional metadata about the request and server performance metrics.",
        "required": [
          "request_duration_ms",
          "server_time",
          "cpu_usage"
        ],
        "properties": {
          "request_duration_ms": {
            "type": "number",
            "format": "float",
            "example": 57,
            "description": "The total time taken to process the request, in milliseconds.",
            "readOnly": true
          },
          "server_time": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-18T12:00:00Z",
            "description": "The server's current timestamp when the response was generated, in ISO 8601 format.",
            "readOnly": true
          },
          "cpu_usage": {
            "type": "number",
            "format": "float",
            "example": 25.28,
            "description": "The CPU usage percentage at the time of processing the request. This can be useful for performance monitoring.",
            "readOnly": true
          }
        },
        "examples": [
          {
            "request_duration_ms": 57,
            "server_time": "2025-01-18T12:00:00Z",
            "cpu_usage": 25.28
          }
        ]
      }
    },
    "securitySchemes": {
      "authentication": {
        "bearerFormat": "JWT",
        "type": "http",
        "scheme": "bearer",
        "description": "Authentication scheme using a Bearer token. The client must send a valid JWT token in the `Authorization` header with the format `Bearer <token>`."
      },
      "x-display-secret": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Display-Secret",
        "description": "API Key authentication for display clients. Clients must send the secret key in the `X-Display-Secret` header."
      }
    },
    "responses": {
      "InternalServerError": {
        "description": "An unexpected server error occurred.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "timestamp",
                "request_id",
                "path",
                "method",
                "error",
                "metadata"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error",
                  "readOnly": true
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the error occurred in ISO 8601 format.",
                  "example": "2025-01-18T12:00:00Z",
                  "readOnly": true
                },
                "request_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for this specific API request.",
                  "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                  "readOnly": true
                },
                "path": {
                  "type": "string",
                  "description": "The requested API endpoint.",
                  "example": "/api/v1/devices-module",
                  "readOnly": true
                },
                "method": {
                  "type": "string",
                  "enum": [
                    "GET",
                    "POST",
                    "PATCH",
                    "DELETE"
                  ],
                  "example": "GET",
                  "readOnly": true
                },
                "error": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Short error code indicating the type of error.",
                      "example": "InternalServerError",
                      "readOnly": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for debugging or client display.",
                      "example": "An unexpected error occurred.",
                      "readOnly": true
                    },
                    "details": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string",
                              "example": "name",
                              "readOnly": true
                            },
                            "reason": {
                              "type": "string",
                              "example": "Name cannot contain special characters.",
                              "readOnly": true
                            }
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "example": "name",
                                "readOnly": true
                              },
                              "reason": {
                                "type": "string",
                                "example": "Name cannot contain special characters.",
                                "readOnly": true
                              }
                            }
                          }
                        }
                      ],
                      "description": "Additional information about the error, if available."
                    }
                  }
                },
                "metadata": {
                  "type": "object",
                  "required": [
                    "server_time",
                    "cpu_usage"
                  ],
                  "properties": {
                    "server_time": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-01-18T12:00:00Z",
                      "readOnly": true
                    },
                    "cpu_usage": {
                      "type": "number",
                      "format": "float",
                      "example": 30.73,
                      "readOnly": true
                    }
                  }
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "status": "error",
                  "timestamp": "2025-01-18T12:00:00Z",
                  "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                  "path": "/api/v1/devices-module",
                  "method": "GET",
                  "error": {
                    "code": "InternalServerError",
                    "message": "An unexpected error occurred.",
                    "details": {
                      "field": "name",
                      "reason": "Name cannot contain special characters."
                    }
                  },
                  "metadata": {
                    "server_time": "2025-01-18T12:00:00Z",
                    "cpu_usage": 30.73
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "The requested resource was not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "timestamp",
                "request_id",
                "path",
                "method",
                "error",
                "metadata"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "default": "error",
                  "example": "error",
                  "readOnly": true
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-01-18T12:00:00Z",
                  "description": "Timestamp when the error occurred in ISO 8601 format.",
                  "readOnly": true
                },
                "request_id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                  "description": "Unique identifier for this specific API request.",
                  "readOnly": true
                },
                "path": {
                  "type": "string",
                  "example": "/api/v1/devices-module",
                  "description": "The requested API endpoint.",
                  "readOnly": true
                },
                "method": {
                  "type": "string",
                  "enum": [
                    "GET",
                    "POST",
                    "PATCH",
                    "DELETE"
                  ],
                  "example": "GET",
                  "readOnly": true
                },
                "error": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Short error code indicating the type of error.",
                      "example": "NotFoundError",
                      "readOnly": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for debugging or client display.",
                      "example": "The specified resource was not found.",
                      "readOnly": true
                    },
                    "details": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string",
                              "example": "id",
                              "readOnly": true
                            },
                            "reason": {
                              "type": "string",
                              "example": "resource not found",
                              "readOnly": true
                            }
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "readOnly": true
                              },
                              "reason": {
                                "type": "string",
                                "readOnly": true
                              }
                            }
                          }
                        }
                      ],
                      "description": "Additional information about the error, if available."
                    }
                  }
                },
                "metadata": {
                  "type": "object",
                  "required": [
                    "server_time",
                    "cpu_usage"
                  ],
                  "properties": {
                    "server_time": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-01-18T12:00:00Z",
                      "readOnly": true
                    },
                    "cpu_usage": {
                      "type": "number",
                      "format": "float",
                      "example": 30.73,
                      "readOnly": true
                    }
                  }
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "status": "error",
                  "timestamp": "2025-01-18T12:00:00Z",
                  "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                  "path": "/api/v1/devices-module",
                  "method": "GET",
                  "error": {
                    "code": "NotFoundError",
                    "message": "The specified resource was not found.",
                    "details": {
                      "field": "id",
                      "reason": "resource not found"
                    }
                  },
                  "metadata": {
                    "server_time": "2025-01-18T12:00:00Z",
                    "cpu_usage": 30.73
                  }
                }
              }
            }
          }
        }
      },
      "BadRequestError": {
        "description": "The request parameters were invalid.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "timestamp",
                "request_id",
                "path",
                "method",
                "error",
                "metadata"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "example": "error",
                  "readOnly": true
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the error occurred in ISO 8601 format.",
                  "example": "2025-01-18T12:00:00Z",
                  "readOnly": true
                },
                "request_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identifier for this specific API request.",
                  "example": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                  "readOnly": true
                },
                "path": {
                  "type": "string",
                  "example": "/api/v1/devices-module",
                  "description": "The requested API endpoint.",
                  "readOnly": true
                },
                "method": {
                  "type": "string",
                  "enum": [
                    "GET",
                    "POST",
                    "PATCH",
                    "DELETE"
                  ],
                  "example": "GET",
                  "readOnly": true
                },
                "error": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Short error code indicating the type of error.",
                      "example": "BadRequestError",
                      "readOnly": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message for debugging or client display.",
                      "example": "The 'name' parameter is invalid.",
                      "readOnly": true
                    },
                    "details": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string",
                              "example": "name",
                              "readOnly": true
                            },
                            "reason": {
                              "type": "string",
                              "example": "Name cannot contain special characters.",
                              "readOnly": true
                            }
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "example": "name",
                                "readOnly": true
                              },
                              "reason": {
                                "type": "string",
                                "example": "Name cannot contain special characters.",
                                "readOnly": true
                              }
                            }
                          }
                        }
                      ],
                      "description": "Additional information about the error, if available."
                    }
                  }
                },
                "metadata": {
                  "type": "object",
                  "required": [
                    "server_time",
                    "cpu_usage"
                  ],
                  "properties": {
                    "server_time": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-01-18T12:00:00Z",
                      "readOnly": true
                    },
                    "cpu_usage": {
                      "type": "number",
                      "example": 30.73,
                      "format": "float",
                      "readOnly": true
                    }
                  }
                }
              }
            },
            "examples": {
              "Example 1": {
                "value": {
                  "status": "error",
                  "timestamp": "2025-01-18T12:00:00Z",
                  "request_id": "b27b7c58-76f6-407a-bc78-4068e4cfd082",
                  "path": "/api/v1/devices-module",
                  "method": "GET",
                  "error": {
                    "code": "BadRequestError",
                    "message": "The 'name' parameter is invalid.",
                    "details": {
                      "field": "name",
                      "reason": "Name cannot contain special characters."
                    }
                  },
                  "metadata": {
                    "server_time": "2025-01-18T12:00:00Z",
                    "cpu_usage": 30.73
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The ID of the resource to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
        },
        "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
      },
      "deviceId": {
        "name": "deviceId",
        "in": "path",
        "required": true,
        "description": "The ID of the device to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
        },
        "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
      },
      "channelId": {
        "name": "channelId",
        "in": "path",
        "required": true,
        "description": "The ID of the channel to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
        },
        "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
      },
      "pageId": {
        "name": "pageId",
        "in": "path",
        "required": true,
        "description": "The ID of the page to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
        },
        "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
      },
      "cardId": {
        "name": "cardId",
        "in": "path",
        "required": true,
        "description": "The ID of the card to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "89a29104-184f-4b6f-9b37-5a70e24f8b44"
        },
        "example": "89a29104-184f-4b6f-9b37-5a70e24f8b44"
      },
      "tileId": {
        "name": "tileId",
        "in": "path",
        "required": true,
        "description": "The ID of the tile to retrieve.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
        },
        "example": "9431cc2d-d447-44c1-b2d0-4398624e4921"
      }
    }
  },
  "tags": [
    {
      "name": "Auth module",
      "description": "Endpoints related to user authentication, including registration, login, token validation, and session management."
    },
    {
      "name": "Configuration module",
      "description": "Endpoints related to configuring system settings, global parameters, and module-specific configurations."
    },
    {
      "name": "Dashboard module",
      "description": "A collection of endpoints that provide dashboard-related functionalities, acting as a central module for handling tile interactions."
    },
    {
      "name": "Devices module",
      "description": "A collection of endpoints that provide device-related functionalities, acting as a central module for handling device interactions."
    },
    {
      "name": "System module",
      "description": "Provides endpoints to retrieve system-related information, including CPU load, memory usage, and system health status."
    },
    {
      "name": "Users module",
      "description": "Endpoints for managing users, including user roles, permissions, and profile details."
    },
    {
      "name": "Weather module",
      "description": "A collection of endpoints that provide weather-related functionalities, such as retrieving forecasts and current conditions."
    }
  ]
}
